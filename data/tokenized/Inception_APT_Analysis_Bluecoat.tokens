After IN O
reading VBG O
the DT O
Inception NN O
paper NN O
by IN O
Snorre NNP O
Fagerland NNP O
and CC O
Waylon NNP O
Grange NNP O
, , O
I PRP O
got VBD O
curious JJ O
about IN O
this DT O
threat NN O
and CC O
did VBD O
some DT O
reversing NN O
. . O

I PRP O
felt VBD O
that IN O
it PRP O
would MD O
be VB O
good JJ O
to TO O
write VB O
a DT O
technical JJ O
blog NN O
about IN O
the DT O
process NN O
- : O
maybe RB O
it PRP O
could MD O
be VB O
helpful JJ O
or CC O
interesting JJ O
for IN O
some DT O
. . O

RTF NN O
file NN O
Analysis NNP O
MD5 NN O
: : O
4a4874fa5217a8523bf4d1954efb26ef CD O
Exploit NN O
: : O
CVE-2012 NNP O
- HYPH O
0158 NNP O
As IN O
we PRP O
can MD O
see VB O
in IN O
following VBG O
screen NN O
shot NN O
, , O
this DT O
is VBZ O
a DT O
RTF NNP O
[ -LRB- O
Rich NNP O
Text NNP O
Format NNP O
] -RRB- O
file NN O
. . O

Its PRP$ O
common JJ O
that IN O
attackers NNS O
use VBP O
document NN O
files NNS O
such JJ O
as IN O
these DT O
as IN O
bait NN O
. . O

It PRP O
is VBZ O
common JJ O
that DT O
shellcode NN O
starts VBZ O
with IN O
a DT O
NOPsled NNP O
. . O

In IN O
following VBG O
screenshot NN O
we PRP O
can MD O
see VB O
that IN O
the DT O
embedded VBN O
shellcode NN O
starts VBZ O
with IN O
NOP NNP O
slide NN O
. . O

NOP NNP O
, , O
or CC O
No DT O
OPeration NN O
- : O
is VBZ O
a DT O
single JJ O
- HYPH O
byte NN O
opcode NN O
that WDT O
does VBZ O
nothing NN O
. . O

It PRP O
has VBZ O
the DT O
hex NN O
value NN O
of IN O
0x90 NN O
. . O

Now RB O
, , O
to IN O
the DT O
functionality NN O
of IN O
the DT O
shellcode NN O
. . O

We PRP O
will MD O
ignore VB O
the DT O
first JJ O
two CD O
prolog JJ O
instructions NNS O
, , O
and CC O
for IN O
remaining VBG O
statements NNS O
I PRP O
have VBP O
inserted VBN O
comments NNS O
to TO O
help VB O
understanding VBG O
what WP O
is VBZ O
happening VBG O
in IN O
this DT O
chunk NN O
of IN O
code NN O
. . O

It PRP O
's VBZ O
traversing VBG O
the DT O
TEB NNP O
, , O
the DT O
PEB NNP O
and CC O
the DT O
Ldr NNP O
structure NN O
to TO O
get VB O
the DT O
base NN O
addresses NNS O
of IN O
ntdll.dll NN O
and CC O
kernel32.dll NN O
. . O

It PRP O
needs VBZ O
these DT O
to TO O
find VB O
the DT O
API NN O
addresses VBZ O
it PRP O
requires VBZ O
for IN O
the DT O
rest NN O
of IN O
the DT O
infection NN O
. . O

In IN O
screenshot NN O
below RB O
, , O
Function NNP O
00120F82 NNP O
is VBZ O
the DT O
malware NN O
's POS O
own JJ O
GetProcAddress NNP O
function NN O
which WDT O
takes VBZ O
two CD O
parameters NNS O
The DT O
function NN O
returns VBZ O
the DT O
memory NN O
address NN O
of IN O
the DT O
API NNP O
. . O

As IN O
shown VBN O
in IN O
the DT O
next JJ O
screenshot NN O
, , O
this DT O
function NN O
parses VBZ O
the DT O
" `` O
export NN O
name NN O
pointer NN O
table NN O
" '' O
of IN O
the DT O
.dll NNPS O
[ -LRB- O
ex NN O
. . O

kernel32.dll NN O
] -RRB- O
and CC O
generates VBZ O
a DT O
hash NN O
for IN O
each DT O
function NN O
. . O

It PRP O
compares VBZ O
this DT O
with IN O
the DT O
argument NN O
API NNP O
hash NN O
( -LRB- O
Ex NNP O
DF7D9BAD NNP O
for IN O
GetFileSize NNP O
, , O
see VB O
above IN O
screenshot NN O
) -RRB- O
using VBG O
the DT O
CMP NNP O
EDI NNP O
, , O
ESI NNP O
instruction NN O
. . O

Once IN O
the DT O
matching NN O
API NNP O
is VBZ O
found VBN O
it PRP O
parses VBZ O
the DT O
Export NNP O
Address NNP O
Table NNP O
and CC O
returns VBZ O
the DT O
respective JJ O
API NN O
address NN O
to IN O
the DT O
caller NN O
in IN O
EAX NNP O
register VBP O
. . O

The DT O
document NN O
contains VBZ O
two CD O
levels NNS O
of IN O
shellcode NN O
. . O

We PRP O
are VBP O
analyzing VBG O
first JJ O
level NN O
, , O
and CC O
in IN O
the DT O
following VBG O
code NN O
we PRP O
can MD O
see VB O
a DT O
typical JJ O
egghunting NN O
method NN O
: : O
It PRP O
attempts VBZ O
to TO O
open VB O
the DT O
already RB O
opened VBN O
rtf JJ O
file NN O
by IN O
checking VBG O
file NN O
handles VBZ O
in IN O
memory NN O
. . O

It PRP O
starts VBZ O
with IN O
a DT O
handle NN O
with IN O
the DT O
value NN O
4 CD O
and CC O
verifies NNS O
it PRP O
by IN O
doing VBG O
GetFileSize NNP O
on IN O
it PRP O
. . O

If IN O
this DT O
fails VBZ O
it PRP O
does VBZ O
ADD RB O
ESI,4 NN O
again RB O
( -LRB- O
adds VBZ O
4 CD O
to TO O
the DT O
handle VB O
) -RRB- O
until IN O
the DT O
API NNP O
succeeds VBZ O
. . O

When WRB O
this DT O
happens VBZ O
it PRP O
checks VBZ O
the DT O
file NN O
offset VBN O
0x8300 NFP O
for IN O
the DT O
marker NN O
0x54405450 NFP O
. . O

Again RB O
, , O
if IN O
this DT O
matches VBZ O
up RP O
, , O
it PRP O
allocates VBZ O
memory NN O
into IN O
which WDT O
it PRP O
reads VBZ O
the DT O
file NN O
content NN O
and CC O
jumps VBZ O
to IN O
the DT O
2nd JJ O
level NN O
shellcode NN O
with IN O
a DT O
JMP NNP O
EBX NNP O
. . O

Now RB O
we PRP O
have VBP O
landed VBN O
into IN O
the DT O
second JJ O
level NN O
shellcode NN O
, , O
but CC O
it PRP B-Entity
is VBZ O
obfuscated VBD B-Action
to IN B-Modifier
evade VB O
static JJ B-Entity
analysis NN I-Entity
. . O

At IN O
the DT O
initial JJ O
stage NN O
there EX O
are VBP O
few JJ O
instructions NNS O
waiting VBG O
to TO O
help VB O
us PRP O
. . O

This DT O
is VBZ O
the DT O
deobfuscation NN O
code NN O
. . O

We PRP O
can MD O
see VB O
that IN O
0x23B NFP O
* NFP O
4 CD O
is VBZ O
the DT O
number NN O
of IN O
bytes NNS O
obfuscated VBN O
, , O
POP NNP O
EBX NNP O
is VBZ O
the DT O
get VB O
EIP NNP O
instruction NN O
and CC O
0x5687F945 NN O
is VBZ O
the DT O
deobfuscation NN O
XOR NNP O
key NN O
. . O

In IN O
following VBG O
code NN O
we PRP O
can MD O
see VB O
the DT O
hexadecimal JJ O
value NN O
that WDT O
corresponds VBZ O
to IN O
the DT O
library NN O
name NN O
being VBG O
pushed VBN O
to IN O
the DT O
LoadLibrary NNP O
function NN O
, , O
as RB O
well RB O
as IN O
two CD O
loops NNS O
to TO O
get VB O
the DT O
API NN O
addresses NNS O
using VBG O
" `` O
CALL NNP O
02E203E2 NN O
" `` O
function NN O
. . O

Here RB O
also RB O
it PRP O
uses VBZ O
hashes NNS O
to TO O
look VB O
up RP O
APIs NNS O
. . O

In IN O
the DT O
following VBG O
code NN O
it PRP O
searches VBZ O
for IN O
the DT O
embedded VBN O
VBS NNP O
file NN O
inside IN O
the DT O
RTF NNP O
file NN O
in IN O
memory NN O
. . O

It PRP O
checks VBZ O
for IN O
the DT O
file NN O
size NN O
in IN O
a DT O
loop NN O
, , O
and CC O
if IN O
the DT O
size NN O
is VBZ O
larger JJR O
than IN O
0x2000 CD O
then RB O
it PRP O
sets VBZ O
the DT O
file NN O
ponter NN O
to IN O
0x8C14 CD O
to TO O
compare VB O
with IN O
the DT O
VBS NNP O
file NN O
marker NN O
as IN O
we PRP O
can MD O
see VB O
in IN O
following VBG O
screenshot NN O
. . O

After IN O
finding VBG O
the DT O
VBS NNP O
marker NN O
in IN O
memory NN O
, , O
it PRP O
decrypts VBZ O
the DT O
VBS NNP O
file NN O
in IN O
two CD O
iterations NNS O
. . O

In IN O
the DT O
first JJ O
loop NN O
it PRP O
decrypts VBZ O
and CC O
in IN O
the DT O
second JJ O
loop NN O
it PRP O
swaps VBZ O
the DT O
low JJ O
and CC O
high JJ O
bytes NNS O
of IN O
the DT O
first JJ O
0x100 CD O
16-bit CD O
words NNS O
, , O
after IN O
which WDT O
it PRP O
writes VBZ O
the DT O
file NN O
to IN O
a DT O
file NN O
named VBN O
" `` O
Temp NNP O
/ SYM O
ew_Rg.vbs RB O
" '' O
. . O

The DT O
following VBG O
screenshot NN O
shows VBZ O
a DT O
part NN O
of IN O
the DT O
.VBS JJ O
payload NN O
file NN O
dropped VBD O
by IN O
.RTF CD O
file NN O
. . O

First JJ O
line NN O
is VBZ O
the DT O
encrypted VBN O
.dll NNP O
4th JJ O
line NN O
contains VBZ O
Key JJ O
to TO O
decrypt VB O
the DT O
.dll NN O
. . O

Remaining VBG O
part NN O
is VBZ O
self NN O
- HYPH O
explanatory JJ O
. . O

The DT O
instruction NN O
c NN O
= SYM O
Crypt(c NNP O
, , O
k LS O
) -RRB- O
function NN O
decrypts VBZ O
the DT O
encrypted VBN O
dll NN O
and CC O
returns VBZ O
the DT O
decrypted VBN O
dll NN O
. . O

( -LRB- O
See VB O
the DT O
screenshot NN O
above RB O
) -RRB- O
c= NN O
encrypted VBN O
dll NN O
. . O

k NN O
= SYM O
decryption NN O
key NN O
. . O

Following VBG O
function NN O
writes VBZ O
byte NN O
by IN O
byte NN O
to IN O
the DT O
dropped.dll JJ O
file NN O
. . O

Finally RB O
, , O
the DT O
following VBG O
code NN O
executes VBZ O
the DT O
" `` O
regsvr32 NN O
" '' O
command NN O
to TO O
run VB O
the DT O
wmiprvse.dll NN O
in IN O
silent JJ O
mode NN O
and CC O
sets VBZ O
the DT O
run NN O
key NN O
in IN O
registry NN O
. . O

This DT O
first JJ O
level NN O
of IN O
deobfuscation NN O
in IN O
wmiprvse.dll NN O
takes VBZ O
around RB O
3 CD O
- SYM O
4 CD O
minutes NNS O
to TO O
finish VB O
. . O

Then RB O
it PRP O
allocates VBZ O
memory NN O
using VBG O
VirtualAlloc NNP O
and CC O
writes VBZ O
the DT O
unpacked JJ O
code NN O
to IN O
newly RB O
allocated VBN O
memory NN O
before IN O
it PRP O
jumps VBZ O
to IN O
the DT O
unpacked JJ O
code NN O
as IN O
shown VBN O
in IN O
following VBG O
screen NN O
shot NN O
. . O

This DT O
dll NN O
has VBZ O
3 CD O
layers NNS O
of IN O
unpacking NN O
. . O

The DT O
one NN O
above IN O
is VBZ O
level NN O
one CD O
, , O
below IN O
iyou NN O
can MD O
see VB O
level NN O
two CD O
. . O

We PRP O
can MD O
see VB O
the DT O
passing NN O
of IN O
the DT O
control NN O
to IN O
the DT O
newly RB O
unpacked VBN O
.dll . O
@CALL NN O
EAX NNP O
. . O

It PRP O
's VBZ O
very RB O
time NN O
- HYPH O
consuming VBG O
to TO O
understand VB O
the DT O
functionality NN O
of IN O
the DT O
dll NN O
as IN O
it PRP B-Entity
decrypts NNS O
and CC O
builds VBZ B-Action
its PRP$ O
own JJ B-Entity
runtime NN I-Entity
import NN I-Entity
table NN I-Entity
to IN B-Modifier
hinder VBP O
the DT B-Entity
analysis NN I-Entity
. . O

Analyst NN O
can MD O
not RB O
directly RB O
see VB O
which WDT O
API NN O
gets VBZ O
called VBN O
. . O

Finally RB O
we PRP O
can MD O
see VB O
it PRP B-Entity
's POS O
connecting VBG B-Action
to IN B-Modifier
webdav.cloudme.com ADD B-Entity
and CC O
cleartext JJ O
credentials NNS O
in IN O
following VBG O
screenshot NN O
. . O

Malware NNP B-Entity
tries VBZ O
to TO O
communicate VB B-Action
with IN B-Modifier
the DT O
user NN B-Entity
account NN I-Entity
created VBN I-Entity
at IN I-Entity
the DT I-Entity
WebDAV NNP I-Entity
C&C NNP I-Entity
to IN O
exfiltrate NN O
system NN B-Entity
and CC O
user NN B-Entity
information NN I-Entity
. . O

Reference NN O
. . O

https://www.bluecoat.com ADD O
/ SYM O
security NN O
- HYPH O
blog/2014 NN O
- HYPH O
12 CD O
- HYPH O
09/blue CD O
- HYPH O
coat NN O
- HYPH O
exposes-%E2%80%9C- JJ O
inception NN O
- HYPH O
framework%E2%80%9D NN O
- HYPH O
very RB O
- HYPH O
sophisticated JJ O
- HYPH O
layered NN O
- HYPH O
malware NN O

