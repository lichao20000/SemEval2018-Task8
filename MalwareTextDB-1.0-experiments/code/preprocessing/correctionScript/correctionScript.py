"""
------------------------------------------------------------
correctionScript.py
------------------------------------------------------------
This script takes two directories - old/ and new/.

The old directory should contain .txt and .ann files.
The new directory should contain .txt files only.

The .txt files in the new directory should be the new edited
versions of the ones in the old directory.
The names of the .txt files should be identical in both
directories.

The script then automatically generates new .ann files for
the new .txt files.

It uses the difflib library to identify differences
between old and new and then shifts the character counts in
the .ann files.

The script works best when the changes to the .txt files
take place in new lines rather than in the middle of lines.

Run using
  python correctionScript.py <old_folder> <new_folder>
where <old_folder> and <new_folder> are the relative folder
addresses terminated with a forward slash (/).

------------------------------------------------------------
"""

import os
import re
import io

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import difflib
d = difflib.Differ()

def main():
  if len(sys.argv)==3:
    inputOrigFile = sys.argv[1]
    inputNewFile = sys.argv[2]
    if inputOrigFile[-4:]==".txt" and inputNewFile[-4:]==".txt": processSingleFile(inputOrigFile,inputNewFile)
    elif inputOrigFile[-1]=="/" and inputNewFile[-1]=="/": processMultipleFiles(inputOrigFile,inputNewFile)
    else: error()
  else: error()

def error():
    print ""
    print "Usage: checkingScript.py textfile-orig textfile-new"
    print "Usage: checkingScript.py folder-orig folder-new"
    print ""
    print "Please make sure that textfile names are terminated with '.txt'."
    print "Please make sure that folder names are terminated with a forward slash (/)."
    print ""

def processMultipleFiles(folderOrig,folderNew):
  for row in os.listdir(folderNew):
    if row[-4:]==".txt":
      file1 = folderOrig+row[:-4]+".txt"
      file2 = folderNew+row
      processSingleFile(file1,file2)

def processSingleFile(file1,file2):

  #file1 = 'guide1.txt'
  #file1 = 'C5_APT_C2InTheFifthDomain4.txt'
  #file2 = 'guide2.txt'
  #file2 = 'C5_APT_C2InTheFifthDomain4-2.txt'
  #annfile = 'guide.ann'
  #annfile = 'C5_APT_C2InTheFifthDomain4.ann'

  annfile = file1[:-3]+"ann"

  changes = []
  linechange = []

  text1 = ''
  with io.open(file1,'r',encoding='UTF-8') as f:
    for line in f: text1+=line
  text2 = ''
  with io.open(file2,'r',encoding='UTF-8') as f:
    for line in f: text2+=line
  annList = []
  terms = []
  with open(annfile,'r') as f:
    for line in f:
      annList.append(line)
      if line[0]=='T':
        termNo = line.split('\t')[0]
        startPos = int(line.split('\t')[1].split(' ')[1])
        endPos = int(line.split('\t')[1].split(' ')[-1])
        interPos = []
        for pos in line.split('\t')[1].split(' ')[2:-1]:
          pos = pos.split(';')
          interPos.append(int(pos[0]))
          interPos.append(int(pos[1]))
        words = line.split('\t')[2]
        terms.append([startPos,endPos,termNo,interPos,words])
  terms.sort()

  diff = list(d.compare(text1.splitlines(True), text2.splitlines(True)))

  #for entryNo,entry in enumerate(diff): print str(entryNo)+' -> '+entry+' -> '+str(len(entry))
  #for entryNo,entry in enumerate(diff): print [entryNo,entry]
  for entry in diff: print [entry]
  #  if entry[0]!=' ':print [entry]

  # For every line,
  # if it begins with ' ', consolidate changes to previous line
  # process line and add changes to linechange[]

  insertLine = ()
  deleteLine = ()
  insertEntireLine = True
  deleteEntireLine = True
  changeMode = ''
  charSpan = 0
  for entryNo,entry in enumerate(diff):
    if entry[0]==' ':
      if len(linechange)>0: changes = mergeChanges(linechange,changes)
      if len(deleteLine)>0 and deleteEntireLine==True: changes.append(deleteLine)
      if len(insertLine)>0 and insertEntireLine==True: changes.append(insertLine)

      linechange = []
      linechange.append([(' ',len(entry)-2)])
      insertLine = ()
      deleteLine = ()
      insertEntireLine = True
      deleteEntireLine = True
    elif entry[0]=='-':
      #if len(insertLine)>0 and changeMode=='+': changes.append(insertLine)
      if len(deleteLine)>0 and changeMode=='-': changes.append(deleteLine)
      if len(linechange)>0: changes = mergeChanges(linechange,changes)
      linechange = []
      charSpan = len(entry)-2
      changeMode = '-'
      deleteLine = ('-',len(entry)-2)
      deleteMode = True
    elif entry[0]=='+':
      if len(insertLine)>0 and changeMode=='+': changes.append(insertLine)

      #if len(deleteLine)>0 and changeMode=='-': changes.append(deleteLine)
      if len(linechange)>0 and changeMode!='-':
        changes = mergeChanges(linechange,changes)
        linechange = []
      if len(entry)-2>charSpan: charSpan = len(entry)-2
      changeMode = '+'
      insertLine = ('+',len(entry)-2)
      insertMode = True
    elif entry[0]=='?':
      linechange.append(extractChangesFrom(entry,charSpan,changeMode))
      if len(deleteLine)>0:
        deleteLine = ()
        insertEntireLine = False
      if len(insertLine)>0:
        insertLine = ()
        deleteEntireLine = False

  if len(linechange)>0 and changeMode!='-':
    changes = mergeChanges(linechange,changes)
  if len(insertLine)>0: changes.append(insertLine)
  if len(deleteLine)>0: changes.append(deleteLine)

  charNumber = 0
  for change in changes:
    print charNumber
    print change
    if change[0]!='-':charNumber+=change[1]

  # Modify ann file

  charCount = 0
  charOffset = 0
  #prevChangeNo = -1
  #changes.pop(0)
  for changeNo,change in enumerate(changes):
    if change[0]==' ':
      charCount+=change[1]
    elif change[0]=='+':
      charOffset = change[1]
      terms = applyChanges(terms,charCount,charOffset,file2)
      charCount+=change[1]
    elif change[0]=='-':
      charOffset = -change[1]
      terms = applyChanges(terms,charCount,charOffset,file2)

  for term in terms: print term

  for term in terms:
    for lineNo,line in enumerate(annList):
      if term[2]==line.split('\t')[0]:
        print term[2] +' -> '+line.split('\t')[0]
        #annList[lineNo]=line.split('\t')[0]+'\t'+line.split('\t')[1].split(' ')[0]+' '+str(term[0])+' '+str(term[1])+'\t'+line.split('\t')[2]
        newLine = ""
        newLine+=line.split('\t')[0]+'\t'+line.split('\t')[1].split(' ')[0]+' '+str(term[0])+' '
        i = 0
        while i<len(term[3]):
          newLine+=str(term[3][i])+';'+str(term[3][i+1])+' '
          i+=2
        #newLine+=str(term[1])+'\t'+line.split('\t')[2]
        newLine+=str(term[1])+'\t'+term[4]
        annList[lineNo] = newLine


  #for line in annList:print line
  with open(file2[:-3]+'ann','w') as f:
    for line in annList:
      f.write(line)

def resetCountingCounts():
  return (dict([(' ',False),('-',False),('+',False)]),dict([(' ',0),('-',0),('+',0)]))

def addChange(counting,counts):
  changedKey = ''
  for key in counting:
    if counting[key]==True:
      changedKey = key
      changedCount = counts[key]
      break
  return (changedKey,changedCount)

def extractChangesFrom(diffline,charSpan,changeMode):
  counting = dict([(' ',False),('-',False),('+',False)])
  counts = dict([(' ',0),('-',0),('+',0)])
  charCount = 0
  linechange = []
  for char in diffline[2:]:
    if char==' ':
      if counting['+']==True or counting['-']==True:
        changedKey,changedCount = addChange(counting,counts)
        linechange.append((changedKey,changedCount))
        charCount+=counts[changedKey]
        counting,counts = resetCountingCounts()
      counting[' ']=True
      counts[' ']+=1
    elif char=='+' or (char=='^' and changeMode=='+'):
      if counting[' ']==True or counting['-']==True:
        changedKey,changedCount = addChange(counting,counts)
        linechange.append((changedKey,changedCount))
        charCount+=counts[changedKey]
        counting,counts = resetCountingCounts()
      counting['+']=True
      counts['+']+=1
    elif char=='-' or (char=='^' and changeMode=='-'):
      if counting[' ']==True or counting['+']==True:
        changedKey,changedCount = addChange(counting,counts)
        linechange.append((changedKey,changedCount))
        charCount+=counts[changedKey]
        counting,counts = resetCountingCounts()
      counting['-']=True
      counts['-']+=1
    elif char=='\n':
      changedKey,changedCount = addChange(counting,counts)
      linechange.append((changedKey,changedCount))
      charCount+=counts[changedKey]
      counting,counts = resetCountingCounts()
      if charCount<charSpan: linechange.append((' ',charSpan-charCount))
  return linechange

def mergeChanges(linechange,changes):
  if len(linechange)==0: return changes
  if len(linechange)==1:
    for change in linechange[0]:
      changes.append(change)
    return changes
  deletion = linechange[0]
  insertion = linechange[1]
  deleteText = ''
  insertText = ''
  mergeText = ''

  for entry in deletion: deleteText+=entry[1]*entry[0]
  for entry in insertion: insertText+=entry[1]*entry[0]

  if len(deleteText)>len(insertText): changeText = [deleteText,insertText]
  else: changeText = [insertText,deleteText]
  """
  for charNo,char in enumerate(changeText[0]):
    if charNo<len(changeText[1]):
      if char==' ': mergeText+=changeText[1][charNo]
      elif changeText[1][charNo]==' ': mergeText+=char
      else: mergeText+=' '
    else: mergeText+=char
  """
  for charNo,char in enumerate(deleteText):
    if charNo<len(insertText):
      if char=='-' and insertText[charNo]=='+': mergeText+=' '
      elif char=='-' and insertText[charNo]==' ': mergeText+='-'
      elif char==' ' and insertText[charNo]==' ': mergeText+=' '
      elif char==' ' and insertText[charNo]=='+':
        insertLength = 0
        while insertText[charNo]=='+':
          mergeText+='+'
          insertLength+=1
          insertText = insertText[:charNo]+insertText[charNo+1:]
        #mergeText+=' '*(insertLength)
    else: mergeText+=char

  print [deleteText]
  print [insertText]
  print [mergeText]

  mergeText = '? '+mergeText+'\n'

  linechange = [extractChangesFrom(mergeText,len(mergeText)-3,changeMode='=')]
  for change in linechange[0]:
    changes.append(change)
  return changes

def applyChanges(terms,charCount,charOffset,file2):
  #print charCount,charOffset
  for termNo,term in enumerate(terms):
    if term[0]>=charCount:
      terms[termNo][0]+=charOffset
      terms[termNo][1]+=charOffset
      for i,n in enumerate(terms[termNo][3]):
        terms[termNo][3][i]+=charOffset
    elif term[1]>charCount:
      terms[termNo][1]+=charOffset
      for i,n in enumerate(terms[termNo][3]):
        if n>=charCount:
          terms[termNo][3][i]+=charOffset
      with io.open(file2,'r',encoding='UTF-8') as f:
        prevPos = terms[termNo][0]
        f.read(prevPos)
        words = ""
        i = 0
        while i<len(terms[termNo][3]):
          words+=f.read(terms[termNo][3][i]-prevPos)
          f.read(terms[termNo][3][i+1]-terms[termNo][3][i])
          prevPos = terms[termNo][3][i+1]
          i+=2
        words+=f.read(terms[termNo][1]-prevPos)
        terms[termNo][4] = words+'\n'

  return terms


if __name__ == "__main__": main()
